webpackHotUpdate("lode-corp",{

/***/ "./packages/mars-theme/src/components/page-ap.js":
/*!*******************************************************!*\
  !*** ./packages/mars-theme/src/components/page-ap.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _react_hook_media_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-hook/media-query */ \"./node_modules/@react-hook/media-query/dist/module/index.js\");\n/* harmony import */ var _component_accordion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component-accordion */ \"./packages/mars-theme/src/components/component-accordion.js\");\n/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./i18n */ \"./packages/mars-theme/src/components/i18n.js\");\n/* harmony import */ var _img_ap_hero_bg_jpg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../img/ap-hero-bg.jpg */ \"./packages/mars-theme/src/img/ap-hero-bg.jpg\");\n/* harmony import */ var _img_ap_hero_bg_jpg__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_img_ap_hero_bg_jpg__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _img_earning_bg_2_jpg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../img/earning-bg-2.jpg */ \"./packages/mars-theme/src/img/earning-bg-2.jpg\");\n/* harmony import */ var _img_earning_bg_2_jpg__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_img_earning_bg_2_jpg__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _img_manage_left_image_png__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../img/manage-left-image.png */ \"./packages/mars-theme/src/img/manage-left-image.png\");\n/* harmony import */ var _img_manage_left_image_png__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_img_manage_left_image_png__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _img_manage_large_image_png__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../img/manage-large-image.png */ \"./packages/mars-theme/src/img/manage-large-image.png\");\n/* harmony import */ var _img_manage_large_image_png__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_img_manage_large_image_png__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../img/icon-withdraw.png */ \"./packages/mars-theme/src/img/icon-withdraw.png\");\n/* harmony import */ var _img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _img_lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../img/lodepay-tiles.jpg */ \"./packages/mars-theme/src/img/lodepay-tiles.jpg\");\n/* harmony import */ var _img_lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_img_lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _img_checkout_image_png__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../img/checkout-image.png */ \"./packages/mars-theme/src/img/checkout-image.png\");\n/* harmony import */ var _img_checkout_image_png__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_img_checkout_image_png__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _img_market_tiles_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../img/market-tiles.png */ \"./packages/mars-theme/src/img/market-tiles.png\");\n/* harmony import */ var _img_market_tiles_png__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_img_market_tiles_png__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../img/trio-background-circle.jpg */ \"./packages/mars-theme/src/img/trio-background-circle.jpg\");\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _img_background_future_jpg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../img/background-future.jpg */ \"./packages/mars-theme/src/img/background-future.jpg\");\n/* harmony import */ var _img_background_future_jpg__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_img_background_future_jpg__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _img_download_app_store_png__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../img/download-app-store.png */ \"./packages/mars-theme/src/img/download-app-store.png\");\n/* harmony import */ var _img_download_app_store_png__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_img_download_app_store_png__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _img_download_google_play_png__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../img/download-google-play.png */ \"./packages/mars-theme/src/img/download-google-play.png\");\n/* harmony import */ var _img_download_google_play_png__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_img_download_google_play_png__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/* Images *//* Breakpoints */var breakpoints=[576,768,1320,1720];var mq=breakpoints.map(bp=>\"@media (max-width: \".concat(bp,\"px)\"));var PageAP=(_ref)=>{var{state}=_ref;var{t,i18n}=Object(react_i18next__WEBPACK_IMPORTED_MODULE_3__[\"useTranslation\"])();return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(APContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(HeroContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Title,null,\"Join the \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"br\",null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"b\",null,\"LODEpay\"),\" Affiliate \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"br\",null),\" Program today.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(HeroList,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"li\",null,\"Earn AGX on every purchase made by your referrals \"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"li\",null,\"Get payouts monthly \"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"li\",null,\"Easily track your earnings like a pro\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(B,null,\"Enable your network with Honest Money.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(TransparentButton,null,\"Become an Affiliate\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(RewardedContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Title,null,\"Get \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"b\",null,\"rewarded\"),\"* for helping others.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(P,null,\"Focus on helping your network build their honest money portfolios,\",\" \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"b\",null,\"we\\u2019ll handle the rest!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Disclaimer,null,\"*All rewards are paid out in AGX Coins. \"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(CardHeader,null,\"One-off\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(CardDesc,null,\"Every time a new member purchases a minimum of 200 AGX, get 4% of the margin on that sale.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(CardHeader,null,\"Monthly\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(CardDesc,null,\"Every time a new member signs up for an AGX Subscription, you\\u2019ll get 4% of the margin on that sale every month.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(CardHeader,null,\"Bonus\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(CardDesc,null,\"As your network starts growing, so will your earnings! Earn even more rewards as your network chain of referrals expands.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(PrimaryButton,null,\"Create Account\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(RightImage,{src:_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_15___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(EarningContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(RightImage,{src:_img_earning_bg_2_jpg__WEBPACK_IMPORTED_MODULE_8___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Title,null,\"Start earning with \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"b\",null,\"AGX.\"),\" \"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(P,null,\"Want to get started? It\\u2019s as easy as 1-2-3.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(EarningList,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"li\",null,\"Open a LODEPay Account and login to the member\\u2019s portal\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"li\",null,\"Go to the \\u201CAffiliate\\u201D tab to get your \\u201CReferral link\\u201D.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"li\",null,\"Share your unique link with your network via email directly from the member\\u2019s portal. You can also copy your link and share it by SMS, WhatsApp, social, or any platform of your choice.\",\" \")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(PrimaryButton,null,\"Activate Now\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(ManageContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(LeftImage,{src:_img_manage_left_image_png__WEBPACK_IMPORTED_MODULE_9___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Title,null,\"Manage your \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"b\",null,\"earnings\"),\" like a pro.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(P,null,\"Track your referrals and earnings on the go with the LODEPay Wallet.\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"br\",null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(\"b\",null,\"One wallet unlocking a world of honest money. \")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(DownloadButton,{src:_img_download_app_store_png__WEBPACK_IMPORTED_MODULE_17___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(DownloadButton,{src:_img_download_google_play_png__WEBPACK_IMPORTED_MODULE_18___default.a})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_19__[\"jsx\"])(LargeBottomImage,{src:_img_manage_large_image_png__WEBPACK_IMPORTED_MODULE_10___default.a})));};// Connect the Header component to get access to the `state` in it's `props`\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(PageAP));/* Global */var DownloadButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e126tp8m0\",label:\"DownloadButton\"})(\"width:188px;margin-right:15px;cursor:pointer;\",mq[2],\"{margin-bottom:10px;}\",mq[0],\"{width:137px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var P=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e126tp8m1\",label:\"P\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMElrQiIsImZpbGUiOiJDOlxcVXNlcnNcXEpvZWxzXFxEb2N1bWVudHNcXEF0b21pYzQ3XFxMT0RFXFxMT0RFIEhvbWVwYWdlXFxmcm9udGl0eVxcbG9kZS1jb3JwXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxwYWdlLWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSwgdXNlTWVkaWFRdWVyaWVzIH0gZnJvbSBcIkByZWFjdC1ob29rL21lZGlhLXF1ZXJ5XCI7XHJcbmltcG9ydCBBY2NvcmRpb24gZnJvbSBcIi4vY29tcG9uZW50LWFjY29yZGlvblwiO1xyXG5pbXBvcnQgXCIuL2kxOG5cIjtcclxuXHJcbi8qIEltYWdlcyAqL1xyXG5pbXBvcnQgYXBIZXJvQmcgZnJvbSBcIi4uL2ltZy9hcC1oZXJvLWJnLmpwZ1wiO1xyXG5pbXBvcnQgZWFybmluZ0JnIGZyb20gXCIuLi9pbWcvZWFybmluZy1iZy0yLmpwZ1wiO1xyXG5pbXBvcnQgbWFuYWdlTGVmdCBmcm9tIFwiLi4vaW1nL21hbmFnZS1sZWZ0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgbWFuYWdlQm90dG9tIGZyb20gXCIuLi9pbWcvbWFuYWdlLWxhcmdlLWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgd2l0aGRyYXdJY29uIGZyb20gXCIuLi9pbWcvaWNvbi13aXRoZHJhdy5wbmdcIjtcclxuaW1wb3J0IGxvZGVwYXlUaWxlc0JnIGZyb20gXCIuLi9pbWcvbG9kZXBheS10aWxlcy5qcGdcIjtcclxuaW1wb3J0IGNoZWNrb3V0SW1hZ2UgZnJvbSBcIi4uL2ltZy9jaGVja291dC1pbWFnZS5wbmdcIjtcclxuaW1wb3J0IG1hcmtldFRpbGVzIGZyb20gXCIuLi9pbWcvbWFya2V0LXRpbGVzLnBuZ1wiO1xyXG5pbXBvcnQgbGFyZ2VDaXJjbGVCZyBmcm9tIFwiLi4vaW1nL3RyaW8tYmFja2dyb3VuZC1jaXJjbGUuanBnXCI7XHJcbmltcG9ydCBmdXR1cmVCZyBmcm9tIFwiLi4vaW1nL2JhY2tncm91bmQtZnV0dXJlLmpwZ1wiO1xyXG5pbXBvcnQgZG93bmxvYWRBcHBTdG9yZSBmcm9tIFwiLi4vaW1nL2Rvd25sb2FkLWFwcC1zdG9yZS5wbmdcIjtcclxuaW1wb3J0IGRvd25sb2FkR29vZ2xlUGxheSBmcm9tIFwiLi4vaW1nL2Rvd25sb2FkLWdvb2dsZS1wbGF5LnBuZ1wiO1xyXG5cclxuLyogQnJlYWtwb2ludHMgKi9cclxuY29uc3QgYnJlYWtwb2ludHMgPSBbNTc2LCA3NjgsIDEzMjAsIDE3MjBdO1xyXG5jb25zdCBtcSA9IGJyZWFrcG9pbnRzLm1hcCgoYnApID0+IGBAbWVkaWEgKG1heC13aWR0aDogJHticH1weClgKTtcclxuXHJcbmNvbnN0IFBhZ2VBUCA9ICh7IHN0YXRlIH0pID0+IHtcclxuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxBUENvbnRhaW5lcj5cclxuICAgICAgPEhlcm9Db250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgSm9pbiB0aGUgPGJyIC8+XHJcbiAgICAgICAgICA8Yj5MT0RFcGF5PC9iPiBBZmZpbGlhdGUgPGJyIC8+IFByb2dyYW0gdG9kYXkuXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8SGVyb0xpc3Q+XHJcbiAgICAgICAgICA8bGk+RWFybiBBR1ggb24gZXZlcnkgcHVyY2hhc2UgbWFkZSBieSB5b3VyIHJlZmVycmFscyA8L2xpPlxyXG4gICAgICAgICAgPGxpPkdldCBwYXlvdXRzIG1vbnRobHkgPC9saT5cclxuICAgICAgICAgIDxsaT5FYXNpbHkgdHJhY2sgeW91ciBlYXJuaW5ncyBsaWtlIGEgcHJvPC9saT5cclxuICAgICAgICA8L0hlcm9MaXN0PlxyXG4gICAgICAgIDxCPkVuYWJsZSB5b3VyIG5ldHdvcmsgd2l0aCBIb25lc3QgTW9uZXkuPC9CPlxyXG4gICAgICAgIDxUcmFuc3BhcmVudEJ1dHRvbj5CZWNvbWUgYW4gQWZmaWxpYXRlPC9UcmFuc3BhcmVudEJ1dHRvbj5cclxuICAgICAgPC9IZXJvQ29udGFpbmVyPlxyXG4gICAgICA8UmV3YXJkZWRDb250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgR2V0IDxiPnJld2FyZGVkPC9iPiogZm9yIGhlbHBpbmcgb3RoZXJzLlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPFA+XHJcbiAgICAgICAgICBGb2N1cyBvbiBoZWxwaW5nIHlvdXIgbmV0d29yayBidWlsZCB0aGVpciBob25lc3QgbW9uZXkgcG9ydGZvbGlvcyx7XCIgXCJ9XHJcbiAgICAgICAgICA8Yj53ZeKAmWxsIGhhbmRsZSB0aGUgcmVzdCE8L2I+XHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxEaXNjbGFpbWVyPipBbGwgcmV3YXJkcyBhcmUgcGFpZCBvdXQgaW4gQUdYIENvaW5zLiA8L0Rpc2NsYWltZXI+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5PbmUtb2ZmPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgRXZlcnkgdGltZSBhIG5ldyBtZW1iZXIgcHVyY2hhc2VzIGEgbWluaW11bSBvZiAyMDAgQUdYLCBnZXQgNCUgb2ZcclxuICAgICAgICAgICAgICB0aGUgbWFyZ2luIG9uIHRoYXQgc2FsZS5cclxuICAgICAgICAgICAgPC9DYXJkRGVzYz5cclxuICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5Nb250aGx5PC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgRXZlcnkgdGltZSBhIG5ldyBtZW1iZXIgc2lnbnMgdXAgZm9yIGFuIEFHWCBTdWJzY3JpcHRpb24sIHlvdeKAmWxsXHJcbiAgICAgICAgICAgICAgZ2V0IDQlIG9mIHRoZSBtYXJnaW4gb24gdGhhdCBzYWxlIGV2ZXJ5IG1vbnRoLlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPkJvbnVzPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgQXMgeW91ciBuZXR3b3JrIHN0YXJ0cyBncm93aW5nLCBzbyB3aWxsIHlvdXIgZWFybmluZ3MhIEVhcm4gZXZlblxyXG4gICAgICAgICAgICAgIG1vcmUgcmV3YXJkcyBhcyB5b3VyIG5ldHdvcmsgY2hhaW4gb2YgcmVmZXJyYWxzIGV4cGFuZHMuXHJcbiAgICAgICAgICAgIDwvQ2FyZERlc2M+XHJcbiAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgPFByaW1hcnlCdXR0b24+Q3JlYXRlIEFjY291bnQ8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgPFJpZ2h0SW1hZ2Ugc3JjPXtsYXJnZUNpcmNsZUJnfSAvPlxyXG4gICAgICA8L1Jld2FyZGVkQ29udGFpbmVyPlxyXG4gICAgICA8RWFybmluZ0NvbnRhaW5lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2Vhcm5pbmdCZ30gLz5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICBTdGFydCBlYXJuaW5nIHdpdGggPGI+QUdYLjwvYj57XCIgXCJ9XHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8UD5XYW50IHRvIGdldCBzdGFydGVkPyBJdOKAmXMgYXMgZWFzeSBhcyAxLTItMy48L1A+XHJcblxyXG4gICAgICAgIDxFYXJuaW5nTGlzdD5cclxuICAgICAgICAgIDxsaT5PcGVuIGEgTE9ERVBheSBBY2NvdW50IGFuZCBsb2dpbiB0byB0aGUgbWVtYmVy4oCZcyBwb3J0YWw8L2xpPlxyXG4gICAgICAgICAgPGxpPkdvIHRvIHRoZSDigJxBZmZpbGlhdGXigJ0gdGFiIHRvIGdldCB5b3VyIOKAnFJlZmVycmFsIGxpbmvigJ0uPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgU2hhcmUgeW91ciB1bmlxdWUgbGluayB3aXRoIHlvdXIgbmV0d29yayB2aWEgZW1haWwgZGlyZWN0bHkgZnJvbSB0aGVcclxuICAgICAgICAgICAgbWVtYmVy4oCZcyBwb3J0YWwuIFlvdSBjYW4gYWxzbyBjb3B5IHlvdXIgbGluayBhbmQgc2hhcmUgaXQgYnkgU01TLFxyXG4gICAgICAgICAgICBXaGF0c0FwcCwgc29jaWFsLCBvciBhbnkgcGxhdGZvcm0gb2YgeW91ciBjaG9pY2Uue1wiIFwifVxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICA8L0Vhcm5pbmdMaXN0PlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkFjdGl2YXRlIE5vdzwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgPC9FYXJuaW5nQ29udGFpbmVyPlxyXG4gICAgICA8TWFuYWdlQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8TGVmdEltYWdlIHNyYz17bWFuYWdlTGVmdH0gLz5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgICBNYW5hZ2UgeW91ciA8Yj5lYXJuaW5nczwvYj4gbGlrZSBhIHByby5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgVHJhY2sgeW91ciByZWZlcnJhbHMgYW5kIGVhcm5pbmdzIG9uIHRoZSBnbyB3aXRoIHRoZSBMT0RFUGF5XHJcbiAgICAgICAgICAgICAgV2FsbGV0LlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIDxiPk9uZSB3YWxsZXQgdW5sb2NraW5nIGEgd29ybGQgb2YgaG9uZXN0IG1vbmV5LiA8L2I+XHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEFwcFN0b3JlfSAvPlxyXG4gICAgICAgICAgICAgIDxEb3dubG9hZEJ1dHRvbiBzcmM9e2Rvd25sb2FkR29vZ2xlUGxheX0gLz5cclxuICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8TGFyZ2VCb3R0b21JbWFnZSBzcmM9e21hbmFnZUJvdHRvbX0gLz5cclxuICAgICAgICB7Lyo8TGFyZ2VCZ0ltYWdlIHNyYz17bGFyZ2VDaXJjbGVCZ30gLz4qL31cclxuICAgICAgPC9NYW5hZ2VDb250YWluZXI+XHJcbiAgICA8L0FQQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyBDb25uZWN0IHRoZSBIZWFkZXIgY29tcG9uZW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGBzdGF0ZWAgaW4gaXQncyBgcHJvcHNgXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUGFnZUFQKTtcclxuXHJcbi8qIEdsb2JhbCAqL1xyXG5cclxuY29uc3QgRG93bmxvYWRCdXR0b24gPSBzdHlsZWQuaW1nYFxyXG4gIHdpZHRoOiAxODhweDtcclxuICBtYXJnaW4tcmlnaHQ6IDE1cHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICR7bXFbMl19IHtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHdpZHRoOiAxMzdweDtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBQID0gc3R5bGVkLnBgYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBIZXJvICovXHJcblxyXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA2MHB4O1xyXG4gIG1heC13aWR0aDogNzUwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAke21xWzFdfSB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgQiA9IHN0eWxlZC5iYFxyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuYDtcclxuXHJcblxyXG5cclxuY29uc3QgRGlzY2xhaW1lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcbmNvbnN0IEhlcm9MaXN0ID0gc3R5bGVkLnVsYFxyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgZm9udC1zaXplOiAyNXB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAmID4gbGkge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBUcmFuc3BhcmVudEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCAjMzE0NDUyO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDMwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQVBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiAjMzE0NDUyO1xyXG4gIGZvbnQtZmFtaWx5OiBcIlJ1YmlrXCI7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7YXBIZXJvQmd9KTtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICR7bXFbM119IHtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0xMDBweCAwO1xyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjgwcHggMDtcclxuICAgIFxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogI2YyZjBmMztcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzNzVweDtcclxuICAgICR7bXFbMl19IHtcclxuICAgICAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgSGVyb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAzMDBweDtcclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICAke1RyYW5zcGFyZW50QnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6NyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OjclO1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIFJld2FyZGVkICovXHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiAyNDBweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuYDtcclxuXHJcbmNvbnN0IFJpZ2h0SW1hZ2UgPSBzdHlsZWQuaW1nYGA7XHJcblxyXG5jb25zdCBDYXJkID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nOiA0MHB4O1xyXG4gIGJhY2tncm91bmQ6ICMzNmFhZmY7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIG1heC13aWR0aDogNDAwcHg7XHJcbiAgd2lkdGg6IDQwMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAzMHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMzBweDtcclxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQ2FyZEhlYWRlciA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA0MHB4O1xyXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMDAzZDZhNDA7XHJcbiAgcGFkZGluZy1ib3R0b206IDMwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkRGVzYyA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBmb250LXNpemU6IDIzcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBvcGFjaXR5OiAwLjc7XHJcbmA7XHJcblxyXG5jb25zdCBSZXdhcmRlZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgcGFkZGluZy10b3A6IDEwMHB4O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBmb250LXNpemU6IDIycHg7XHJcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICB9XHJcbiAgJHtEaXNjbGFpbWVyfSB7XHJcbiAgfVxyXG4gICR7Um93fSB7XHJcbiAgICBtYXJnaW4tdG9wOiA3NXB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IC02NDBweDtcclxuICAgIHRvcDogLTI0MHB4O1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjc1KTtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1hcmdpbi10b3A6IDc1cHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MDBweDtcclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiAxMzIwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNTBweCAtNTBweDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAyMDBweDtcclxuICAgIHBhZGRpbmctdG9wOiAwO1xyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMDBweDtcclxuICAgIH1cclxuICAgICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMDBweDtcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB6LWluZGV4OiAtMztcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMHB4O1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgJHtDYXJkfSB7XHJcbiAgICAgIG1heC13aWR0aDogMzIwcHg7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAmID4gcCB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogNTBweDtcclxuICAgICAgcGFkZGluZy1yaWdodDogNTBweDtcclxuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gICAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEyNXB4O1xyXG4gICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgfVxyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDo3JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6NyU7XHJcbiAgICAke0NhcmR9IHtcclxuICAgICAgbWF4LXdpZHRoOiA3MHZ3O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIEVhcm5pbmcgQ29udGFpbmVyICovXHJcblxyXG5jb25zdCBMYXJnZUJnSW1hZ2UgPSBzdHlsZWQuaW1nYGA7XHJcblxyXG5jb25zdCBFYXJuaW5nTGlzdCA9IHN0eWxlZC5vbGBcclxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG5cclxuICAmID4gbGkge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzNHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEVhcm5pbmdDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogMCAzMzBweCAwIDA7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBzcGFjZS1iZXR3ZWVuO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBmb250LXNpemU6IDIycHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXHJcbiAgICAxODBkZWcsXHJcbiAgICByZ2IoMjQ5IDI0OSAyNDkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSAxMDAlXHJcbiAgKTtcclxuICB6LWluZGV4OiAtMTtcclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1heC13aWR0aDogMzUwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyNTBweDtcclxuICAgIHotaW5kZXg6IDQ7XHJcbiAgfVxyXG4gICR7VGl0bGV9IHtcclxuICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgIG1heC13aWR0aDogMzUwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAyNzVweDtcclxuICB9XHJcbiAgJHtSaWdodEltYWdlfSB7XHJcbiAgICBtYXgtaGVpZ2h0OiA5NDhweDtcclxuICAgIG1heC13aWR0aDogMTAzNHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDEycHg7XHJcbiAgICB0b3A6IDQwcHg7XHJcbiAgfVxyXG4gICR7RWFybmluZ0xpc3R9IHtcclxuICAgIG1heC13aWR0aDogNTUwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgei1pbmRleDogLTE7XHJcbiAgICAgIG1heC13aWR0aDogODAwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDE1MHB4O1xyXG4gICAgfVxyXG4gICAgJHtQfSB7XHJcbiAgICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIH1cclxuICAgICR7RWFybmluZ0xpc3R9IHtcclxuICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgICAmID4gbGkge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDVweDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogNTBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCAxODBkZWcscmdiKDI0OSAyNDkgMjQ5KSAwJSxyZ2IoMjU1IDI1NSAyNTUpIDEwMCUgKTtcclxuICAgICR7RWFybmluZ0xpc3R9IHtcclxuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgICBtYXJnaW4tdG9wOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgJiBsaSB7XHJcbiAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIH1cclxuICAgICYgdWwge1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDA7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEyNXB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAke1B9IHtcclxuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgbWFyZ2luLXRvcDogMzBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDYwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogTWFuYWdlICovXHJcblxyXG5jb25zdCBMZWZ0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBMYXJnZUJvdHRvbUltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuY29uc3QgTWFuYWdlQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICBtYXJnaW4tYm90dG9tOiAyMDBweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAke0xhcmdlQm90dG9tSW1hZ2V9IHtcclxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHRvcDogLTk5cHg7XHJcbiAgfVxyXG5cclxuICAmID4gZGl2IHtcclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogLTEwMHB4O1xyXG4gICAgfVxyXG5cclxuICAgICYgPiBkaXYge1xyXG4gICAgICAke1RpdGxlfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgICAgICBmb250LXNpemU6IDQ1cHg7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICAgICAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgICAgfVxyXG4gICAgICAke1B9IHtcclxuICAgICAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgICAgIG1heC13aWR0aDogNDUwcHg7XHJcbiAgICAgICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgICAgICYgPiBiIHtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICR7TGFyZ2VCZ0ltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgei1pbmRleDogLTE7XHJcbiAgICAgIHdpZHRoOiAyMDczcHg7XHJcbiAgICAgIHRvcDogLTgwMHB4O1xyXG4gICAgICBsZWZ0OiAtODEwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTAwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDI1cHg7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDI1cHg7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgbGVmdDogLTEwMHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDcwdnc7XHJcbiAgICB9XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICAmID4gZGl2IHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgbGVmdDogLTE1MHB4O1xyXG4gICAgICAgICR7VGl0bGV9IHtcclxuICAgICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtMYXJnZUJvdHRvbUltYWdlfSB7XHJcbiAgICAgIG1heC13aWR0aDoxMDB2dztcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDBweDtcclxuICAgIG1hcmdpbi10b3A6IDBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xyXG4gICAgJHtMYXJnZUJvdHRvbUltYWdlfSB7XHJcbiAgICAgIGRpc3BsYXk6bm9uZTtcclxuICAgIH1cclxuICAgICR7Um93fSB7XHJcbiAgICAgICYgPiBkaXYge1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgJHtQfSB7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICR7VGl0bGV9IHtcclxuICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHtSb3d9IHtcclxuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICBvcmRlcjoxO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgICBsZWZ0OjA7XHJcbiAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke0xhcmdlQmdJbWFnZX0ge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICB9XHJcbmA7XHJcbiJdfQ== */\");var Row=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m2\",label:\"Row\"})(\"display:flex;\",mq[2],\"{flex-direction:column;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* Hero */var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m3\",label:\"Title\"})(\"font-size:60px;max-width:750px;margin-top:200px;font-weight:300;\",mq[1],\"{font-size:40px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var B=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"b\",{target:\"e126tp8m4\",label:\"B\"})( false?undefined:{name:\"fhbvt5\",styles:\"display:block;font-size:25px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Disclaimer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m5\",label:\"Disclaimer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var HeroList=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\",{target:\"e126tp8m6\",label:\"HeroList\"})( false?undefined:{name:\"8fzeqs\",styles:\"margin-top:40px;font-size:25px;font-weight:300;max-width:400px;& > li{margin-top:10px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TransparentButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e126tp8m7\",label:\"TransparentButton\"})( false?undefined:{name:\"15hozzu\",styles:\"color:#314452;background:none;border:none;border-radius:30px;padding:18px 44px;max-width:400px;border:2px solid #314452;font-weight:600;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:40px;cursor:pointer;margin-bottom:300px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUx1QyIsImZpbGUiOiJDOlxcVXNlcnNcXEpvZWxzXFxEb2N1bWVudHNcXEF0b21pYzQ3XFxMT0RFXFxMT0RFIEhvbWVwYWdlXFxmcm9udGl0eVxcbG9kZS1jb3JwXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxwYWdlLWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSwgdXNlTWVkaWFRdWVyaWVzIH0gZnJvbSBcIkByZWFjdC1ob29rL21lZGlhLXF1ZXJ5XCI7XHJcbmltcG9ydCBBY2NvcmRpb24gZnJvbSBcIi4vY29tcG9uZW50LWFjY29yZGlvblwiO1xyXG5pbXBvcnQgXCIuL2kxOG5cIjtcclxuXHJcbi8qIEltYWdlcyAqL1xyXG5pbXBvcnQgYXBIZXJvQmcgZnJvbSBcIi4uL2ltZy9hcC1oZXJvLWJnLmpwZ1wiO1xyXG5pbXBvcnQgZWFybmluZ0JnIGZyb20gXCIuLi9pbWcvZWFybmluZy1iZy0yLmpwZ1wiO1xyXG5pbXBvcnQgbWFuYWdlTGVmdCBmcm9tIFwiLi4vaW1nL21hbmFnZS1sZWZ0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgbWFuYWdlQm90dG9tIGZyb20gXCIuLi9pbWcvbWFuYWdlLWxhcmdlLWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgd2l0aGRyYXdJY29uIGZyb20gXCIuLi9pbWcvaWNvbi13aXRoZHJhdy5wbmdcIjtcclxuaW1wb3J0IGxvZGVwYXlUaWxlc0JnIGZyb20gXCIuLi9pbWcvbG9kZXBheS10aWxlcy5qcGdcIjtcclxuaW1wb3J0IGNoZWNrb3V0SW1hZ2UgZnJvbSBcIi4uL2ltZy9jaGVja291dC1pbWFnZS5wbmdcIjtcclxuaW1wb3J0IG1hcmtldFRpbGVzIGZyb20gXCIuLi9pbWcvbWFya2V0LXRpbGVzLnBuZ1wiO1xyXG5pbXBvcnQgbGFyZ2VDaXJjbGVCZyBmcm9tIFwiLi4vaW1nL3RyaW8tYmFja2dyb3VuZC1jaXJjbGUuanBnXCI7XHJcbmltcG9ydCBmdXR1cmVCZyBmcm9tIFwiLi4vaW1nL2JhY2tncm91bmQtZnV0dXJlLmpwZ1wiO1xyXG5pbXBvcnQgZG93bmxvYWRBcHBTdG9yZSBmcm9tIFwiLi4vaW1nL2Rvd25sb2FkLWFwcC1zdG9yZS5wbmdcIjtcclxuaW1wb3J0IGRvd25sb2FkR29vZ2xlUGxheSBmcm9tIFwiLi4vaW1nL2Rvd25sb2FkLWdvb2dsZS1wbGF5LnBuZ1wiO1xyXG5cclxuLyogQnJlYWtwb2ludHMgKi9cclxuY29uc3QgYnJlYWtwb2ludHMgPSBbNTc2LCA3NjgsIDEzMjAsIDE3MjBdO1xyXG5jb25zdCBtcSA9IGJyZWFrcG9pbnRzLm1hcCgoYnApID0+IGBAbWVkaWEgKG1heC13aWR0aDogJHticH1weClgKTtcclxuXHJcbmNvbnN0IFBhZ2VBUCA9ICh7IHN0YXRlIH0pID0+IHtcclxuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxBUENvbnRhaW5lcj5cclxuICAgICAgPEhlcm9Db250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgSm9pbiB0aGUgPGJyIC8+XHJcbiAgICAgICAgICA8Yj5MT0RFcGF5PC9iPiBBZmZpbGlhdGUgPGJyIC8+IFByb2dyYW0gdG9kYXkuXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8SGVyb0xpc3Q+XHJcbiAgICAgICAgICA8bGk+RWFybiBBR1ggb24gZXZlcnkgcHVyY2hhc2UgbWFkZSBieSB5b3VyIHJlZmVycmFscyA8L2xpPlxyXG4gICAgICAgICAgPGxpPkdldCBwYXlvdXRzIG1vbnRobHkgPC9saT5cclxuICAgICAgICAgIDxsaT5FYXNpbHkgdHJhY2sgeW91ciBlYXJuaW5ncyBsaWtlIGEgcHJvPC9saT5cclxuICAgICAgICA8L0hlcm9MaXN0PlxyXG4gICAgICAgIDxCPkVuYWJsZSB5b3VyIG5ldHdvcmsgd2l0aCBIb25lc3QgTW9uZXkuPC9CPlxyXG4gICAgICAgIDxUcmFuc3BhcmVudEJ1dHRvbj5CZWNvbWUgYW4gQWZmaWxpYXRlPC9UcmFuc3BhcmVudEJ1dHRvbj5cclxuICAgICAgPC9IZXJvQ29udGFpbmVyPlxyXG4gICAgICA8UmV3YXJkZWRDb250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgR2V0IDxiPnJld2FyZGVkPC9iPiogZm9yIGhlbHBpbmcgb3RoZXJzLlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPFA+XHJcbiAgICAgICAgICBGb2N1cyBvbiBoZWxwaW5nIHlvdXIgbmV0d29yayBidWlsZCB0aGVpciBob25lc3QgbW9uZXkgcG9ydGZvbGlvcyx7XCIgXCJ9XHJcbiAgICAgICAgICA8Yj53ZeKAmWxsIGhhbmRsZSB0aGUgcmVzdCE8L2I+XHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxEaXNjbGFpbWVyPipBbGwgcmV3YXJkcyBhcmUgcGFpZCBvdXQgaW4gQUdYIENvaW5zLiA8L0Rpc2NsYWltZXI+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5PbmUtb2ZmPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgRXZlcnkgdGltZSBhIG5ldyBtZW1iZXIgcHVyY2hhc2VzIGEgbWluaW11bSBvZiAyMDAgQUdYLCBnZXQgNCUgb2ZcclxuICAgICAgICAgICAgICB0aGUgbWFyZ2luIG9uIHRoYXQgc2FsZS5cclxuICAgICAgICAgICAgPC9DYXJkRGVzYz5cclxuICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5Nb250aGx5PC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgRXZlcnkgdGltZSBhIG5ldyBtZW1iZXIgc2lnbnMgdXAgZm9yIGFuIEFHWCBTdWJzY3JpcHRpb24sIHlvdeKAmWxsXHJcbiAgICAgICAgICAgICAgZ2V0IDQlIG9mIHRoZSBtYXJnaW4gb24gdGhhdCBzYWxlIGV2ZXJ5IG1vbnRoLlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPkJvbnVzPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgQXMgeW91ciBuZXR3b3JrIHN0YXJ0cyBncm93aW5nLCBzbyB3aWxsIHlvdXIgZWFybmluZ3MhIEVhcm4gZXZlblxyXG4gICAgICAgICAgICAgIG1vcmUgcmV3YXJkcyBhcyB5b3VyIG5ldHdvcmsgY2hhaW4gb2YgcmVmZXJyYWxzIGV4cGFuZHMuXHJcbiAgICAgICAgICAgIDwvQ2FyZERlc2M+XHJcbiAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgPFByaW1hcnlCdXR0b24+Q3JlYXRlIEFjY291bnQ8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgPFJpZ2h0SW1hZ2Ugc3JjPXtsYXJnZUNpcmNsZUJnfSAvPlxyXG4gICAgICA8L1Jld2FyZGVkQ29udGFpbmVyPlxyXG4gICAgICA8RWFybmluZ0NvbnRhaW5lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2Vhcm5pbmdCZ30gLz5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICBTdGFydCBlYXJuaW5nIHdpdGggPGI+QUdYLjwvYj57XCIgXCJ9XHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8UD5XYW50IHRvIGdldCBzdGFydGVkPyBJdOKAmXMgYXMgZWFzeSBhcyAxLTItMy48L1A+XHJcblxyXG4gICAgICAgIDxFYXJuaW5nTGlzdD5cclxuICAgICAgICAgIDxsaT5PcGVuIGEgTE9ERVBheSBBY2NvdW50IGFuZCBsb2dpbiB0byB0aGUgbWVtYmVy4oCZcyBwb3J0YWw8L2xpPlxyXG4gICAgICAgICAgPGxpPkdvIHRvIHRoZSDigJxBZmZpbGlhdGXigJ0gdGFiIHRvIGdldCB5b3VyIOKAnFJlZmVycmFsIGxpbmvigJ0uPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgU2hhcmUgeW91ciB1bmlxdWUgbGluayB3aXRoIHlvdXIgbmV0d29yayB2aWEgZW1haWwgZGlyZWN0bHkgZnJvbSB0aGVcclxuICAgICAgICAgICAgbWVtYmVy4oCZcyBwb3J0YWwuIFlvdSBjYW4gYWxzbyBjb3B5IHlvdXIgbGluayBhbmQgc2hhcmUgaXQgYnkgU01TLFxyXG4gICAgICAgICAgICBXaGF0c0FwcCwgc29jaWFsLCBvciBhbnkgcGxhdGZvcm0gb2YgeW91ciBjaG9pY2Uue1wiIFwifVxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICA8L0Vhcm5pbmdMaXN0PlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkFjdGl2YXRlIE5vdzwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgPC9FYXJuaW5nQ29udGFpbmVyPlxyXG4gICAgICA8TWFuYWdlQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8TGVmdEltYWdlIHNyYz17bWFuYWdlTGVmdH0gLz5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgICBNYW5hZ2UgeW91ciA8Yj5lYXJuaW5nczwvYj4gbGlrZSBhIHByby5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgVHJhY2sgeW91ciByZWZlcnJhbHMgYW5kIGVhcm5pbmdzIG9uIHRoZSBnbyB3aXRoIHRoZSBMT0RFUGF5XHJcbiAgICAgICAgICAgICAgV2FsbGV0LlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIDxiPk9uZSB3YWxsZXQgdW5sb2NraW5nIGEgd29ybGQgb2YgaG9uZXN0IG1vbmV5LiA8L2I+XHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEFwcFN0b3JlfSAvPlxyXG4gICAgICAgICAgICAgIDxEb3dubG9hZEJ1dHRvbiBzcmM9e2Rvd25sb2FkR29vZ2xlUGxheX0gLz5cclxuICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8TGFyZ2VCb3R0b21JbWFnZSBzcmM9e21hbmFnZUJvdHRvbX0gLz5cclxuICAgICAgICB7Lyo8TGFyZ2VCZ0ltYWdlIHNyYz17bGFyZ2VDaXJjbGVCZ30gLz4qL31cclxuICAgICAgPC9NYW5hZ2VDb250YWluZXI+XHJcbiAgICA8L0FQQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyBDb25uZWN0IHRoZSBIZWFkZXIgY29tcG9uZW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGBzdGF0ZWAgaW4gaXQncyBgcHJvcHNgXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUGFnZUFQKTtcclxuXHJcbi8qIEdsb2JhbCAqL1xyXG5cclxuY29uc3QgRG93bmxvYWRCdXR0b24gPSBzdHlsZWQuaW1nYFxyXG4gIHdpZHRoOiAxODhweDtcclxuICBtYXJnaW4tcmlnaHQ6IDE1cHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICR7bXFbMl19IHtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHdpZHRoOiAxMzdweDtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBQID0gc3R5bGVkLnBgYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBIZXJvICovXHJcblxyXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA2MHB4O1xyXG4gIG1heC13aWR0aDogNzUwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAke21xWzFdfSB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgQiA9IHN0eWxlZC5iYFxyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuYDtcclxuXHJcblxyXG5cclxuY29uc3QgRGlzY2xhaW1lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcbmNvbnN0IEhlcm9MaXN0ID0gc3R5bGVkLnVsYFxyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgZm9udC1zaXplOiAyNXB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAmID4gbGkge1xyXG4gICAgbWFyZ2luLXRvcDogMTBweDtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBUcmFuc3BhcmVudEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCAjMzE0NDUyO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDMwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQVBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiAjMzE0NDUyO1xyXG4gIGZvbnQtZmFtaWx5OiBcIlJ1YmlrXCI7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7YXBIZXJvQmd9KTtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICR7bXFbM119IHtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0xMDBweCAwO1xyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjgwcHggMDtcclxuICAgIFxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogI2YyZjBmMztcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzNzVweDtcclxuICAgICR7bXFbMl19IHtcclxuICAgICAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgSGVyb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAzMDBweDtcclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICAke1RyYW5zcGFyZW50QnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6NyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OjclO1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIFJld2FyZGVkICovXHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiAyNDBweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuYDtcclxuXHJcbmNvbnN0IFJpZ2h0SW1hZ2UgPSBzdHlsZWQuaW1nYGA7XHJcblxyXG5jb25zdCBDYXJkID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nOiA0MHB4O1xyXG4gIGJhY2tncm91bmQ6ICMzNmFhZmY7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIG1heC13aWR0aDogNDAwcHg7XHJcbiAgd2lkdGg6IDQwMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAzMHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMzBweDtcclxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQ2FyZEhlYWRlciA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA0MHB4O1xyXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMDAzZDZhNDA7XHJcbiAgcGFkZGluZy1ib3R0b206IDMwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkRGVzYyA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBmb250LXNpemU6IDIzcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBvcGFjaXR5OiAwLjc7XHJcbmA7XHJcblxyXG5jb25zdCBSZXdhcmRlZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgcGFkZGluZy10b3A6IDEwMHB4O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBmb250LXNpemU6IDIycHg7XHJcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICB9XHJcbiAgJHtEaXNjbGFpbWVyfSB7XHJcbiAgfVxyXG4gICR7Um93fSB7XHJcbiAgICBtYXJnaW4tdG9wOiA3NXB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IC02NDBweDtcclxuICAgIHRvcDogLTI0MHB4O1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjc1KTtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1hcmdpbi10b3A6IDc1cHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MDBweDtcclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiAxMzIwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNTBweCAtNTBweDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAyMDBweDtcclxuICAgIHBhZGRpbmctdG9wOiAwO1xyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMDBweDtcclxuICAgIH1cclxuICAgICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAyMDBweDtcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB6LWluZGV4OiAtMztcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogNTBweDtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMHB4O1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgJHtDYXJkfSB7XHJcbiAgICAgIG1heC13aWR0aDogMzIwcHg7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAmID4gcCB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogNTBweDtcclxuICAgICAgcGFkZGluZy1yaWdodDogNTBweDtcclxuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gICAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEyNXB4O1xyXG4gICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgfVxyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDo3JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6NyU7XHJcbiAgICAke0NhcmR9IHtcclxuICAgICAgbWF4LXdpZHRoOiA3MHZ3O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIEVhcm5pbmcgQ29udGFpbmVyICovXHJcblxyXG5jb25zdCBMYXJnZUJnSW1hZ2UgPSBzdHlsZWQuaW1nYGA7XHJcblxyXG5jb25zdCBFYXJuaW5nTGlzdCA9IHN0eWxlZC5vbGBcclxuICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG5cclxuICAmID4gbGkge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzNHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEVhcm5pbmdDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogMCAzMzBweCAwIDA7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBzcGFjZS1iZXR3ZWVuO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBmb250LXNpemU6IDIycHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXHJcbiAgICAxODBkZWcsXHJcbiAgICByZ2IoMjQ5IDI0OSAyNDkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSAxMDAlXHJcbiAgKTtcclxuICB6LWluZGV4OiAtMTtcclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1heC13aWR0aDogMzUwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyNTBweDtcclxuICAgIHotaW5kZXg6IDQ7XHJcbiAgfVxyXG4gICR7VGl0bGV9IHtcclxuICAgIGZvbnQtc2l6ZTogNDhweDtcclxuICAgIG1heC13aWR0aDogMzUwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAyNzVweDtcclxuICB9XHJcbiAgJHtSaWdodEltYWdlfSB7XHJcbiAgICBtYXgtaGVpZ2h0OiA5NDhweDtcclxuICAgIG1heC13aWR0aDogMTAzNHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDEycHg7XHJcbiAgICB0b3A6IDQwcHg7XHJcbiAgfVxyXG4gICR7RWFybmluZ0xpc3R9IHtcclxuICAgIG1heC13aWR0aDogNTUwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgei1pbmRleDogLTE7XHJcbiAgICAgIG1heC13aWR0aDogODAwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDE1MHB4O1xyXG4gICAgfVxyXG4gICAgJHtQfSB7XHJcbiAgICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIH1cclxuICAgICR7RWFybmluZ0xpc3R9IHtcclxuICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgICAmID4gbGkge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDVweDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogNTBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHotaW5kZXg6IGluaXRpYWw7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KCAxODBkZWcscmdiKDI0OSAyNDkgMjQ5KSAwJSxyZ2IoMjU1IDI1NSAyNTUpIDEwMCUgKTtcclxuICAgICR7RWFybmluZ0xpc3R9IHtcclxuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgICBtYXJnaW4tdG9wOiAyMHB4O1xyXG4gICAgfVxyXG4gICAgJiBsaSB7XHJcbiAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIH1cclxuICAgICYgdWwge1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDA7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEyNXB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAke1B9IHtcclxuICAgICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgbWFyZ2luLXRvcDogMzBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDYwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogTWFuYWdlICovXHJcblxyXG5jb25zdCBMZWZ0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBMYXJnZUJvdHRvbUltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuY29uc3QgTWFuYWdlQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICBtYXJnaW4tYm90dG9tOiAyMDBweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAke0xhcmdlQm90dG9tSW1hZ2V9IHtcclxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHRvcDogLTk5cHg7XHJcbiAgfVxyXG5cclxuICAmID4gZGl2IHtcclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogLTEwMHB4O1xyXG4gICAgfVxyXG5cclxuICAgICYgPiBkaXYge1xyXG4gICAgICAke1RpdGxlfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgICAgICBmb250LXNpemU6IDQ1cHg7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICAgICAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgICAgfVxyXG4gICAgICAke1B9IHtcclxuICAgICAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgICAgIG1heC13aWR0aDogNDUwcHg7XHJcbiAgICAgICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgICAgICYgPiBiIHtcclxuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICR7TGFyZ2VCZ0ltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgei1pbmRleDogLTE7XHJcbiAgICAgIHdpZHRoOiAyMDczcHg7XHJcbiAgICAgIHRvcDogLTgwMHB4O1xyXG4gICAgICBsZWZ0OiAtODEwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTAwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDI1cHg7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDI1cHg7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgbGVmdDogLTEwMHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDcwdnc7XHJcbiAgICB9XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICAmID4gZGl2IHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgbGVmdDogLTE1MHB4O1xyXG4gICAgICAgICR7VGl0bGV9IHtcclxuICAgICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJHtMYXJnZUJvdHRvbUltYWdlfSB7XHJcbiAgICAgIG1heC13aWR0aDoxMDB2dztcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDBweDtcclxuICAgIG1hcmdpbi10b3A6IDBweDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xyXG4gICAgJHtMYXJnZUJvdHRvbUltYWdlfSB7XHJcbiAgICAgIGRpc3BsYXk6bm9uZTtcclxuICAgIH1cclxuICAgICR7Um93fSB7XHJcbiAgICAgICYgPiBkaXYge1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgJHtQfSB7XHJcbiAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICR7VGl0bGV9IHtcclxuICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHtSb3d9IHtcclxuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgIG1hcmdpbi10b3A6IDMwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICBvcmRlcjoxO1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgICBsZWZ0OjA7XHJcbiAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke0xhcmdlQmdJbWFnZX0ge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICB9XHJcbmA7XHJcbiJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var APContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m8\",label:\"APContainer\"})(\"color:#314452;font-family:\\\"Rubik\\\";display:flex;flex-direction:column;overflow:hidden;background-image:url(\",_img_ap_hero_bg_jpg__WEBPACK_IMPORTED_MODULE_7___default.a,\");background-repeat:no-repeat;\",mq[3],\"{background-position:-100px 0;}\",mq[2],\"{background-position:-280px 0;}\",mq[1],\"{background-image:none;background:#f2f0f3;}\",mq[0],\"{}\",Title,\"{margin-top:375px;\",mq[2],\"{margin-top:200px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var HeroContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m9\",label:\"HeroContainer\"})(\"padding-left:300px;padding-right:300px;\",mq[2],\"{padding-left:100px;padding-right:100px;\",TransparentButton,\"{margin-bottom:100px;}}\",mq[0],\"{padding-left:7%;padding-right:7%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* Rewarded */var PrimaryButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e126tp8m10\",label:\"PrimaryButton\"})( false?undefined:{name:\"nzc48v\",styles:\"color:#314452;background:white;border:none;border-radius:30px;padding:18px 44px;max-width:240px;font-weight:600;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:40px;cursor:pointer;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var RightImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e126tp8m11\",label:\"RightImage\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var Card=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m12\",label:\"Card\"})( false?undefined:{name:\"1xgtils\",styles:\"padding:40px;background:#36aaff;color:white;max-width:400px;width:400px;margin-left:30px;margin-right:30px;border-radius:20px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardHeader=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m13\",label:\"CardHeader\"})( false?undefined:{name:\"bcxbca\",styles:\"font-size:40px;border-bottom:1px solid #003d6a40;padding-bottom:30px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardDesc=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m14\",label:\"CardDesc\"})( false?undefined:{name:\"17y4z64\",styles:\"margin-top:30px;font-size:23px;line-height:30px;font-weight:300;opacity:0.7;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var RewardedContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m15\",label:\"RewardedContainer\"})(\"position:relative;padding-left:300px;padding-right:300px;padding-top:100px;text-align:center;display:flex;flex-direction:column;align-items:center;\",Title,\"{margin-top:250px;font-size:50px;max-width:100%;}\",P,\"{font-size:22px;max-width:500px;font-weight:300;margin-top:40px;line-height:30px;}\",Disclaimer,\"{}\",Row,\"{margin-top:75px;width:100%;justify-content:space-between;}\",RightImage,\"{position:absolute;right:-640px;top:-240px;transform:scale(0.75);z-index:-1;}\",PrimaryButton,\"{margin-top:75px;margin-bottom:400px;}\",mq[3],\"{padding-left:100px;padding-right:100px;background-size:1320px;background-position:-50px -50px;padding-bottom:200px;padding-top:0;\",Title,\"{margin-top:100px;}\",PrimaryButton,\"{margin-bottom:200px;}\",RightImage,\"{z-index:-3;}}\",mq[2],\"{padding-left:50px;padding-right:50px;background-image:none;text-align:center;max-width:100%;margin-right:0;padding-bottom:0px;background:white;\",Row,\"{align-items:center;}\",Card,\"{max-width:320px;margin-bottom:40px;}\",Title,\"{width:100%;max-width:100%;}& > p{padding-left:50px;padding-right:50px;max-width:100%;}\",PrimaryButton,\"{margin-bottom:125px;margin-top:0;}\",RightImage,\"{display:none;}}\",mq[0],\"{padding-left:7%;padding-right:7%;\",Card,\"{max-width:70vw;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* Earning Container */var LargeBgImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e126tp8m16\",label:\"LargeBgImage\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var EarningList=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ol\",{target:\"e126tp8m17\",label:\"EarningList\"})( false?undefined:{name:\"uji5dm\",styles:\"margin-bottom:40px;& > li{margin-top:20px;padding-left:20px;line-height:34px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var EarningContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m18\",label:\"EarningContainer\"})(\"padding-left:300px;border-radius:0 330px 0 0;display:flex;flex-direction:column;align-items:space-between;position:relative;font-size:22px;overflow:hidden;background:linear-gradient( 180deg,rgb(249 249 249) 0%,rgba(243,243,252,0) 100% );z-index:-1;\",PrimaryButton,\"{max-width:350px;margin-bottom:250px;z-index:4;}\",Title,\"{font-size:48px;max-width:350px;margin-top:275px;}\",RightImage,\"{max-height:948px;max-width:1034px;position:absolute;right:12px;top:40px;}\",EarningList,\"{max-width:550px;}\",mq[3],\"{padding-left:100px;\",RightImage,\"{z-index:-1;max-width:800px;}\",Title,\"{margin-top:150px;}\",P,\"{max-width:400px;font-size:20px;}\",EarningList,\"{max-width:400px;font-size:20px;margin-top:0;& > li{margin-top:5px;}}}\",mq[2],\"{flex-direction:column;padding-left:50px;padding-right:50px;text-align:center;z-index:initial;max-width:100%;align-items:center;background:linear-gradient( 180deg,rgb(249 249 249) 0%,rgb(255 255 255) 100% );\",EarningList,\"{max-width:600px;text-align:left;padding-left:50px;margin-top:20px;}& li{max-width:100%;}& ul{padding-left:0;}\",Title,\"{margin-top:125px;max-width:100%;}\",P,\"{max-width:100%;display:flex;flex-direction:column;justify-content:center;align-items:center;margin-top:30px;}}\",mq[0],\"{padding-left:7%;padding-right:7%;\",PrimaryButton,\"{margin-bottom:60px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* Manage */var LeftImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e126tp8m19\",label:\"LeftImage\"})( false?undefined:{name:\"nv5a7q\",styles:\"padding-left:100px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LargeBottomImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e126tp8m20\",label:\"LargeBottomImage\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var ManageContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e126tp8m21\",label:\"ManageContainer\"})(\"margin-top:200px;margin-bottom:200px;display:flex;flex-direction:column;position:relative;\",LargeBottomImage,\"{align-self:center;position:relative;top:-99px;}& > div{\",LeftImage,\"{align-self:flex-start;margin-right:-100px;}& > div{\",Title,\"{max-width:400px;font-size:45px;margin-bottom:40px;margin-top:200px;}\",P,\"{font-weight:300;max-width:450px;font-size:25px;& > b{display:block;margin-top:40px;}}}\",LargeBgImage,\"{position:absolute;z-index:-1;width:2073px;top:-800px;left:-810px;}}\",mq[3],\"{margin-top:100px;margin-bottom:100px;\",LeftImage,\"{align-self:flex-start;padding-left:25px;padding-right:25px;position:relative;left:-100px;max-width:70vw;}\",Row,\"{& > div{position:relative;left:-150px;\",Title,\"{margin-top:100px;}}}\",LargeBottomImage,\"{max-width:100vw;}}\",mq[2],\"{display:flex;flex-direction:column;padding-left:0px;margin-top:0px;text-align:center;background:white;align-items:center;margin-bottom:0;padding-left:50px;padding-right:50px;\",LargeBottomImage,\"{display:none;}\",Row,\"{& > div{left:0;\",P,\"{max-width:100%;}\",Title,\"{max-width:100%;}\",Row,\"{flex-direction:row;justify-content:center;margin-top:30px;}}\",LeftImage,\"{width:100%;padding:0;order:1;margin-right:0;left:0;align-self:center;}}\",LargeBgImage,\"{display:none;}}\",mq[0],\"{padding-left:7%;padding-right:7%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/page-ap.js\n");

/***/ })

})