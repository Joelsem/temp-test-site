webpackHotUpdate("lode-corp",{

/***/ "./packages/mars-theme/src/components/module-community-cards.js":
/*!**********************************************************************!*\
  !*** ./packages/mars-theme/src/components/module-community-cards.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./i18n */ \"./packages/mars-theme/src/components/i18n.js\");\n/* harmony import */ var _img_honest_money_img_png__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../img/honest-money-img.png */ \"./packages/mars-theme/src/img/honest-money-img.png\");\n/* harmony import */ var _img_honest_money_img_png__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_img_honest_money_img_png__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/* Images *//* Breakpoints */var breakpoints=[576,768,1320,1720];var mq=breakpoints.map(bp=>\"@media (max-width: \".concat(bp,\"px)\"));var CommunityCards=(_ref)=>{var{state}=_ref;var{t,i18n}=Object(react_i18next__WEBPACK_IMPORTED_MODULE_3__[\"useTranslation\"])();return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(Title,null,t(\"home.comu.header\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(P,null,t(\"home.comu.header1\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardRow,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityCard,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardPadding,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardTitle,null,t(\"home.comu.explore\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardHR,null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardDesc,null,t(\"home.comu.explore1\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.comu.explore2\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.comu.explore3\"))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityPrimaryButton,null,t(\"home.comu.explore4\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityCard,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardPadding,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardTitle,null,t(\"home.comu.dig\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardHR,null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardDesc,null,t(\"home.comu.dig1\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.comu.dig2\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.comu.dig3\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.comu.dig4\"))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityPrimaryButton,null,t(\"home.comu.dig5\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityCard,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardPadding,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardTitle,null,t(\"home.comu.stake\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardHR,null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CardDesc,null,t(\"home.comu.stake1\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.comu.stake2\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.comu.stake3\"))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityPrimaryButton,null,t(\"home.comu.stake4\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(TwoColContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(CommunityLeftImage,{src:_img_honest_money_img_png__WEBPACK_IMPORTED_MODULE_5___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(HonestContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(WidthMax,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(SectionTitle,null,t(\"home.honest.header\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(P,null,t(\"home.honest.sub\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(ListMargin,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.honest.1\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.honest.2\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(\"li\",null,t(\"home.honest.3\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_6__[\"jsx\"])(HonestBtn,null,t(\"home.honest.4\")))))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(CommunityCards));var CommunityCard=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc0\",label:\"CommunityCard\"})( false?undefined:{name:\"1e38va5\",styles:\"max-width:370px;margin:55px;padding-bottom:40px;display:flex;flex-direction:column;justify-content:space-between;border:1px solid #dedede;border-radius:15px;background:white;box-shadow:0px 15px 20px #dadada;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardPadding=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc1\",label:\"CardPadding\"})( false?undefined:{name:\"1137ab6\",styles:\"padding:50px 25px 0px 40px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardTitle=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc2\",label:\"CardTitle\"})( false?undefined:{name:\"ud6u5u\",styles:\"font-family:'Rubik';font-size:30px;font-weight:300;color:#36AAFF;margin-top:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardDesc=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc3\",label:\"CardDesc\"})( false?undefined:{name:\"5fh9mg\",styles:\"margin-top:20px;font-size:18px;color:#777777;max-width:380px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardHR=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc4\",label:\"CardHR\"})( false?undefined:{name:\"4i17gz\",styles:\"width:100%;border-top:1px solid #00000014;margin-top:14px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var HonestBtn=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc5\",label:\"HonestBtn\"})( false?undefined:{name:\"fyg45d\",styles:\"color:#36AAFF;background:white;border:none;border-radius:30px;padding:10px;max-width:230px;font-weight:500;font-size:16px;box-shadow:0px 13px 20px #48484860;margin-top:45px;cursor:pointer;text-align:center;font-family:'Rubik';\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CommunityPrimaryButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e1llafwc6\",label:\"CommunityPrimaryButton\"})( false?undefined:{name:\"1pvuryd\",styles:\"background:#36AAFF;color:white;border:none;border-radius:30px;padding:18px 44px;max-width:240px;font-weight:500;font-size:16px;box-shadow:0px 20px 20px #48484860;cursor:pointer;align-self:center;margin-top:20px;margin-bottom:20px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardRow=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc7\",label:\"CardRow\"})(\"display:flex;margin:auto;align-items:flex-start;\",mq[2],\"{flex-direction:column;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var CommunityContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc8\",label:\"CommunityContainer\"})(mq[3],\"{border-radius:0px;}border-radius:0 330px 0 0;display:flex;flex-direction:column;align-items:space-between;position:relative;overflow:hidden;background:rgb(224,224,224);background:linear-gradient(180deg,rgba(224,224,224,0.9) 0%,rgba(243,243,252,0) 80%)\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var HonestContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc9\",label:\"HonestContainer\"})(\"display:flex;flex-direction:column;align-items:space-between;position:relative;overflow:hidden;padding-left:50px;justify-content:center;\",mq[2],\"{padding-left:100px;padding-bottom:30px;}\",mq[1],\"{padding-left:50px;padding-right:50px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var CommunityLeftImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e1llafwc10\",label:\"CommunityLeftImage\"})(\"position:relative;margin-left:180px;\",mq[3],\"{margin-left:50px;}\",mq[2],\"{display:none;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var P=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e1llafwc11\",label:\"P\"})( false?undefined:{name:\"ujizdj\",styles:\"max-width:540px;font-size:20px;line-height:35px;color:#314452;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TwoColContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc12\",label:\"TwoColContainer\"})( false?undefined:{name:\"u0w7o4\",styles:\"display:flex;margin-top:100px;overflow:hidden;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc13\",label:\"Title\"})( false?undefined:{name:\"177tw9w\",styles:\"font-family:'Rubik';font-size:50px;max-width:500px;line-height:60px;font-weight:300;margin-bottom:25px;color:#314452;margin-left:auto;margin-right:auto;text-align:center;margin-top:200px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var WidthMax=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc14\",label:\"WidthMax\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var SectionTitle=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1llafwc15\",label:\"SectionTitle\"})(\"font-size:50px;max-width:500px;line-height:60px;margin-bottom:25px;color:#314452;\",mq[1],\"{font-size:40px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var ListMargin=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ol\",{target:\"e1llafwc16\",label:\"ListMargin\"})( false?undefined:{name:\"kqijoj\",styles:\"margin-top:5px;font-family:'Rubik';font-weight:300;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/module-community-cards.js\n");

/***/ })

})