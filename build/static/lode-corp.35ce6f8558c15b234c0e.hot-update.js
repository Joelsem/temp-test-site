webpackHotUpdate("lode-corp",{

/***/ "./packages/mars-theme/src/components/page-agx.js":
/*!********************************************************!*\
  !*** ./packages/mars-theme/src/components/page-agx.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./i18n */ \"./packages/mars-theme/src/components/i18n.js\");\n/* harmony import */ var _img_heroBG_jpg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../img/heroBG.jpg */ \"./packages/mars-theme/src/img/heroBG.jpg\");\n/* harmony import */ var _img_heroBG_jpg__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_img_heroBG_jpg__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _img_blockchain_bg_jpg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../img/blockchain-bg.jpg */ \"./packages/mars-theme/src/img/blockchain-bg.jpg\");\n/* harmony import */ var _img_blockchain_bg_jpg__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_img_blockchain_bg_jpg__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _img_agx_coin_left_image_png__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../img/agx-coin-left-image.png */ \"./packages/mars-theme/src/img/agx-coin-left-image.png\");\n/* harmony import */ var _img_agx_coin_left_image_png__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_img_agx_coin_left_image_png__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _img_aux_coin_right_image_jpg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../img/aux-coin-right-image.jpg */ \"./packages/mars-theme/src/img/aux-coin-right-image.jpg\");\n/* harmony import */ var _img_aux_coin_right_image_jpg__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_img_aux_coin_right_image_jpg__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _img_honestRightImage_jpg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../img/honestRightImage.jpg */ \"./packages/mars-theme/src/img/honestRightImage.jpg\");\n/* harmony import */ var _img_honestRightImage_jpg__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_img_honestRightImage_jpg__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _img_worldLeftImage_png__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../img/worldLeftImage.png */ \"./packages/mars-theme/src/img/worldLeftImage.png\");\n/* harmony import */ var _img_worldLeftImage_png__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_img_worldLeftImage_png__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _img_globalRightImage_jpg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../img/globalRightImage.jpg */ \"./packages/mars-theme/src/img/globalRightImage.jpg\");\n/* harmony import */ var _img_globalRightImage_jpg__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_img_globalRightImage_jpg__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _img_download_app_store_png__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../img/download-app-store.png */ \"./packages/mars-theme/src/img/download-app-store.png\");\n/* harmony import */ var _img_download_app_store_png__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_img_download_app_store_png__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _img_download_google_play_png__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../img/download-google-play.png */ \"./packages/mars-theme/src/img/download-google-play.png\");\n/* harmony import */ var _img_download_google_play_png__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_img_download_google_play_png__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _img_affiliate_bg_image_jpg__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../img/affiliate-bg-image.jpg */ \"./packages/mars-theme/src/img/affiliate-bg-image.jpg\");\n/* harmony import */ var _img_affiliate_bg_image_jpg__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_img_affiliate_bg_image_jpg__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/* Images *//* Breakpoints */var breakpoints=[576,768,1320,1720];var mq=breakpoints.map(bp=>\"@media (max-width: \".concat(bp,\"px)\"));var PageAGX=(_ref)=>{var{state}=_ref;var{t,i18n}=Object(react_i18next__WEBPACK_IMPORTED_MODULE_3__[\"useTranslation\"])();return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(AGXAUXContiner,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(HeroContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"AGX & AUX\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"Money Made Honest.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"p\",null,\"Backed by pure Silver & Gold. \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"Powered by blockchain.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(B,null,\"Take control of your finances with smart, secure, and stable money.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(PrimaryButton,null,\"Join Today\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlockchainContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"A \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Blockchain-Powered\"),\" Monetary System.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Disclaimer,null,\"Reintroducing a safe-haven gold & silver as money again.\",\" \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"For everyone.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlockchainTile,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Stable\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"Inflation-resistant AGX & AUX Coins are backed by a reserve of securely vaulted gold and silver bullion.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlockchainTile,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Instant\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"Within seconds, send & receive money globally at lower fees than traditional banks.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlockchainTile,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Secure\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"The LODEPay System is built on secure blockchain protocols meant to preserve your wealth.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(B,null,\"Digital Assets Restoring Real Value to \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Your Wealth.\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(AGXContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(LeftImage,{src:_img_agx_coin_left_image_png__WEBPACK_IMPORTED_MODULE_7___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"The \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"AGX\"),\" Coin.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,\"Each AGX Coin represents a one (1) gram weight of vaulted, audited, insured, and verifiable silver bullion.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlueButton,null,\"Get AGX Now\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(AUXContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(TextContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"The \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"AUX\"),\" Coin.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,\"Each AUX Coin represents a one (1) milligram weight of vaulted, audited, insured, and verifiable gold bullion.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlueButton,null,\"Get AUX Now\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(RightImage,{src:_img_aux_coin_right_image_jpg__WEBPACK_IMPORTED_MODULE_8___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(LODEPayContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"Switch to \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"LODEPay\"),\" in 4 Simple Steps.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardNumber,null,\"1\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardHeader,null,\"Download the LODEPay Wallet\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardDesc,null,\"Available for free on desktop, iOS, & Android. No personal information or registration required.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(PrimaryButton,null,\"Learn More\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardNumber,null,\"2\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardHeader,null,\"Set up Your LODE Account\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardDesc,null,\"Get your account verified in minutes to start using honest money.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardNumber,null,\"3\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardHeader,null,\"Get Honest Money\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardDesc,null,\"Buy your AGX & AUX with any debit or credit card. Then send, spend & store them on the LODEPay Wallet.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardNumber,null,\"4\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardHeader,null,\"Spread Honesty and get paid! \"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CardDesc,null,\"Share your affiliate link & start earning a passive income for every person you introduce to LODEPay.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(PrimaryButton,null,\"Learn More\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlueButton,null,\"Switch Today!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(HonestContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(TextContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"The Future of\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\" Commerce is \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Honest.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,\"LODEPay helps businesses grow with Honest Money.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BoldList,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"li\",null,\"Low cost, secure transactions\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"li\",null,\"Instant settlements\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"li\",null,\"A global marketplace of eager honest-money shoppers!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Don't break even, Break free.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlueButton,null,\"LODEPay Business\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(RightImage,{src:_img_honestRightImage_jpg__WEBPACK_IMPORTED_MODULE_9___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(WorldContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(LeftImage,{src:_img_worldLeftImage_png__WEBPACK_IMPORTED_MODULE_10___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"One Wallet Bridging \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"a \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"World\"),\" of Opportunities.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,\"Each AGX Coin represents a one (1) gram weight of vaulted, audited, insured, and verifiable silver bullion.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Simple.\"),\" Send & spend straight from your phone as fast as sending an SMS. \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Secure.\"),\" Safe, low-cost transactions protected on blockchain. \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Stable.\"),\" Real assets, real value, real money.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Grey,null,\"Get Your LODEPay Wallet Today!\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(DownloadButton,{src:_img_download_app_store_png__WEBPACK_IMPORTED_MODULE_12___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(DownloadButton,{src:_img_download_google_play_png__WEBPACK_IMPORTED_MODULE_13___default.a}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(GlobalContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(TextContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"Honest Money for a \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Global Community.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Welcome to the LODEPay Community.\"),\" \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"A group of like-minded individuals driven by the belief \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"that everyone deserves to experience\",\" \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"financial \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"freedom & stable wealth.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlueButton,null,\"Join Today!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(RightImage,{src:_img_globalRightImage_jpg__WEBPACK_IMPORTED_MODULE_11___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(AffiliateContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Title,null,\"Expand the Chain, \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),\"Become an Affiliate Today.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(P,null,\"Become a LODEPay Affiliate and empower your network with honest money. \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"b\",null,\"Earn a passive income. Honestly. \")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(TransparentButton,null,\"Learn More\"))));};// Connect the Header component to get access to the `state` in it's `props`\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(PageAGX));/* Global */var PrimaryButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"ed1j7qj0\",label:\"PrimaryButton\"})( false?undefined:{name:\"nzc48v\",styles:\"color:#314452;background:white;border:none;border-radius:30px;padding:18px 44px;max-width:240px;font-weight:600;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:40px;cursor:pointer;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DownloadButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"ed1j7qj1\",label:\"DownloadButton\"})(\"width:188px;margin-right:15px;cursor:pointer;\",mq[2],\"{margin-bottom:10px;}\",mq[0],\"{width:137px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var P=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"ed1j7qj2\",label:\"P\"})( false?undefined:{name:\"1dduaig\",styles:\"font-size:20px;line-height:30px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Row=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj3\",label:\"Row\"})(\"display:flex;\",mq[2],\"{flex-direction:column;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var RightImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"ed1j7qj4\",label:\"RightImage\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");/* Hero */var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj5\",label:\"Title\"})(\"font-size:50px;max-width:750px;margin-top:200px;font-weight:300;text-align:left;\",mq[3],\"{font-size:50px;}\",mq[2],\"{font-size:40px;}\",mq[1],\"{font-size:40px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var B=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"b\",{target:\"ed1j7qj6\",label:\"B\"})( false?undefined:{name:\"fhbvt5\",styles:\"display:block;font-size:25px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TransparentButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"ed1j7qj7\",label:\"TransparentButton\"})( false?undefined:{name:\"15hozzu\",styles:\"color:#314452;background:none;border:none;border-radius:30px;padding:18px 44px;max-width:400px;border:2px solid #314452;font-weight:600;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:40px;cursor:pointer;margin-bottom:300px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BlueButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"ed1j7qj8\",label:\"BlueButton\"})( false?undefined:{name:\"1v92tn4\",styles:\"background:#36aaff;color:white;border:none;border-radius:30px;padding:18px 44px;max-width:240px;font-weight:600;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:40px;cursor:pointer;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVUZ0MiLCJmaWxlIjoiQzpcXFVzZXJzXFxKb2Vsc1xcRG9jdW1lbnRzXFxBdG9taWM0N1xcTE9ERVxcTE9ERSBIb21lcGFnZVxcZnJvbnRpdHlcXGxvZGUtY29ycFxccGFja2FnZXNcXG1hcnMtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xccGFnZS1hZ3guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xyXG5pbXBvcnQgXCIuL2kxOG5cIjtcclxuXHJcbi8qIEltYWdlcyAqL1xyXG5pbXBvcnQgYWd4SGVyb0JnIGZyb20gXCIuLi9pbWcvaGVyb0JHLmpwZ1wiO1xyXG5pbXBvcnQgYmxvY2tjaGFpbkJHIGZyb20gXCIuLi9pbWcvYmxvY2tjaGFpbi1iZy5qcGdcIjtcclxuaW1wb3J0IGFneExlZnRJbWFnZSBmcm9tIFwiLi4vaW1nL2FneC1jb2luLWxlZnQtaW1hZ2UucG5nXCI7XHJcbmltcG9ydCBhdXhSaWdodEltYWdlIGZyb20gXCIuLi9pbWcvYXV4LWNvaW4tcmlnaHQtaW1hZ2UuanBnXCI7XHJcbmltcG9ydCBob25lc3RSaWdodEltYWdlIGZyb20gXCIuLi9pbWcvaG9uZXN0UmlnaHRJbWFnZS5qcGdcIjtcclxuaW1wb3J0IHdvcmxkTGVmdEltYWdlIGZyb20gXCIuLi9pbWcvd29ybGRMZWZ0SW1hZ2UucG5nXCI7XHJcbmltcG9ydCBnbG9iYWxSaWdodEltYWdlIGZyb20gXCIuLi9pbWcvZ2xvYmFsUmlnaHRJbWFnZS5qcGdcIjtcclxuaW1wb3J0IGRvd25sb2FkQXBwU3RvcmUgZnJvbSBcIi4uL2ltZy9kb3dubG9hZC1hcHAtc3RvcmUucG5nXCI7XHJcbmltcG9ydCBkb3dubG9hZEdvb2dsZVBsYXkgZnJvbSBcIi4uL2ltZy9kb3dubG9hZC1nb29nbGUtcGxheS5wbmdcIjtcclxuaW1wb3J0IGFmZmlsaWF0ZUJnIGZyb20gXCIuLi9pbWcvYWZmaWxpYXRlLWJnLWltYWdlLmpwZ1wiO1xyXG5cclxuLyogQnJlYWtwb2ludHMgKi9cclxuY29uc3QgYnJlYWtwb2ludHMgPSBbNTc2LCA3NjgsIDEzMjAsIDE3MjBdO1xyXG5jb25zdCBtcSA9IGJyZWFrcG9pbnRzLm1hcCgoYnApID0+IGBAbWVkaWEgKG1heC13aWR0aDogJHticH1weClgKTtcclxuXHJcbmNvbnN0IFBhZ2VBR1ggPSAoeyBzdGF0ZSB9KSA9PiB7XHJcbiAgY29uc3QgeyB0LCBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpO1xyXG4gIHJldHVybiAoXHJcbiAgICA8QUdYQVVYQ29udGluZXI+XHJcbiAgICAgIDxIZXJvQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIDxiPkFHWCAmIEFVWDwvYj5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgTW9uZXkgTWFkZSBIb25lc3QuXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8cD5cclxuICAgICAgICAgIEJhY2tlZCBieSBwdXJlIFNpbHZlciAmIEdvbGQuIDxiciAvPlxyXG4gICAgICAgICAgUG93ZXJlZCBieSBibG9ja2NoYWluLlxyXG4gICAgICAgIDwvcD5cclxuICAgICAgICA8Qj5cclxuICAgICAgICAgIFRha2UgY29udHJvbCBvZiB5b3VyIGZpbmFuY2VzIHdpdGggc21hcnQsIHNlY3VyZSwgYW5kIHN0YWJsZSBtb25leS5cclxuICAgICAgICA8L0I+XHJcbiAgICAgICAgPFByaW1hcnlCdXR0b24+Sm9pbiBUb2RheTwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgPC9IZXJvQ29udGFpbmVyPlxyXG4gICAgICA8QmxvY2tjaGFpbkNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICBBIDxiPkJsb2NrY2hhaW4tUG93ZXJlZDwvYj4gTW9uZXRhcnkgU3lzdGVtLlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPERpc2NsYWltZXI+XHJcbiAgICAgICAgICBSZWludHJvZHVjaW5nIGEgc2FmZS1oYXZlbiBnb2xkICYgc2lsdmVyIGFzIG1vbmV5IGFnYWluLntcIiBcIn1cclxuICAgICAgICAgIDxiPkZvciBldmVyeW9uZS48L2I+XHJcbiAgICAgICAgPC9EaXNjbGFpbWVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8QmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICAgICAgPGI+U3RhYmxlPC9iPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIEluZmxhdGlvbi1yZXNpc3RhbnQgQUdYICYgQVVYIENvaW5zIGFyZSBiYWNrZWQgYnkgYSByZXNlcnZlIG9mXHJcbiAgICAgICAgICAgICAgc2VjdXJlbHkgdmF1bHRlZCBnb2xkIGFuZCBzaWx2ZXIgYnVsbGlvbi5cclxuICAgICAgICAgICAgPC9CbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPkluc3RhbnQ8L2I+XHJcbiAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgV2l0aGluIHNlY29uZHMsIHNlbmQgJiByZWNlaXZlIG1vbmV5IGdsb2JhbGx5IGF0IGxvd2VyIGZlZXMgdGhhblxyXG4gICAgICAgICAgICAgIHRyYWRpdGlvbmFsIGJhbmtzLlxyXG4gICAgICAgICAgICA8L0Jsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICA8QmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICAgICAgPGI+U2VjdXJlPC9iPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIFRoZSBMT0RFUGF5IFN5c3RlbSBpcyBidWlsdCBvbiBzZWN1cmUgYmxvY2tjaGFpbiBwcm90b2NvbHMgbWVhbnRcclxuICAgICAgICAgICAgICB0byBwcmVzZXJ2ZSB5b3VyIHdlYWx0aC5cclxuICAgICAgICAgICAgPC9CbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPEI+XHJcbiAgICAgICAgICAgIERpZ2l0YWwgQXNzZXRzIFJlc3RvcmluZyBSZWFsIFZhbHVlIHRvIDxiPllvdXIgV2VhbHRoLjwvYj5cclxuICAgICAgICAgIDwvQj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgPC9CbG9ja2NoYWluQ29udGFpbmVyPlxyXG4gICAgICA8QUdYQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8TGVmdEltYWdlIHNyYz17YWd4TGVmdEltYWdlfSAvPlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgICAgIFRoZSA8Yj5BR1g8L2I+IENvaW4uXHJcbiAgICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICAgIEVhY2ggQUdYIENvaW4gcmVwcmVzZW50cyBhIG9uZSAoMSkgZ3JhbSB3ZWlnaHQgb2YgdmF1bHRlZCxcclxuICAgICAgICAgICAgICBhdWRpdGVkLCBpbnN1cmVkLCBhbmQgdmVyaWZpYWJsZSBzaWx2ZXIgYnVsbGlvbi5cclxuICAgICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgICA8Qmx1ZUJ1dHRvbj5HZXQgQUdYIE5vdzwvQmx1ZUJ1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICA8L0FHWENvbnRhaW5lcj5cclxuICAgICAgPEFVWENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPFRleHRDb250YWluZXI+XHJcbiAgICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgICBUaGUgPGI+QVVYPC9iPiBDb2luLlxyXG4gICAgICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgICBFYWNoIEFVWCBDb2luIHJlcHJlc2VudHMgYSBvbmUgKDEpIG1pbGxpZ3JhbSB3ZWlnaHQgb2YgdmF1bHRlZCxcclxuICAgICAgICAgICAgICBhdWRpdGVkLCBpbnN1cmVkLCBhbmQgdmVyaWZpYWJsZSBnb2xkIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPEJsdWVCdXR0b24+R2V0IEFVWCBOb3c8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgICA8L1RleHRDb250YWluZXI+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgPFJpZ2h0SW1hZ2Ugc3JjPXthdXhSaWdodEltYWdlfSAvPlxyXG4gICAgICA8L0FVWENvbnRhaW5lcj5cclxuICAgICAgPExPREVQYXlDb250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgU3dpdGNoIHRvIDxiPkxPREVQYXk8L2I+IGluIDQgU2ltcGxlIFN0ZXBzLlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZE51bWJlcj4xPC9DYXJkTnVtYmVyPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5Eb3dubG9hZCB0aGUgTE9ERVBheSBXYWxsZXQ8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBBdmFpbGFibGUgZm9yIGZyZWUgb24gZGVza3RvcCwgaU9TLCAmIEFuZHJvaWQuIE5vIHBlcnNvbmFsXHJcbiAgICAgICAgICAgICAgaW5mb3JtYXRpb24gb3IgcmVnaXN0cmF0aW9uIHJlcXVpcmVkLlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgICA8UHJpbWFyeUJ1dHRvbj5MZWFybiBNb3JlPC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjI8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPlNldCB1cCBZb3VyIExPREUgQWNjb3VudDwvQ2FyZEhlYWRlcj5cclxuICAgICAgICAgICAgPENhcmREZXNjPlxyXG4gICAgICAgICAgICAgIEdldCB5b3VyIGFjY291bnQgdmVyaWZpZWQgaW4gbWludXRlcyB0byBzdGFydCB1c2luZyBob25lc3QgbW9uZXkuXHJcbiAgICAgICAgICAgIDwvQ2FyZERlc2M+XHJcbiAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgICA8Q2FyZD5cclxuICAgICAgICAgICAgPENhcmROdW1iZXI+MzwvQ2FyZE51bWJlcj5cclxuICAgICAgICAgICAgPENhcmRIZWFkZXI+R2V0IEhvbmVzdCBNb25leTwvQ2FyZEhlYWRlcj5cclxuICAgICAgICAgICAgPENhcmREZXNjPlxyXG4gICAgICAgICAgICAgIEJ1eSB5b3VyIEFHWCAmIEFVWCB3aXRoIGFueSBkZWJpdCBvciBjcmVkaXQgY2FyZC4gVGhlbiBzZW5kLCBzcGVuZFxyXG4gICAgICAgICAgICAgICYgc3RvcmUgdGhlbSBvbiB0aGUgTE9ERVBheSBXYWxsZXQuXHJcbiAgICAgICAgICAgIDwvQ2FyZERlc2M+XHJcbiAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgICA8Q2FyZD5cclxuICAgICAgICAgICAgPENhcmROdW1iZXI+NDwvQ2FyZE51bWJlcj5cclxuICAgICAgICAgICAgPENhcmRIZWFkZXI+U3ByZWFkIEhvbmVzdHkgYW5kIGdldCBwYWlkISA8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBTaGFyZSB5b3VyIGFmZmlsaWF0ZSBsaW5rICYgc3RhcnQgZWFybmluZyBhIHBhc3NpdmUgaW5jb21lIGZvclxyXG4gICAgICAgICAgICAgIGV2ZXJ5IHBlcnNvbiB5b3UgaW50cm9kdWNlIHRvIExPREVQYXkuXHJcbiAgICAgICAgICAgIDwvQ2FyZERlc2M+XHJcbiAgICAgICAgICAgIDxQcmltYXJ5QnV0dG9uPkxlYXJuIE1vcmU8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgICA8L0NhcmQ+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgPEJsdWVCdXR0b24+U3dpdGNoIFRvZGF5ITwvQmx1ZUJ1dHRvbj5cclxuICAgICAgPC9MT0RFUGF5Q29udGFpbmVyPlxyXG4gICAgICA8SG9uZXN0Q29udGFpbmVyPlxyXG4gICAgICAgIDxUZXh0Q29udGFpbmVyPlxyXG4gICAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgICBUaGUgRnV0dXJlIG9mXHJcbiAgICAgICAgICAgIDxiciAvPiBDb21tZXJjZSBpcyA8Yj5Ib25lc3QuPC9iPlxyXG4gICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgIDxQPkxPREVQYXkgaGVscHMgYnVzaW5lc3NlcyBncm93IHdpdGggSG9uZXN0IE1vbmV5LjwvUD5cclxuICAgICAgICAgIDxCb2xkTGlzdD5cclxuICAgICAgICAgICAgPGxpPkxvdyBjb3N0LCBzZWN1cmUgdHJhbnNhY3Rpb25zPC9saT5cclxuICAgICAgICAgICAgPGxpPkluc3RhbnQgc2V0dGxlbWVudHM8L2xpPlxyXG4gICAgICAgICAgICA8bGk+QSBnbG9iYWwgbWFya2V0cGxhY2Ugb2YgZWFnZXIgaG9uZXN0LW1vbmV5IHNob3BwZXJzITwvbGk+XHJcbiAgICAgICAgICA8L0JvbGRMaXN0PlxyXG4gICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgIDxiPkRvbid0IGJyZWFrIGV2ZW4sIEJyZWFrIGZyZWUuPC9iPlxyXG4gICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgPEJsdWVCdXR0b24+TE9ERVBheSBCdXNpbmVzczwvQmx1ZUJ1dHRvbj5cclxuICAgICAgICA8L1RleHRDb250YWluZXI+XHJcbiAgICAgICAgPFJpZ2h0SW1hZ2Ugc3JjPXtob25lc3RSaWdodEltYWdlfSAvPlxyXG4gICAgICA8L0hvbmVzdENvbnRhaW5lcj5cclxuICAgICAgPFdvcmxkQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8TGVmdEltYWdlIHNyYz17d29ybGRMZWZ0SW1hZ2V9IC8+XHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgICAgT25lIFdhbGxldCBCcmlkZ2luZyA8YnIgLz5hIDxiPldvcmxkPC9iPiBvZiBPcHBvcnR1bml0aWVzLlxyXG4gICAgICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgICBFYWNoIEFHWCBDb2luIHJlcHJlc2VudHMgYSBvbmUgKDEpIGdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgPGI+U2ltcGxlLjwvYj4gU2VuZCAmIHNwZW5kIHN0cmFpZ2h0IGZyb20geW91ciBwaG9uZSBhcyBmYXN0IGFzXHJcbiAgICAgICAgICAgICAgc2VuZGluZyBhbiBTTVMuIDxiPlNlY3VyZS48L2I+IFNhZmUsIGxvdy1jb3N0IHRyYW5zYWN0aW9uc1xyXG4gICAgICAgICAgICAgIHByb3RlY3RlZCBvbiBibG9ja2NoYWluLiA8Yj5TdGFibGUuPC9iPiBSZWFsIGFzc2V0cywgcmVhbCB2YWx1ZSxcclxuICAgICAgICAgICAgICByZWFsIG1vbmV5LlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxHcmV5PkdldCBZb3VyIExPREVQYXkgV2FsbGV0IFRvZGF5ITwvR3JleT5cclxuICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEFwcFN0b3JlfSAvPlxyXG4gICAgICAgICAgICAgIDxEb3dubG9hZEJ1dHRvbiBzcmM9e2Rvd25sb2FkR29vZ2xlUGxheX0gLz5cclxuICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgPC9Xb3JsZENvbnRhaW5lcj5cclxuICAgICAgPEdsb2JhbENvbnRhaW5lcj5cclxuICAgICAgICA8VGV4dENvbnRhaW5lcj5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgSG9uZXN0IE1vbmV5IGZvciBhIDxiPkdsb2JhbCBDb21tdW5pdHkuPC9iPlxyXG4gICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICA8Yj5XZWxjb21lIHRvIHRoZSBMT0RFUGF5IENvbW11bml0eS48L2I+IDxiciAvPlxyXG4gICAgICAgICAgICBBIGdyb3VwIG9mIGxpa2UtbWluZGVkIGluZGl2aWR1YWxzIGRyaXZlbiBieSB0aGUgYmVsaWVmIDxiciAvPlxyXG4gICAgICAgICAgICB0aGF0IGV2ZXJ5b25lIGRlc2VydmVzIHRvIGV4cGVyaWVuY2V7XCIgXCJ9XHJcbiAgICAgICAgICAgIDxiPlxyXG4gICAgICAgICAgICAgIGZpbmFuY2lhbCA8YnIgLz5cclxuICAgICAgICAgICAgICBmcmVlZG9tICYgc3RhYmxlIHdlYWx0aC5cclxuICAgICAgICAgICAgPC9iPlxyXG4gICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgPEJsdWVCdXR0b24+Sm9pbiBUb2RheSE8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17Z2xvYmFsUmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9HbG9iYWxDb250YWluZXI+XHJcbiAgICAgIDxBZmZpbGlhdGVDb250YWluZXI+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgRXhwYW5kIHRoZSBDaGFpbiwgPGJyIC8+XHJcbiAgICAgICAgICAgIEJlY29tZSBhbiBBZmZpbGlhdGUgVG9kYXkuXHJcbiAgICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgIEJlY29tZSBhIExPREVQYXkgQWZmaWxpYXRlIGFuZCBlbXBvd2VyIHlvdXIgbmV0d29yayB3aXRoIGhvbmVzdFxyXG4gICAgICAgICAgICBtb25leS4gPGJyIC8+XHJcbiAgICAgICAgICAgIDxiPkVhcm4gYSBwYXNzaXZlIGluY29tZS4gSG9uZXN0bHkuIDwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxUcmFuc3BhcmVudEJ1dHRvbj5MZWFybiBNb3JlPC9UcmFuc3BhcmVudEJ1dHRvbj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgPC9BZmZpbGlhdGVDb250YWluZXI+XHJcbiAgICA8L0FHWEFVWENvbnRpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyBDb25uZWN0IHRoZSBIZWFkZXIgY29tcG9uZW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGBzdGF0ZWAgaW4gaXQncyBgcHJvcHNgXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUGFnZUFHWCk7XHJcblxyXG4vKiBHbG9iYWwgKi9cclxuXHJcbmNvbnN0IFByaW1hcnlCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxyXG4gIGNvbG9yOiAjMzE0NDUyO1xyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xyXG4gIHBhZGRpbmc6IDE4cHggNDRweDtcclxuICBtYXgtd2lkdGg6IDI0MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG5gO1xyXG5cclxuY29uc3QgRG93bmxvYWRCdXR0b24gPSBzdHlsZWQuaW1nYFxyXG4gIHdpZHRoOiAxODhweDtcclxuICBtYXJnaW4tcmlnaHQ6IDE1cHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICR7bXFbMl19IHtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHdpZHRoOiAxMzdweDtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBQID0gc3R5bGVkLnBgXHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgUm93ID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICAke21xWzJdfSB7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFJpZ2h0SW1hZ2UgPSBzdHlsZWQuaW1nYGA7XHJcblxyXG4vKiBIZXJvICovXHJcblxyXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA1MHB4O1xyXG4gIG1heC13aWR0aDogNzUwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICR7bXFbM119IHtcclxuICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgQiA9IHN0eWxlZC5iYFxyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuYDtcclxuXHJcbmNvbnN0IFRyYW5zcGFyZW50QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xyXG4gIHBhZGRpbmc6IDE4cHggNDRweDtcclxuICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkICMzMTQ0NTI7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgYm94LXNoYWRvdzogMHB4IDEzcHggMjBweCAjNDg0ODQ4NjA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzAwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBCbHVlQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBiYWNrZ3JvdW5kOiAjMzZhYWZmO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiAyNDBweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuYDtcclxuXHJcbmNvbnN0IEFHWEFVWENvbnRpbmVyID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBmb250LWZhbWlseTogXCJSdWJpa1wiO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuICAke21xWzBdfSB7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgSGVyb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAzMDBweDtcclxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHthZ3hIZXJvQmd9KTtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gIG1pbi1oZWlnaHQ6IDEyMjhweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzNzVweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAke21xWzJdfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDIwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjAwcHggMDtcclxuICAgIHBhZGRpbmctbGVmdDogMTUwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNTBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgZm9udC1zaXplOiA1MHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgbWluLWhlaWdodDogaW5pdGlhbDtcclxuICAgICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiA2NXB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6NzBweDtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZjJmMGYzO1xyXG4gIH1cclxuICAmID4gcCB7XHJcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICB9XHJcbiAgJHtCfSB7XHJcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gICAgbWF4LXdpZHRoOiA0MjVweDtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIEJsb2NrY2hhaW4gQ29udGFpbmVyICovXHJcblxyXG5jb25zdCBEaXNjbGFpbWVyID0gc3R5bGVkLmRpdmBgO1xyXG5cclxuXHJcblxyXG5jb25zdCBMZWZ0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBCbG9ja2NoYWluVGlsZSA9IHN0eWxlZC5kaXZgXHJcbiAgbWF4LXdpZHRoOiAzMjBweDtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIGZvbnQtc2l6ZTogMjVweDtcclxuICBwYWRkaW5nOiAzMHB4IDA7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAmID4gYiB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgfVxyXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNzA3MDcwO1xyXG5gO1xyXG5cclxuY29uc3QgQmxvY2tjaGFpbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZDogdXJsKCR7YmxvY2tjaGFpbkJHfSk7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNTUwcHggMjYwcHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgcGFkZGluZy10b3A6IDEwMHB4O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBtaW4taGVpZ2h0OiAxNzYwcHg7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLXRvcDogMTc1cHg7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gICR7UH0ge1xyXG4gICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgbWF4LXdpZHRoOiA1MDBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgfVxyXG4gICR7RGlzY2xhaW1lcn0ge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICB9XHJcbiAgJHtSb3d9IHtcclxuICAgIG1hcmdpbi10b3A6IDMwMHB4O1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICAmID4gJHtCfSB7XHJcbiAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgZm9udC1zaXplOiA0MHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDYwMHB4O1xyXG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgfVxyXG4gIH1cclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1hcmdpbi10b3A6IDc1cHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MDBweDtcclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiAxMzIwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNDEwcHggMjUwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMjAwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMDtcclxuICAgIG1pbi1oZWlnaHQ6IDEyMDBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgICB9XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxNTBweDtcclxuICAgICAgJHtCfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgcGFkZGluZy1ib3R0b206IDBweDtcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgIH1cclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgJiA+IHAge1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDUwcHg7XHJcbiAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gICAgJHtCfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgJHtSb3d9IGRpdiAke0Jsb2NrY2hhaW5UaWxlfSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3MHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogQUdYIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQUdYQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDExNTBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAzMDBweDtcclxuICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICBtYXJnaW4tYm90dG9tOiAyMDBweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDAgMzMwcHggMCAwO1xyXG4gIGJhY2tncm91bmQ6IHJnYigyMjQsIDIyNCwgMjI0KTtcclxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXHJcbiAgICAxODBkZWcsXHJcbiAgICByZ2JhKDIyNCwgMjI0LCAyMjQsIDAuOSkgMCUsXHJcbiAgICByZ2JhKDI0MywgMjQzLCAyNTIsIDApIDgwJVxyXG4gICk7XHJcbiAgJHtQfSB7XHJcbiAgICBmb250LXNpemU6IDI1cHg7XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDM1cHg7XHJcbiAgfVxyXG4gICR7TGVmdEltYWdlfSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC00MzBweDtcclxuICAgIGxlZnQ6IC00ODBweDtcclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgYm9yZGVyLXJhZGl1czogMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiA4MDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDE1MHB4O1xyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgfVxyXG4gICAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDYwJTtcclxuICAgICAgdG9wOiAtMjAwcHg7XHJcbiAgICAgIGxlZnQ6IC0yMDBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjMzMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbToxMjBweDtcclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHRvcDogLTE2MHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDUxMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6NzBweDtcclxuICAgIHBhZGRpbmctdG9wOiAyMjBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDowO1xyXG4gICAgfVxyXG4gICAgJHtMZWZ0SW1hZ2V9e1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgbGVmdDogLTE0JTtcclxuICAgICAgdG9wOiAtMzMlO1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXRvcDogMjAwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogOTAlO1xyXG4gICAgdG9wOiAtMjklO1xyXG4gICAgbGVmdDogLTE5JTtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBBVVggQ29udGFpbmVyICovXHJcblxyXG5jb25zdCBUZXh0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBgO1xyXG5cclxuY29uc3QgQVVYQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAke1RleHRDb250YWluZXJ9IHtcclxuICAgIG1heC13aWR0aDogNTEwcHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtMTAwcHg7XHJcbiAgICByaWdodDogLTMwMHB4O1xyXG4gICAgei1pbmRleDogLTE7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTUwcHg7XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDUwJTtcclxuICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICByaWdodDogLTEwMHB4O1xyXG4gICAgICB0b3A6IDBweDtcclxuICAgIH1cclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAke1RleHRDb250YWluZXJ9IHtcclxuICAgICAgbWF4LXdpZHRoOjUwJTtcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICByaWdodDogLTUwcHg7XHJcbiAgICB0b3A6IDYwcHg7XHJcbiAgICB3aWR0aDogNTUlO1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjpjb2x1bW47XHJcbiAgICBwYWRkaW5nLWxlZnQ6MDtcclxuICAgICR7Um93fSB7XHJcbiAgICAgIG9yZGVyOjE7XHJcbiAgICAgIHBhZGRpbmctbGVmdDoxMDBweDtcclxuICAgICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA4MCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIG9yZGVyOiAwO1xyXG4gICAgICB3aWR0aDogOTAlO1xyXG4gICAgICByaWdodDogMDtcclxuICAgICAgdG9wOiA2MHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgICAgd2lkdGg6MTAwJTtcclxuICAgICAgICBtYXgtd2lkdGg6MTAwJTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIExPREVQYXkgQ29udGFpbmVyICovXHJcblxyXG5jb25zdCBDYXJkTnVtYmVyID0gc3R5bGVkLmRpdmBcclxuICBmb250LXNpemU6IDUwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICBib3JkZXItcmFkaXVzOiA4MHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICBqdXN0aWZ5LXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgd2lkdGg6IDYwcHg7XHJcbiAgcGFkZGluZzogMTBweDtcclxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQ2FyZCA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcclxuICBwYWRkaW5nOiAzNXB4O1xyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGNvbG9yOiAjNWI1ZDdlO1xyXG4gIG1heC13aWR0aDogMjU2cHg7XHJcbiAgd2lkdGg6IDI1NnB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAzMHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMzBweDtcclxuICBib3JkZXItcmFkaXVzOiAyMHB4O1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBib3gtc2hhZG93OiAwcHggMjVweCAzMHB4ICM0ODQ4NDg0MDtcclxuYDtcclxuXHJcbmNvbnN0IENhcmRIZWFkZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGZvbnQtc2l6ZTogMjZweDtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzAwM2Q2YTQwO1xyXG4gIHBhZGRpbmctYm90dG9tOiAzMHB4O1xyXG4gIGNvbG9yOiBibGFjaztcclxuYDtcclxuXHJcbmNvbnN0IENhcmREZXNjID0gc3R5bGVkLmRpdmBcclxuICBtYXJnaW4tdG9wOiAzMHB4O1xyXG4gIGZvbnQtc2l6ZTogMjNweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gIG9wYWNpdHk6IDAuNztcclxuYDtcclxuXHJcbmNvbnN0IExPREVQYXlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBtYXJnaW4tdG9wOiAzMDBweDtcclxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXHJcbiAgICAzNjBkZWcsXHJcbiAgICByZ2JhKDIyNCwgMjI0LCAyMjQsIDAuOCkgMCUsXHJcbiAgICByZ2JhKDI0MywgMjQzLCAyNTIsIDApIDEwMCVcclxuICApO1xyXG4gIGJvcmRlci1yYWRpdXM6IDAgMCAwIDMzMHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1heC13aWR0aDogNjAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNTBweDtcclxuICB9XHJcbiAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMjVweDtcclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgbWFyZ2luLXRvcDogMTUwcHg7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgfVxyXG4gICAgJHtDYXJkfSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDUwcHg7XHJcbiAgICB9XHJcbiAgICAke0JsdWVCdXR0b259IHtcclxuICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNzBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDcwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMCAwIDAgMTMwcHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBIb25lc3QgQ29udGFpbmVyICovXHJcblxyXG5jb25zdCBCb2xkTGlzdCA9IHN0eWxlZC51bGBgO1xyXG5cclxuY29uc3QgSG9uZXN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMxNXB4O1xyXG4gIG1hcmdpbi10b3A6IDEzNXB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgJHtSaWdodEltYWdlfSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB6LWluZGV4OiAtMTtcclxuICAgIHJpZ2h0OiAtMTAwcHg7XHJcbiAgICB0b3A6IDA7XHJcbiAgfVxyXG4gICR7UH0ge1xyXG4gICAgJiA+IGIge1xyXG4gICAgICBjb2xvcjogI2E1YTVhNTtcclxuICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICBtYXgtd2lkdGg6IDUzMHB4O1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICB9XHJcbiAgJHtCb2xkTGlzdH0ge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgJiA+IGxpIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke0JsdWVCdXR0b259IHtcclxuICAgIG1heC13aWR0aDogMzAwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTUwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiA3NXB4O1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICAgIHJpZ2h0OiAtNTBweDtcclxuICAgICAgdG9wOiAxMjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgICYgPiAke1RleHRDb250YWluZXJ9IHtcclxuICAgICAgbWF4LXdpZHRoOiA1MHZ3O1xyXG4gICAgfVxyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2NSU7XHJcbiAgICAgIHJpZ2h0OiAtNzBweDtcclxuICAgICAgdG9wOiAyMjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBtYXJnaW4tdG9wOjA7XHJcbiAgICAke1RleHRDb250YWluZXJ9IHtcclxuICAgICAgb3JkZXI6MTtcclxuICAgICAgcGFkZGluZy1yaWdodDogNzBweDtcclxuICAgICAgbWF4LXdpZHRoOjEwMCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBvcmRlcjogMDtcclxuICAgICAgd2lkdGg6IDEwNSU7XHJcbiAgICAgIHJpZ2h0OiAzJTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHJpZ2h0OiAtNyU7XHJcbiAgICAgIHRvcDogMTAwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDExMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIFdvcmxkIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgR3JleSA9IHN0eWxlZC5wYFxyXG4gIGNvbG9yOiBncmV5O1xyXG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBXb3JsZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHBhZGRpbmctbGVmdDogMTEwMHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDIwMHB4O1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gIG1hcmdpbi10b3A6IDI1MHB4O1xyXG4gIG1pbi1oZWlnaHQ6IDg1MHB4O1xyXG5cclxuICAke0xlZnRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogLTc1MHB4O1xyXG4gICAgdG9wOiAtMjgwcHg7XHJcbiAgfVxyXG5cclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogNzAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNTBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgJiA+IGJyIHtcclxuICAgICAgICBkaXNwbGF5Om5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA3MCU7XHJcbiAgICBsZWZ0OiAtMjclO1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDQwJTtcclxuICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICAgIGxlZnQ6IC0zNyU7XHJcbiAgICAgIHRvcDogNjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiAxMjAlO1xyXG4gICAgbGVmdDogLTY2JTtcclxuICAgIHRvcDogMDtcclxuICAgIH1cclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMDtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBHbG9iYWwgQ29udGFpbmVyICovXHJcblxyXG5jb25zdCBHbG9iYWxDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgbWluLWhlaWdodDogMTAwMHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7UH0ge1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgfVxyXG4gICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgbWF4LXdpZHRoOiA1NTBweDtcclxuICB9XHJcbiAgJHtSaWdodEltYWdlfSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICByaWdodDogLTIyMHB4O1xyXG4gICAgei1pbmRleDogLTE7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDoxNTBweDtcclxuICAgIG1pbi1oZWlnaHQ6IDcwMHB4O1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICByaWdodDogLTEwMHB4O1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgdG9wOiBpbml0aWFsO1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6MTAwcHg7XHJcbiAgICAke1RleHRDb250YWluZXJ9IHtcclxuICAgICAgJiA+ICR7VGl0bGV9IHtcclxuICAgICAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgICB9XHJcbiAgICAgICYgPiAke1B9IHtcclxuICAgICAgICBtYXgtd2lkdGg6IDUwdnc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICB0b3A6IDIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogQWZmaWxpYXRlIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQWZmaWxpYXRlQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBiYWNrZ3JvdW5kOiB1cmwoJHthZmZpbGlhdGVCZ30pO1xyXG4gIG1pbi1oZWlnaHQ6IDExMDBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0xNzFweCAwO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcblxyXG4gICR7Um93fSB7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICAke1RyYW5zcGFyZW50QnV0dG9ufSB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgIG1pbi1oZWlnaHQ6IDkwMHB4O1xyXG4gICAgJiA+ICR7Um93fSB7XHJcbiAgICAgICYgPiAke1RpdGxlfSB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcbiJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var AGXAUXContiner=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj9\",label:\"AGXAUXContiner\"})(\"color:#314452;font-family:\\\"Rubik\\\";display:flex;flex-direction:column;overflow:hidden;font-size:25px;\",mq[0],\"{}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var HeroContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj10\",label:\"HeroContainer\"})(\"padding-left:300px;padding-right:300px;background-image:url(\",_img_heroBG_jpg__WEBPACK_IMPORTED_MODULE_5___default.a,\");background-repeat:no-repeat;min-height:1228px;\",Title,\"{margin-top:375px;text-align:left;\",mq[2],\"{margin-top:200px;}}\",mq[3],\"{background-position:-200px 0;padding-left:150px;padding-right:150px;\",Title,\"{font-size:50px;}}\",mq[2],\"{background-image:none;padding-left:100px;padding-right:100px;min-height:initial;\",PrimaryButton,\"{margin-bottom:65px;}}\",mq[1],\"{padding-left:70px;background-image:none;background:#f2f0f3;}& > p{margin-top:40px;font-size:25px;font-weight:300;}\",B,\"{margin-top:40px;max-width:425px;}\",mq[0],\"{padding-right:7%;padding-left:7%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* Blockchain Container */var Disclaimer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj11\",label:\"Disclaimer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var LeftImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"ed1j7qj12\",label:\"LeftImage\"})( false?undefined:{name:\"nv5a7q\",styles:\"padding-left:100px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BlockchainTile=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj13\",label:\"BlockchainTile\"})( false?undefined:{name:\"11izfh5\",styles:\"max-width:320px;text-align:left;font-size:25px;padding:30px 0;font-weight:300;& > b{display:block;font-weight:700;}border-bottom:1px solid #707070;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BlockchainContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj14\",label:\"BlockchainContainer\"})(\"background:url(\",_img_blockchain_bg_jpg__WEBPACK_IMPORTED_MODULE_6___default.a,\");background-repeat:no-repeat;background-position:-550px 260px;position:relative;padding-left:300px;padding-right:150px;padding-top:100px;text-align:center;display:flex;flex-direction:column;align-items:center;min-height:1760px;\",Title,\"{margin-top:175px;max-width:100%;}\",P,\"{font-size:22px;max-width:500px;font-weight:300;margin-top:40px;line-height:30px;}\",Disclaimer,\"{font-size:20px;margin-top:40px;}\",Row,\"{margin-top:300px;width:100%;justify-content:space-between;& > \",B,\"{align-self:center;font-size:40px;max-width:600px;text-align:left;font-weight:300;}}\",PrimaryButton,\"{margin-top:75px;margin-bottom:400px;}\",mq[3],\"{padding-left:100px;padding-right:100px;background-size:1320px;background-position:-410px 250px;padding-bottom:200px;padding-top:0;min-height:1200px;\",Title,\"{margin-top:100px;}\",Row,\"{margin-top:150px;\",B,\"{max-width:400px;}}}\",mq[2],\"{background-image:none;padding-left:100px;padding-right:100px;background-image:none;text-align:center;max-width:100%;margin-right:0;padding-bottom:0px;background:white;\",Row,\"{align-items:center;margin-top:80px;}\",Title,\"{width:100%;max-width:100%;text-align:center;}& > p{padding-left:50px;padding-right:50px;max-width:100%;}\",RightImage,\"{display:none;}\",B,\"{margin-top:80px;font-size:40px;text-align:center;}\",Row,\" div \",BlockchainTile,\"{font-size:20px;}}\",mq[1],\"{padding-left:70px;}\",mq[0],\"{padding-right:7%;padding-left:7%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* AGX Container */var AGXContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj15\",label:\"AGXContainer\"})(\"padding-left:1150px;padding-right:300px;margin-top:200px;margin-bottom:200px;display:flex;flex-direction:column;position:relative;border-radius:0 330px 0 0;background:rgb(224,224,224);background:linear-gradient( 180deg,rgba(224,224,224,0.9) 0%,rgba(243,243,252,0) 80% );\",P,\"{font-size:25px;font-weight:300;line-height:35px;}\",LeftImage,\"{position:absolute;top:-430px;left:-480px;}\",mq[3],\"{border-radius:0px;padding-left:800px;padding-right:150px;\",Title,\"{margin-top:80px;}\",LeftImage,\"{width:60%;top:-200px;left:-200px;}}\",mq[2],\"{padding-left:330px;margin-bottom:120px;\",LeftImage,\"{top:-160px;max-width:510px;}}\",mq[1],\"{padding-left:70px;padding-top:220px;\",Title,\"{margin-top:0;}\",LeftImage,\"{width:100%;left:-14%;top:-33%;}}\",mq[0],\"{padding-right:7%;padding-left:7%;padding-top:200px;\",LeftImage,\"{width:90%;top:-29%;left:-19%;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* AUX Container */var TextContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj16\",label:\"TextContainer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var AUXContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj17\",label:\"AUXContainer\"})(\"padding-left:300px;position:relative;\",TextContainer,\"{max-width:510px;}\",RightImage,\"{position:absolute;top:-100px;right:-300px;z-index:-1;}\",mq[3],\"{padding-left:150px;\",RightImage,\"{width:50%;height:auto;right:-100px;top:0px;}\",Title,\"{margin-top:100px;}}\",mq[2],\"{padding-left:100px;\",TextContainer,\"{max-width:50%;}\",RightImage,\"{right:-50px;top:60px;width:55%;}}\",mq[1],\"{display:flex;flex-direction:column;padding-left:0;\",Row,\"{order:1;padding-left:100px;\",TextContainer,\"{max-width:80%;}}\",RightImage,\"{position:relative;order:0;width:90%;right:0;top:60px;}}\",mq[0],\"{\",Row,\"{padding-left:7%;padding-right:7%;\",TextContainer,\"{width:100%;max-width:100%;}}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* LODEPay Container */var CardNumber=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj18\",label:\"CardNumber\"})( false?undefined:{name:\"dmj9i6\",styles:\"font-size:50px;font-weight:700;border-radius:80px;box-shadow:0px 13px 20px #48484860;align-self:center;justify-self:flex-start;width:60px;padding:10px;margin-bottom:30px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFwQjZCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IFwiLi9pMThuXCI7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IGFneEhlcm9CZyBmcm9tIFwiLi4vaW1nL2hlcm9CRy5qcGdcIjtcclxuaW1wb3J0IGJsb2NrY2hhaW5CRyBmcm9tIFwiLi4vaW1nL2Jsb2NrY2hhaW4tYmcuanBnXCI7XHJcbmltcG9ydCBhZ3hMZWZ0SW1hZ2UgZnJvbSBcIi4uL2ltZy9hZ3gtY29pbi1sZWZ0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgYXV4UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2F1eC1jb2luLXJpZ2h0LWltYWdlLmpwZ1wiO1xyXG5pbXBvcnQgaG9uZXN0UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2hvbmVzdFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCB3b3JsZExlZnRJbWFnZSBmcm9tIFwiLi4vaW1nL3dvcmxkTGVmdEltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgZ2xvYmFsUmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2dsb2JhbFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCBkb3dubG9hZEFwcFN0b3JlIGZyb20gXCIuLi9pbWcvZG93bmxvYWQtYXBwLXN0b3JlLnBuZ1wiO1xyXG5pbXBvcnQgZG93bmxvYWRHb29nbGVQbGF5IGZyb20gXCIuLi9pbWcvZG93bmxvYWQtZ29vZ2xlLXBsYXkucG5nXCI7XHJcbmltcG9ydCBhZmZpbGlhdGVCZyBmcm9tIFwiLi4vaW1nL2FmZmlsaWF0ZS1iZy1pbWFnZS5qcGdcIjtcclxuXHJcbi8qIEJyZWFrcG9pbnRzICovXHJcbmNvbnN0IGJyZWFrcG9pbnRzID0gWzU3NiwgNzY4LCAxMzIwLCAxNzIwXTtcclxuY29uc3QgbXEgPSBicmVha3BvaW50cy5tYXAoKGJwKSA9PiBgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnB9cHgpYCk7XHJcblxyXG5jb25zdCBQYWdlQUdYID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICByZXR1cm4gKFxyXG4gICAgPEFHWEFVWENvbnRpbmVyPlxyXG4gICAgICA8SGVyb0NvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICA8Yj5BR1ggJiBBVVg8L2I+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIE1vbmV5IE1hZGUgSG9uZXN0LlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPHA+XHJcbiAgICAgICAgICBCYWNrZWQgYnkgcHVyZSBTaWx2ZXIgJiBHb2xkLiA8YnIgLz5cclxuICAgICAgICAgIFBvd2VyZWQgYnkgYmxvY2tjaGFpbi5cclxuICAgICAgICA8L3A+XHJcbiAgICAgICAgPEI+XHJcbiAgICAgICAgICBUYWtlIGNvbnRyb2wgb2YgeW91ciBmaW5hbmNlcyB3aXRoIHNtYXJ0LCBzZWN1cmUsIGFuZCBzdGFibGUgbW9uZXkuXHJcbiAgICAgICAgPC9CPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkpvaW4gVG9kYXk8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgIDwvSGVyb0NvbnRhaW5lcj5cclxuICAgICAgPEJsb2NrY2hhaW5Db250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgQSA8Yj5CbG9ja2NoYWluLVBvd2VyZWQ8L2I+IE1vbmV0YXJ5IFN5c3RlbS5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxEaXNjbGFpbWVyPlxyXG4gICAgICAgICAgUmVpbnRyb2R1Y2luZyBhIHNhZmUtaGF2ZW4gZ29sZCAmIHNpbHZlciBhcyBtb25leSBhZ2Fpbi57XCIgXCJ9XHJcbiAgICAgICAgICA8Yj5Gb3IgZXZlcnlvbmUuPC9iPlxyXG4gICAgICAgIDwvRGlzY2xhaW1lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlN0YWJsZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBJbmZsYXRpb24tcmVzaXN0YW50IEFHWCAmIEFVWCBDb2lucyBhcmUgYmFja2VkIGJ5IGEgcmVzZXJ2ZSBvZlxyXG4gICAgICAgICAgICAgIHNlY3VyZWx5IHZhdWx0ZWQgZ29sZCBhbmQgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICAgIDxCbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgICA8Yj5JbnN0YW50PC9iPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIFdpdGhpbiBzZWNvbmRzLCBzZW5kICYgcmVjZWl2ZSBtb25leSBnbG9iYWxseSBhdCBsb3dlciBmZWVzIHRoYW5cclxuICAgICAgICAgICAgICB0cmFkaXRpb25hbCBiYW5rcy5cclxuICAgICAgICAgICAgPC9CbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlNlY3VyZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBUaGUgTE9ERVBheSBTeXN0ZW0gaXMgYnVpbHQgb24gc2VjdXJlIGJsb2NrY2hhaW4gcHJvdG9jb2xzIG1lYW50XHJcbiAgICAgICAgICAgICAgdG8gcHJlc2VydmUgeW91ciB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxCPlxyXG4gICAgICAgICAgICBEaWdpdGFsIEFzc2V0cyBSZXN0b3JpbmcgUmVhbCBWYWx1ZSB0byA8Yj5Zb3VyIFdlYWx0aC48L2I+XHJcbiAgICAgICAgICA8L0I+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQmxvY2tjaGFpbkNvbnRhaW5lcj5cclxuICAgICAgPEFHWENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e2FneExlZnRJbWFnZX0gLz5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgICBUaGUgPGI+QUdYPC9iPiBDb2luLlxyXG4gICAgICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgICBFYWNoIEFHWCBDb2luIHJlcHJlc2VudHMgYSBvbmUgKDEpIGdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPEJsdWVCdXR0b24+R2V0IEFHWCBOb3c8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgPC9BR1hDb250YWluZXI+XHJcbiAgICAgIDxBVVhDb250YWluZXI+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxUZXh0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgICAgVGhlIDxiPkFVWDwvYj4gQ29pbi5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBVVggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBtaWxsaWdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgZ29sZCBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxCbHVlQnV0dG9uPkdldCBBVVggTm93PC9CbHVlQnV0dG9uPlxyXG4gICAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17YXV4UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9BVVhDb250YWluZXI+XHJcbiAgICAgIDxMT0RFUGF5Q29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFN3aXRjaCB0byA8Yj5MT0RFUGF5PC9iPiBpbiA0IFNpbXBsZSBTdGVwcy5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8Q2FyZD5cclxuICAgICAgICAgICAgPENhcmROdW1iZXI+MTwvQ2FyZE51bWJlcj5cclxuICAgICAgICAgICAgPENhcmRIZWFkZXI+RG93bmxvYWQgdGhlIExPREVQYXkgV2FsbGV0PC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgQXZhaWxhYmxlIGZvciBmcmVlIG9uIGRlc2t0b3AsIGlPUywgJiBBbmRyb2lkLiBObyBwZXJzb25hbFxyXG4gICAgICAgICAgICAgIGluZm9ybWF0aW9uIG9yIHJlZ2lzdHJhdGlvbiByZXF1aXJlZC5cclxuICAgICAgICAgICAgPC9DYXJkRGVzYz5cclxuICAgICAgICAgICAgPFByaW1hcnlCdXR0b24+TGVhcm4gTW9yZTwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZE51bWJlcj4yPC9DYXJkTnVtYmVyPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5TZXQgdXAgWW91ciBMT0RFIEFjY291bnQ8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBHZXQgeW91ciBhY2NvdW50IHZlcmlmaWVkIGluIG1pbnV0ZXMgdG8gc3RhcnQgdXNpbmcgaG9uZXN0IG1vbmV5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjM8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPkdldCBIb25lc3QgTW9uZXk8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBCdXkgeW91ciBBR1ggJiBBVVggd2l0aCBhbnkgZGViaXQgb3IgY3JlZGl0IGNhcmQuIFRoZW4gc2VuZCwgc3BlbmRcclxuICAgICAgICAgICAgICAmIHN0b3JlIHRoZW0gb24gdGhlIExPREVQYXkgV2FsbGV0LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjQ8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPlNwcmVhZCBIb25lc3R5IGFuZCBnZXQgcGFpZCEgPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgU2hhcmUgeW91ciBhZmZpbGlhdGUgbGluayAmIHN0YXJ0IGVhcm5pbmcgYSBwYXNzaXZlIGluY29tZSBmb3JcclxuICAgICAgICAgICAgICBldmVyeSBwZXJzb24geW91IGludHJvZHVjZSB0byBMT0RFUGF5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgICA8UHJpbWFyeUJ1dHRvbj5MZWFybiBNb3JlPC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxCbHVlQnV0dG9uPlN3aXRjaCBUb2RheSE8L0JsdWVCdXR0b24+XHJcbiAgICAgIDwvTE9ERVBheUNvbnRhaW5lcj5cclxuICAgICAgPEhvbmVzdENvbnRhaW5lcj5cclxuICAgICAgICA8VGV4dENvbnRhaW5lcj5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgVGhlIEZ1dHVyZSBvZlxyXG4gICAgICAgICAgICA8YnIgLz4gQ29tbWVyY2UgaXMgPGI+SG9uZXN0LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5MT0RFUGF5IGhlbHBzIGJ1c2luZXNzZXMgZ3JvdyB3aXRoIEhvbmVzdCBNb25leS48L1A+XHJcbiAgICAgICAgICA8Qm9sZExpc3Q+XHJcbiAgICAgICAgICAgIDxsaT5Mb3cgY29zdCwgc2VjdXJlIHRyYW5zYWN0aW9uczwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5JbnN0YW50IHNldHRsZW1lbnRzPC9saT5cclxuICAgICAgICAgICAgPGxpPkEgZ2xvYmFsIG1hcmtldHBsYWNlIG9mIGVhZ2VyIGhvbmVzdC1tb25leSBzaG9wcGVycyE8L2xpPlxyXG4gICAgICAgICAgPC9Cb2xkTGlzdD5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICA8Yj5Eb24ndCBicmVhayBldmVuLCBCcmVhayBmcmVlLjwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkxPREVQYXkgQnVzaW5lc3M8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17aG9uZXN0UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9Ib25lc3RDb250YWluZXI+XHJcbiAgICAgIDxXb3JsZENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e3dvcmxkTGVmdEltYWdlfSAvPlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgICAgIE9uZSBXYWxsZXQgQnJpZGdpbmcgPGJyIC8+YSA8Yj5Xb3JsZDwvYj4gb2YgT3Bwb3J0dW5pdGllcy5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBR1ggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBncmFtIHdlaWdodCBvZiB2YXVsdGVkLFxyXG4gICAgICAgICAgICAgIGF1ZGl0ZWQsIGluc3VyZWQsIGFuZCB2ZXJpZmlhYmxlIHNpbHZlciBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICAgIDxiPlNpbXBsZS48L2I+IFNlbmQgJiBzcGVuZCBzdHJhaWdodCBmcm9tIHlvdXIgcGhvbmUgYXMgZmFzdCBhc1xyXG4gICAgICAgICAgICAgIHNlbmRpbmcgYW4gU01TLiA8Yj5TZWN1cmUuPC9iPiBTYWZlLCBsb3ctY29zdCB0cmFuc2FjdGlvbnNcclxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgb24gYmxvY2tjaGFpbi4gPGI+U3RhYmxlLjwvYj4gUmVhbCBhc3NldHMsIHJlYWwgdmFsdWUsXHJcbiAgICAgICAgICAgICAgcmVhbCBtb25leS5cclxuICAgICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgICA8R3JleT5HZXQgWW91ciBMT0RFUGF5IFdhbGxldCBUb2RheSE8L0dyZXk+XHJcbiAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgPERvd25sb2FkQnV0dG9uIHNyYz17ZG93bmxvYWRBcHBTdG9yZX0gLz5cclxuICAgICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEdvb2dsZVBsYXl9IC8+XHJcbiAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvV29ybGRDb250YWluZXI+XHJcbiAgICAgIDxHbG9iYWxDb250YWluZXI+XHJcbiAgICAgICAgPFRleHRDb250YWluZXI+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEhvbmVzdCBNb25leSBmb3IgYSA8Yj5HbG9iYWwgQ29tbXVuaXR5LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgPGI+V2VsY29tZSB0byB0aGUgTE9ERVBheSBDb21tdW5pdHkuPC9iPiA8YnIgLz5cclxuICAgICAgICAgICAgQSBncm91cCBvZiBsaWtlLW1pbmRlZCBpbmRpdmlkdWFscyBkcml2ZW4gYnkgdGhlIGJlbGllZiA8YnIgLz5cclxuICAgICAgICAgICAgdGhhdCBldmVyeW9uZSBkZXNlcnZlcyB0byBleHBlcmllbmNle1wiIFwifVxyXG4gICAgICAgICAgICA8Yj5cclxuICAgICAgICAgICAgICBmaW5hbmNpYWwgPGJyIC8+XHJcbiAgICAgICAgICAgICAgZnJlZWRvbSAmIHN0YWJsZSB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkpvaW4gVG9kYXkhPC9CbHVlQnV0dG9uPlxyXG4gICAgICAgIDwvVGV4dENvbnRhaW5lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2dsb2JhbFJpZ2h0SW1hZ2V9IC8+XHJcbiAgICAgIDwvR2xvYmFsQ29udGFpbmVyPlxyXG4gICAgICA8QWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEV4cGFuZCB0aGUgQ2hhaW4sIDxiciAvPlxyXG4gICAgICAgICAgICBCZWNvbWUgYW4gQWZmaWxpYXRlIFRvZGF5LlxyXG4gICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICBCZWNvbWUgYSBMT0RFUGF5IEFmZmlsaWF0ZSBhbmQgZW1wb3dlciB5b3VyIG5ldHdvcmsgd2l0aCBob25lc3RcclxuICAgICAgICAgICAgbW9uZXkuIDxiciAvPlxyXG4gICAgICAgICAgICA8Yj5FYXJuIGEgcGFzc2l2ZSBpbmNvbWUuIEhvbmVzdGx5LiA8L2I+XHJcbiAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICA8VHJhbnNwYXJlbnRCdXR0b24+TGVhcm4gTW9yZTwvVHJhbnNwYXJlbnRCdXR0b24+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgPC9BR1hBVVhDb250aW5lcj5cclxuICApO1xyXG59O1xyXG5cclxuLy8gQ29ubmVjdCB0aGUgSGVhZGVyIGNvbXBvbmVudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBgc3RhdGVgIGluIGl0J3MgYHByb3BzYFxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFBhZ2VBR1gpO1xyXG5cclxuLyogR2xvYmFsICovXHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiAyNDBweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkQnV0dG9uID0gc3R5bGVkLmltZ2BcclxuICB3aWR0aDogMTg4cHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICAke21xWzJdfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICB3aWR0aDogMTM3cHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBSaWdodEltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuLyogSGVybyAqL1xyXG5cclxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2YFxyXG4gIGZvbnQtc2l6ZTogNTBweDtcclxuICBtYXgtd2lkdGg6IDc1MHB4O1xyXG4gIG1hcmdpbi10b3A6IDIwMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAke21xWzNdfSB7XHJcbiAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEIgPSBzdHlsZWQuYmBcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDI1cHg7XHJcbmA7XHJcblxyXG5jb25zdCBUcmFuc3BhcmVudEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCAjMzE0NDUyO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDMwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmx1ZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgYmFja2dyb3VuZDogIzM2YWFmZjtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XHJcbiAgcGFkZGluZzogMThweCA0NHB4O1xyXG4gIG1heC13aWR0aDogMjQwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgYm94LXNoYWRvdzogMHB4IDEzcHggMjBweCAjNDg0ODQ4NjA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbmA7XHJcblxyXG5jb25zdCBBR1hBVVhDb250aW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgZm9udC1mYW1pbHk6IFwiUnViaWtcIjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEhlcm9Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7YWd4SGVyb0JnfSk7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICBtaW4taGVpZ2h0OiAxMjI4cHg7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLXRvcDogMzc1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgJHttcVsyXX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDA7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIG1pbi1oZWlnaHQ6IGluaXRpYWw7XHJcbiAgICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogNjVweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogI2YyZjBmMztcclxuICB9XHJcbiAgJiA+IHAge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgfVxyXG4gICR7Qn0ge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIG1heC13aWR0aDogNDI1cHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBCbG9ja2NoYWluIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgRGlzY2xhaW1lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcblxyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmxvY2tjaGFpblRpbGUgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogMzIwcHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgcGFkZGluZzogMzBweCAwO1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgJiA+IGIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gIH1cclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcwNzA3MDtcclxuYDtcclxuXHJcbmNvbnN0IEJsb2NrY2hhaW5Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQ6IHVybCgke2Jsb2NrY2hhaW5CR30pO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTU1MHB4IDI2MHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDE1MHB4O1xyXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogMTc2MHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1hcmdpbi10b3A6IDE3NXB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke0Rpc2NsYWltZXJ9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgfVxyXG4gICR7Um93fSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzMDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgJiA+ICR7Qn0ge1xyXG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICBtYXJnaW4tdG9wOiA3NXB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDAwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogMTMyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTQxMHB4IDI1MHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDIwMHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICBtaW4taGVpZ2h0OiAxMjAwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtSb3d9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTUwcHg7XHJcbiAgICAgICR7Qn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICR7Um93fSB7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICYgPiBwIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgICR7Qn0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Um93fSBkaXYgJHtCbG9ja2NoYWluVGlsZX0ge1xyXG4gICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNzBweDtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFHWCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFHWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAxMTUwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMjAwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBib3JkZXItcmFkaXVzOiAwIDMzMHB4IDAgMDtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LCAyMjQsIDIyNCk7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMTgwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSA4MCVcclxuICApO1xyXG4gICR7UH0ge1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzNXB4O1xyXG4gIH1cclxuICAke0xlZnRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtNDMwcHg7XHJcbiAgICBsZWZ0OiAtNDgwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcclxuICAgIHBhZGRpbmctbGVmdDogODAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNTBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICAgIHRvcDogLTIwMHB4O1xyXG4gICAgICBsZWZ0OiAtMjAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDozMzBweDtcclxuICAgIG1hcmdpbi1ib3R0b206MTIwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB0b3A6IC0xNjBweDtcclxuICAgICAgbWF4LXdpZHRoOiA1MTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMjIwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6MDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfXtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGxlZnQ6IC0xNCU7XHJcbiAgICAgIHRvcDogLTMzJTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy10b3A6IDIwMHB4O1xyXG4gICAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgIHRvcDogLTI5JTtcclxuICAgIGxlZnQ6IC0xOSU7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogQVVYIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgVGV4dENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcbmNvbnN0IEFVWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICBtYXgtd2lkdGg6IDUxMHB4O1xyXG4gIH1cclxuICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTEwMHB4O1xyXG4gICAgcmlnaHQ6IC0zMDBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgcmlnaHQ6IC0xMDBweDtcclxuICAgICAgdG9wOiAwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDo1MCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcmlnaHQ6IC01MHB4O1xyXG4gICAgdG9wOiA2MHB4O1xyXG4gICAgd2lkdGg6IDU1JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246Y29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OjA7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBvcmRlcjoxO1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6MTAwcHg7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogODAlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBvcmRlcjogMDtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgIHRvcDogNjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIHdpZHRoOjEwMCU7XHJcbiAgICAgICAgbWF4LXdpZHRoOjEwMCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBMT0RFUGF5IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQ2FyZE51bWJlciA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA1MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgYm9yZGVyLXJhZGl1czogODBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAganVzdGlmeS1zZWxmOiBmbGV4LXN0YXJ0O1xyXG4gIHdpZHRoOiA2MHB4O1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IENhcmQgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgcGFkZGluZzogMzVweDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBjb2xvcjogIzViNWQ3ZTtcclxuICBtYXgtd2lkdGg6IDI1NnB4O1xyXG4gIHdpZHRoOiAyNTZweDtcclxuICBtYXJnaW4tbGVmdDogMzBweDtcclxuICBtYXJnaW4tcmlnaHQ6IDMwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgYm94LXNoYWRvdzogMHB4IDI1cHggMzBweCAjNDg0ODQ4NDA7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkSGVhZGVyID0gc3R5bGVkLmRpdmBcclxuICBmb250LXNpemU6IDI2cHg7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMwMDNkNmE0MDtcclxuICBwYWRkaW5nLWJvdHRvbTogMzBweDtcclxuICBjb2xvcjogYmxhY2s7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkRGVzYyA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBmb250LXNpemU6IDIzcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBvcGFjaXR5OiAwLjc7XHJcbmA7XHJcblxyXG5jb25zdCBMT0RFUGF5Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgbWFyZ2luLXRvcDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMzYwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjgpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSAxMDAlXHJcbiAgKTtcclxuICBib3JkZXItcmFkaXVzOiAwIDAgMCAzMzBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXgtd2lkdGg6IDYwMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XHJcbiAgfVxyXG4gICR7Qmx1ZUJ1dHRvbn0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjI1cHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIG1hcmdpbi10b3A6IDE1MHB4O1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Q2FyZH0ge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gICAgfVxyXG4gICAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAgMCAwIDEzMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogSG9uZXN0IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQm9sZExpc3QgPSBzdHlsZWQudWxgYDtcclxuXHJcbmNvbnN0IEhvbmVzdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMTVweDtcclxuICBtYXJnaW4tdG9wOiAxMzVweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgei1pbmRleDogLTE7XHJcbiAgICByaWdodDogLTEwMHB4O1xyXG4gICAgdG9wOiAwO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgICYgPiBiIHtcclxuICAgICAgY29sb3I6ICNhNWE1YTU7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgbWF4LXdpZHRoOiA1MzBweDtcclxuICB9XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7Qm9sZExpc3R9IHtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICYgPiBsaSB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogNzVweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICByaWdodDogLTUwcHg7XHJcbiAgICAgIHRvcDogMTIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAmID4gJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDogNTB2dztcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjUlO1xyXG4gICAgICByaWdodDogLTcwcHg7XHJcbiAgICAgIHRvcDogMjIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWFyZ2luLXRvcDowO1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG9yZGVyOjE7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDcwcHg7XHJcbiAgICAgIG1heC13aWR0aDoxMDAlO1xyXG4gICAgfVxyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgb3JkZXI6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDUlO1xyXG4gICAgICByaWdodDogMyU7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICByaWdodDogLTclO1xyXG4gICAgICB0b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMTBweDtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBXb3JsZCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEdyZXkgPSBzdHlsZWQucGBcclxuICBjb2xvcjogZ3JleTtcclxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgV29ybGRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDExMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAyMDBweDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICBtaW4taGVpZ2h0OiA4NTBweDtcclxuXHJcbiAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IC03NTBweDtcclxuICAgIHRvcDogLTI4MHB4O1xyXG4gIH1cclxuXHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwMHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgICYgPiBiciB7XHJcbiAgICAgICAgZGlzcGxheTpub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNzAlO1xyXG4gICAgbGVmdDogLTI3JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA0MCU7XHJcbiAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICBsZWZ0OiAtMzclO1xyXG4gICAgICB0b3A6IDYwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTIwJTtcclxuICAgIGxlZnQ6IC02NiU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogR2xvYmFsIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgR2xvYmFsQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gIG1pbi1oZWlnaHQ6IDEwMDBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke1RleHRDb250YWluZXJ9IHtcclxuICAgIG1heC13aWR0aDogNTUwcHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IC0yMjBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6MTUwcHg7XHJcbiAgICBtaW4taGVpZ2h0OiA3MDBweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgcmlnaHQ6IC0xMDBweDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIHRvcDogaW5pdGlhbDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgICYgPiAke1RpdGxlfSB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgICAgfVxyXG4gICAgICAmID4gJHtQfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA1MHZ3O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICByaWdodDogMDtcclxuICAgICAgdG9wOiAyMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFmZmlsaWF0ZSBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFmZmlsaWF0ZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZDogdXJsKCR7YWZmaWxpYXRlQmd9KTtcclxuICBtaW4taGVpZ2h0OiAxMTAwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTcxcHggMDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG5cclxuICAke1Jvd30ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG4gICR7VGl0bGV9IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgJHtUcmFuc3BhcmVudEJ1dHRvbn0ge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgICBtaW4taGVpZ2h0OiA5MDBweDtcclxuICAgICYgPiAke1Jvd30ge1xyXG4gICAgICAmID4gJHtUaXRsZX0ge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Card=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj19\",label:\"Card\"})( false?undefined:{name:\"b7j3pv\",styles:\"display:flex;flex-direction:column;text-align:center;justify-content:space-between;align-self:flex-start;padding:35px;background:white;color:#5b5d7e;max-width:256px;width:256px;margin-left:30px;margin-right:30px;border-radius:20px;text-align:center;box-shadow:0px 25px 30px #48484840;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlxQnVCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IFwiLi9pMThuXCI7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IGFneEhlcm9CZyBmcm9tIFwiLi4vaW1nL2hlcm9CRy5qcGdcIjtcclxuaW1wb3J0IGJsb2NrY2hhaW5CRyBmcm9tIFwiLi4vaW1nL2Jsb2NrY2hhaW4tYmcuanBnXCI7XHJcbmltcG9ydCBhZ3hMZWZ0SW1hZ2UgZnJvbSBcIi4uL2ltZy9hZ3gtY29pbi1sZWZ0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgYXV4UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2F1eC1jb2luLXJpZ2h0LWltYWdlLmpwZ1wiO1xyXG5pbXBvcnQgaG9uZXN0UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2hvbmVzdFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCB3b3JsZExlZnRJbWFnZSBmcm9tIFwiLi4vaW1nL3dvcmxkTGVmdEltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgZ2xvYmFsUmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2dsb2JhbFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCBkb3dubG9hZEFwcFN0b3JlIGZyb20gXCIuLi9pbWcvZG93bmxvYWQtYXBwLXN0b3JlLnBuZ1wiO1xyXG5pbXBvcnQgZG93bmxvYWRHb29nbGVQbGF5IGZyb20gXCIuLi9pbWcvZG93bmxvYWQtZ29vZ2xlLXBsYXkucG5nXCI7XHJcbmltcG9ydCBhZmZpbGlhdGVCZyBmcm9tIFwiLi4vaW1nL2FmZmlsaWF0ZS1iZy1pbWFnZS5qcGdcIjtcclxuXHJcbi8qIEJyZWFrcG9pbnRzICovXHJcbmNvbnN0IGJyZWFrcG9pbnRzID0gWzU3NiwgNzY4LCAxMzIwLCAxNzIwXTtcclxuY29uc3QgbXEgPSBicmVha3BvaW50cy5tYXAoKGJwKSA9PiBgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnB9cHgpYCk7XHJcblxyXG5jb25zdCBQYWdlQUdYID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICByZXR1cm4gKFxyXG4gICAgPEFHWEFVWENvbnRpbmVyPlxyXG4gICAgICA8SGVyb0NvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICA8Yj5BR1ggJiBBVVg8L2I+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIE1vbmV5IE1hZGUgSG9uZXN0LlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPHA+XHJcbiAgICAgICAgICBCYWNrZWQgYnkgcHVyZSBTaWx2ZXIgJiBHb2xkLiA8YnIgLz5cclxuICAgICAgICAgIFBvd2VyZWQgYnkgYmxvY2tjaGFpbi5cclxuICAgICAgICA8L3A+XHJcbiAgICAgICAgPEI+XHJcbiAgICAgICAgICBUYWtlIGNvbnRyb2wgb2YgeW91ciBmaW5hbmNlcyB3aXRoIHNtYXJ0LCBzZWN1cmUsIGFuZCBzdGFibGUgbW9uZXkuXHJcbiAgICAgICAgPC9CPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkpvaW4gVG9kYXk8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgIDwvSGVyb0NvbnRhaW5lcj5cclxuICAgICAgPEJsb2NrY2hhaW5Db250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgQSA8Yj5CbG9ja2NoYWluLVBvd2VyZWQ8L2I+IE1vbmV0YXJ5IFN5c3RlbS5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxEaXNjbGFpbWVyPlxyXG4gICAgICAgICAgUmVpbnRyb2R1Y2luZyBhIHNhZmUtaGF2ZW4gZ29sZCAmIHNpbHZlciBhcyBtb25leSBhZ2Fpbi57XCIgXCJ9XHJcbiAgICAgICAgICA8Yj5Gb3IgZXZlcnlvbmUuPC9iPlxyXG4gICAgICAgIDwvRGlzY2xhaW1lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlN0YWJsZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBJbmZsYXRpb24tcmVzaXN0YW50IEFHWCAmIEFVWCBDb2lucyBhcmUgYmFja2VkIGJ5IGEgcmVzZXJ2ZSBvZlxyXG4gICAgICAgICAgICAgIHNlY3VyZWx5IHZhdWx0ZWQgZ29sZCBhbmQgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICAgIDxCbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgICA8Yj5JbnN0YW50PC9iPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIFdpdGhpbiBzZWNvbmRzLCBzZW5kICYgcmVjZWl2ZSBtb25leSBnbG9iYWxseSBhdCBsb3dlciBmZWVzIHRoYW5cclxuICAgICAgICAgICAgICB0cmFkaXRpb25hbCBiYW5rcy5cclxuICAgICAgICAgICAgPC9CbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlNlY3VyZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBUaGUgTE9ERVBheSBTeXN0ZW0gaXMgYnVpbHQgb24gc2VjdXJlIGJsb2NrY2hhaW4gcHJvdG9jb2xzIG1lYW50XHJcbiAgICAgICAgICAgICAgdG8gcHJlc2VydmUgeW91ciB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxCPlxyXG4gICAgICAgICAgICBEaWdpdGFsIEFzc2V0cyBSZXN0b3JpbmcgUmVhbCBWYWx1ZSB0byA8Yj5Zb3VyIFdlYWx0aC48L2I+XHJcbiAgICAgICAgICA8L0I+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQmxvY2tjaGFpbkNvbnRhaW5lcj5cclxuICAgICAgPEFHWENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e2FneExlZnRJbWFnZX0gLz5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgICBUaGUgPGI+QUdYPC9iPiBDb2luLlxyXG4gICAgICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgICBFYWNoIEFHWCBDb2luIHJlcHJlc2VudHMgYSBvbmUgKDEpIGdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPEJsdWVCdXR0b24+R2V0IEFHWCBOb3c8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgPC9BR1hDb250YWluZXI+XHJcbiAgICAgIDxBVVhDb250YWluZXI+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxUZXh0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgICAgVGhlIDxiPkFVWDwvYj4gQ29pbi5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBVVggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBtaWxsaWdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgZ29sZCBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxCbHVlQnV0dG9uPkdldCBBVVggTm93PC9CbHVlQnV0dG9uPlxyXG4gICAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17YXV4UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9BVVhDb250YWluZXI+XHJcbiAgICAgIDxMT0RFUGF5Q29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFN3aXRjaCB0byA8Yj5MT0RFUGF5PC9iPiBpbiA0IFNpbXBsZSBTdGVwcy5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8Q2FyZD5cclxuICAgICAgICAgICAgPENhcmROdW1iZXI+MTwvQ2FyZE51bWJlcj5cclxuICAgICAgICAgICAgPENhcmRIZWFkZXI+RG93bmxvYWQgdGhlIExPREVQYXkgV2FsbGV0PC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgQXZhaWxhYmxlIGZvciBmcmVlIG9uIGRlc2t0b3AsIGlPUywgJiBBbmRyb2lkLiBObyBwZXJzb25hbFxyXG4gICAgICAgICAgICAgIGluZm9ybWF0aW9uIG9yIHJlZ2lzdHJhdGlvbiByZXF1aXJlZC5cclxuICAgICAgICAgICAgPC9DYXJkRGVzYz5cclxuICAgICAgICAgICAgPFByaW1hcnlCdXR0b24+TGVhcm4gTW9yZTwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZE51bWJlcj4yPC9DYXJkTnVtYmVyPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5TZXQgdXAgWW91ciBMT0RFIEFjY291bnQ8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBHZXQgeW91ciBhY2NvdW50IHZlcmlmaWVkIGluIG1pbnV0ZXMgdG8gc3RhcnQgdXNpbmcgaG9uZXN0IG1vbmV5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjM8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPkdldCBIb25lc3QgTW9uZXk8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBCdXkgeW91ciBBR1ggJiBBVVggd2l0aCBhbnkgZGViaXQgb3IgY3JlZGl0IGNhcmQuIFRoZW4gc2VuZCwgc3BlbmRcclxuICAgICAgICAgICAgICAmIHN0b3JlIHRoZW0gb24gdGhlIExPREVQYXkgV2FsbGV0LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjQ8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPlNwcmVhZCBIb25lc3R5IGFuZCBnZXQgcGFpZCEgPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgU2hhcmUgeW91ciBhZmZpbGlhdGUgbGluayAmIHN0YXJ0IGVhcm5pbmcgYSBwYXNzaXZlIGluY29tZSBmb3JcclxuICAgICAgICAgICAgICBldmVyeSBwZXJzb24geW91IGludHJvZHVjZSB0byBMT0RFUGF5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgICA8UHJpbWFyeUJ1dHRvbj5MZWFybiBNb3JlPC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxCbHVlQnV0dG9uPlN3aXRjaCBUb2RheSE8L0JsdWVCdXR0b24+XHJcbiAgICAgIDwvTE9ERVBheUNvbnRhaW5lcj5cclxuICAgICAgPEhvbmVzdENvbnRhaW5lcj5cclxuICAgICAgICA8VGV4dENvbnRhaW5lcj5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgVGhlIEZ1dHVyZSBvZlxyXG4gICAgICAgICAgICA8YnIgLz4gQ29tbWVyY2UgaXMgPGI+SG9uZXN0LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5MT0RFUGF5IGhlbHBzIGJ1c2luZXNzZXMgZ3JvdyB3aXRoIEhvbmVzdCBNb25leS48L1A+XHJcbiAgICAgICAgICA8Qm9sZExpc3Q+XHJcbiAgICAgICAgICAgIDxsaT5Mb3cgY29zdCwgc2VjdXJlIHRyYW5zYWN0aW9uczwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5JbnN0YW50IHNldHRsZW1lbnRzPC9saT5cclxuICAgICAgICAgICAgPGxpPkEgZ2xvYmFsIG1hcmtldHBsYWNlIG9mIGVhZ2VyIGhvbmVzdC1tb25leSBzaG9wcGVycyE8L2xpPlxyXG4gICAgICAgICAgPC9Cb2xkTGlzdD5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICA8Yj5Eb24ndCBicmVhayBldmVuLCBCcmVhayBmcmVlLjwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkxPREVQYXkgQnVzaW5lc3M8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17aG9uZXN0UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9Ib25lc3RDb250YWluZXI+XHJcbiAgICAgIDxXb3JsZENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e3dvcmxkTGVmdEltYWdlfSAvPlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgICAgIE9uZSBXYWxsZXQgQnJpZGdpbmcgPGJyIC8+YSA8Yj5Xb3JsZDwvYj4gb2YgT3Bwb3J0dW5pdGllcy5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBR1ggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBncmFtIHdlaWdodCBvZiB2YXVsdGVkLFxyXG4gICAgICAgICAgICAgIGF1ZGl0ZWQsIGluc3VyZWQsIGFuZCB2ZXJpZmlhYmxlIHNpbHZlciBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICAgIDxiPlNpbXBsZS48L2I+IFNlbmQgJiBzcGVuZCBzdHJhaWdodCBmcm9tIHlvdXIgcGhvbmUgYXMgZmFzdCBhc1xyXG4gICAgICAgICAgICAgIHNlbmRpbmcgYW4gU01TLiA8Yj5TZWN1cmUuPC9iPiBTYWZlLCBsb3ctY29zdCB0cmFuc2FjdGlvbnNcclxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgb24gYmxvY2tjaGFpbi4gPGI+U3RhYmxlLjwvYj4gUmVhbCBhc3NldHMsIHJlYWwgdmFsdWUsXHJcbiAgICAgICAgICAgICAgcmVhbCBtb25leS5cclxuICAgICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgICA8R3JleT5HZXQgWW91ciBMT0RFUGF5IFdhbGxldCBUb2RheSE8L0dyZXk+XHJcbiAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgPERvd25sb2FkQnV0dG9uIHNyYz17ZG93bmxvYWRBcHBTdG9yZX0gLz5cclxuICAgICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEdvb2dsZVBsYXl9IC8+XHJcbiAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvV29ybGRDb250YWluZXI+XHJcbiAgICAgIDxHbG9iYWxDb250YWluZXI+XHJcbiAgICAgICAgPFRleHRDb250YWluZXI+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEhvbmVzdCBNb25leSBmb3IgYSA8Yj5HbG9iYWwgQ29tbXVuaXR5LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgPGI+V2VsY29tZSB0byB0aGUgTE9ERVBheSBDb21tdW5pdHkuPC9iPiA8YnIgLz5cclxuICAgICAgICAgICAgQSBncm91cCBvZiBsaWtlLW1pbmRlZCBpbmRpdmlkdWFscyBkcml2ZW4gYnkgdGhlIGJlbGllZiA8YnIgLz5cclxuICAgICAgICAgICAgdGhhdCBldmVyeW9uZSBkZXNlcnZlcyB0byBleHBlcmllbmNle1wiIFwifVxyXG4gICAgICAgICAgICA8Yj5cclxuICAgICAgICAgICAgICBmaW5hbmNpYWwgPGJyIC8+XHJcbiAgICAgICAgICAgICAgZnJlZWRvbSAmIHN0YWJsZSB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkpvaW4gVG9kYXkhPC9CbHVlQnV0dG9uPlxyXG4gICAgICAgIDwvVGV4dENvbnRhaW5lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2dsb2JhbFJpZ2h0SW1hZ2V9IC8+XHJcbiAgICAgIDwvR2xvYmFsQ29udGFpbmVyPlxyXG4gICAgICA8QWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEV4cGFuZCB0aGUgQ2hhaW4sIDxiciAvPlxyXG4gICAgICAgICAgICBCZWNvbWUgYW4gQWZmaWxpYXRlIFRvZGF5LlxyXG4gICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICBCZWNvbWUgYSBMT0RFUGF5IEFmZmlsaWF0ZSBhbmQgZW1wb3dlciB5b3VyIG5ldHdvcmsgd2l0aCBob25lc3RcclxuICAgICAgICAgICAgbW9uZXkuIDxiciAvPlxyXG4gICAgICAgICAgICA8Yj5FYXJuIGEgcGFzc2l2ZSBpbmNvbWUuIEhvbmVzdGx5LiA8L2I+XHJcbiAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICA8VHJhbnNwYXJlbnRCdXR0b24+TGVhcm4gTW9yZTwvVHJhbnNwYXJlbnRCdXR0b24+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgPC9BR1hBVVhDb250aW5lcj5cclxuICApO1xyXG59O1xyXG5cclxuLy8gQ29ubmVjdCB0aGUgSGVhZGVyIGNvbXBvbmVudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBgc3RhdGVgIGluIGl0J3MgYHByb3BzYFxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFBhZ2VBR1gpO1xyXG5cclxuLyogR2xvYmFsICovXHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiAyNDBweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkQnV0dG9uID0gc3R5bGVkLmltZ2BcclxuICB3aWR0aDogMTg4cHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICAke21xWzJdfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICB3aWR0aDogMTM3cHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBSaWdodEltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuLyogSGVybyAqL1xyXG5cclxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2YFxyXG4gIGZvbnQtc2l6ZTogNTBweDtcclxuICBtYXgtd2lkdGg6IDc1MHB4O1xyXG4gIG1hcmdpbi10b3A6IDIwMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAke21xWzNdfSB7XHJcbiAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEIgPSBzdHlsZWQuYmBcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDI1cHg7XHJcbmA7XHJcblxyXG5jb25zdCBUcmFuc3BhcmVudEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCAjMzE0NDUyO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDMwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmx1ZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgYmFja2dyb3VuZDogIzM2YWFmZjtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XHJcbiAgcGFkZGluZzogMThweCA0NHB4O1xyXG4gIG1heC13aWR0aDogMjQwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgYm94LXNoYWRvdzogMHB4IDEzcHggMjBweCAjNDg0ODQ4NjA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbmA7XHJcblxyXG5jb25zdCBBR1hBVVhDb250aW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgZm9udC1mYW1pbHk6IFwiUnViaWtcIjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEhlcm9Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7YWd4SGVyb0JnfSk7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICBtaW4taGVpZ2h0OiAxMjI4cHg7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLXRvcDogMzc1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgJHttcVsyXX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDA7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIG1pbi1oZWlnaHQ6IGluaXRpYWw7XHJcbiAgICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogNjVweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogI2YyZjBmMztcclxuICB9XHJcbiAgJiA+IHAge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgfVxyXG4gICR7Qn0ge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIG1heC13aWR0aDogNDI1cHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBCbG9ja2NoYWluIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgRGlzY2xhaW1lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcblxyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmxvY2tjaGFpblRpbGUgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogMzIwcHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgcGFkZGluZzogMzBweCAwO1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgJiA+IGIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gIH1cclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcwNzA3MDtcclxuYDtcclxuXHJcbmNvbnN0IEJsb2NrY2hhaW5Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQ6IHVybCgke2Jsb2NrY2hhaW5CR30pO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTU1MHB4IDI2MHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDE1MHB4O1xyXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogMTc2MHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1hcmdpbi10b3A6IDE3NXB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke0Rpc2NsYWltZXJ9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgfVxyXG4gICR7Um93fSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzMDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgJiA+ICR7Qn0ge1xyXG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICBtYXJnaW4tdG9wOiA3NXB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDAwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogMTMyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTQxMHB4IDI1MHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDIwMHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICBtaW4taGVpZ2h0OiAxMjAwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtSb3d9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTUwcHg7XHJcbiAgICAgICR7Qn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICR7Um93fSB7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICYgPiBwIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgICR7Qn0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Um93fSBkaXYgJHtCbG9ja2NoYWluVGlsZX0ge1xyXG4gICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNzBweDtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFHWCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFHWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAxMTUwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMjAwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBib3JkZXItcmFkaXVzOiAwIDMzMHB4IDAgMDtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LCAyMjQsIDIyNCk7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMTgwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSA4MCVcclxuICApO1xyXG4gICR7UH0ge1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzNXB4O1xyXG4gIH1cclxuICAke0xlZnRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtNDMwcHg7XHJcbiAgICBsZWZ0OiAtNDgwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcclxuICAgIHBhZGRpbmctbGVmdDogODAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNTBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICAgIHRvcDogLTIwMHB4O1xyXG4gICAgICBsZWZ0OiAtMjAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDozMzBweDtcclxuICAgIG1hcmdpbi1ib3R0b206MTIwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB0b3A6IC0xNjBweDtcclxuICAgICAgbWF4LXdpZHRoOiA1MTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMjIwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6MDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfXtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGxlZnQ6IC0xNCU7XHJcbiAgICAgIHRvcDogLTMzJTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy10b3A6IDIwMHB4O1xyXG4gICAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgIHRvcDogLTI5JTtcclxuICAgIGxlZnQ6IC0xOSU7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogQVVYIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgVGV4dENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcbmNvbnN0IEFVWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICBtYXgtd2lkdGg6IDUxMHB4O1xyXG4gIH1cclxuICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTEwMHB4O1xyXG4gICAgcmlnaHQ6IC0zMDBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgcmlnaHQ6IC0xMDBweDtcclxuICAgICAgdG9wOiAwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDo1MCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcmlnaHQ6IC01MHB4O1xyXG4gICAgdG9wOiA2MHB4O1xyXG4gICAgd2lkdGg6IDU1JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246Y29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OjA7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBvcmRlcjoxO1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6MTAwcHg7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogODAlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBvcmRlcjogMDtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgIHRvcDogNjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIHdpZHRoOjEwMCU7XHJcbiAgICAgICAgbWF4LXdpZHRoOjEwMCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBMT0RFUGF5IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQ2FyZE51bWJlciA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA1MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgYm9yZGVyLXJhZGl1czogODBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAganVzdGlmeS1zZWxmOiBmbGV4LXN0YXJ0O1xyXG4gIHdpZHRoOiA2MHB4O1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IENhcmQgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgcGFkZGluZzogMzVweDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBjb2xvcjogIzViNWQ3ZTtcclxuICBtYXgtd2lkdGg6IDI1NnB4O1xyXG4gIHdpZHRoOiAyNTZweDtcclxuICBtYXJnaW4tbGVmdDogMzBweDtcclxuICBtYXJnaW4tcmlnaHQ6IDMwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgYm94LXNoYWRvdzogMHB4IDI1cHggMzBweCAjNDg0ODQ4NDA7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkSGVhZGVyID0gc3R5bGVkLmRpdmBcclxuICBmb250LXNpemU6IDI2cHg7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMwMDNkNmE0MDtcclxuICBwYWRkaW5nLWJvdHRvbTogMzBweDtcclxuICBjb2xvcjogYmxhY2s7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkRGVzYyA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBmb250LXNpemU6IDIzcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBvcGFjaXR5OiAwLjc7XHJcbmA7XHJcblxyXG5jb25zdCBMT0RFUGF5Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgbWFyZ2luLXRvcDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMzYwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjgpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSAxMDAlXHJcbiAgKTtcclxuICBib3JkZXItcmFkaXVzOiAwIDAgMCAzMzBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXgtd2lkdGg6IDYwMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XHJcbiAgfVxyXG4gICR7Qmx1ZUJ1dHRvbn0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjI1cHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIG1hcmdpbi10b3A6IDE1MHB4O1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Q2FyZH0ge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gICAgfVxyXG4gICAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAgMCAwIDEzMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogSG9uZXN0IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQm9sZExpc3QgPSBzdHlsZWQudWxgYDtcclxuXHJcbmNvbnN0IEhvbmVzdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMTVweDtcclxuICBtYXJnaW4tdG9wOiAxMzVweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgei1pbmRleDogLTE7XHJcbiAgICByaWdodDogLTEwMHB4O1xyXG4gICAgdG9wOiAwO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgICYgPiBiIHtcclxuICAgICAgY29sb3I6ICNhNWE1YTU7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgbWF4LXdpZHRoOiA1MzBweDtcclxuICB9XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7Qm9sZExpc3R9IHtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICYgPiBsaSB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogNzVweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICByaWdodDogLTUwcHg7XHJcbiAgICAgIHRvcDogMTIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAmID4gJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDogNTB2dztcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjUlO1xyXG4gICAgICByaWdodDogLTcwcHg7XHJcbiAgICAgIHRvcDogMjIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWFyZ2luLXRvcDowO1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG9yZGVyOjE7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDcwcHg7XHJcbiAgICAgIG1heC13aWR0aDoxMDAlO1xyXG4gICAgfVxyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgb3JkZXI6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDUlO1xyXG4gICAgICByaWdodDogMyU7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICByaWdodDogLTclO1xyXG4gICAgICB0b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMTBweDtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBXb3JsZCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEdyZXkgPSBzdHlsZWQucGBcclxuICBjb2xvcjogZ3JleTtcclxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgV29ybGRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDExMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAyMDBweDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICBtaW4taGVpZ2h0OiA4NTBweDtcclxuXHJcbiAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IC03NTBweDtcclxuICAgIHRvcDogLTI4MHB4O1xyXG4gIH1cclxuXHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwMHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgICYgPiBiciB7XHJcbiAgICAgICAgZGlzcGxheTpub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNzAlO1xyXG4gICAgbGVmdDogLTI3JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA0MCU7XHJcbiAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICBsZWZ0OiAtMzclO1xyXG4gICAgICB0b3A6IDYwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTIwJTtcclxuICAgIGxlZnQ6IC02NiU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogR2xvYmFsIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgR2xvYmFsQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gIG1pbi1oZWlnaHQ6IDEwMDBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke1RleHRDb250YWluZXJ9IHtcclxuICAgIG1heC13aWR0aDogNTUwcHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IC0yMjBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6MTUwcHg7XHJcbiAgICBtaW4taGVpZ2h0OiA3MDBweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgcmlnaHQ6IC0xMDBweDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIHRvcDogaW5pdGlhbDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgICYgPiAke1RpdGxlfSB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgICAgfVxyXG4gICAgICAmID4gJHtQfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA1MHZ3O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICByaWdodDogMDtcclxuICAgICAgdG9wOiAyMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFmZmlsaWF0ZSBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFmZmlsaWF0ZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZDogdXJsKCR7YWZmaWxpYXRlQmd9KTtcclxuICBtaW4taGVpZ2h0OiAxMTAwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTcxcHggMDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG5cclxuICAke1Jvd30ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG4gICR7VGl0bGV9IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgJHtUcmFuc3BhcmVudEJ1dHRvbn0ge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgICBtaW4taGVpZ2h0OiA5MDBweDtcclxuICAgICYgPiAke1Jvd30ge1xyXG4gICAgICAmID4gJHtUaXRsZX0ge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardHeader=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj20\",label:\"CardHeader\"})( false?undefined:{name:\"1039o88\",styles:\"font-size:26px;border-bottom:1px solid #003d6a40;padding-bottom:30px;color:black;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardDesc=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj21\",label:\"CardDesc\"})( false?undefined:{name:\"17y4z64\",styles:\"margin-top:30px;font-size:23px;line-height:30px;font-weight:300;opacity:0.7;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LODEPayContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj22\",label:\"LODEPayContainer\"})(\"display:flex;flex-direction:column;align-items:center;position:relative;margin-top:300px;background:linear-gradient( 360deg,rgba(224,224,224,0.8) 0%,rgba(243,243,252,0) 100% );border-radius:0 0 0 330px;\",Title,\"{max-width:600px;margin-bottom:150px;}\",BlueButton,\"{margin-bottom:225px;}\",mq[3],\"{margin-top:150px;\",Row,\"{flex-wrap:wrap;justify-content:center;}\",Card,\"{margin-bottom:50px;}\",BlueButton,\"{margin-top:80px;margin-bottom:150px;}}\",mq[1],\"{padding-left:70px;padding-right:70px;margin-top:0;border-radius:0 0 0 130px;}\",mq[0],\"{padding-left:7%;padding-right:7%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* Honest Container */var BoldList=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\",{target:\"ed1j7qj23\",label:\"BoldList\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var HonestContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj24\",label:\"HonestContainer\"})(\"padding-left:315px;margin-top:135px;position:relative;font-size:20px;\",RightImage,\"{position:absolute;z-index:-1;right:-100px;top:0;}\",P,\"{& > b{color:#a5a5a5;font-weight:700;}}\",TextContainer,\"{max-width:530px;}\",Title,\"{text-align:left;margin-bottom:40px;}\",BoldList,\"{margin-top:40px;margin-bottom:40px;font-weight:700;& > li{padding-left:30px;}}\",BlueButton,\"{max-width:300px;}\",mq[3],\"{padding-left:150px;margin-top:75px;\",RightImage,\"{width:60%;right:-50px;top:120px;}}\",mq[2],\"{padding-left:100px;& > \",TextContainer,\"{max-width:50vw;}\",RightImage,\"{width:65%;right:-70px;top:220px;}}\",mq[1],\"{display:flex;flex-direction:column;margin-top:0;\",TextContainer,\"{order:1;padding-right:70px;max-width:100%;}\",RightImage,\"{position:relative;order:0;width:105%;right:3%;}}\",mq[0],\"{padding-left:7%;padding-right:7%;\",RightImage,\"{right:-7%;top:100px;}\",Title,\"{margin-top:110px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* World Container */var Grey=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"ed1j7qj25\",label:\"Grey\"})( false?undefined:{name:\"o6yr06\",styles:\"color:grey;margin-bottom:30px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var WorldContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj26\",label:\"WorldContainer\"})(\"position:relative;padding-left:1100px;padding-right:200px;font-size:20px;font-weight:300;margin-top:250px;min-height:850px;\",LeftImage,\"{position:absolute;left:-750px;top:-280px;}\",Title,\"{margin-bottom:40px;}\",P,\"{margin-bottom:40px;}\",mq[3],\"{padding-left:700px;padding-right:150px;\",Title,\"{& > br{display:none;}}\",LeftImage,\"{width:70%;left:-27%;}}\",mq[2],\"{padding-left:40%;margin-top:80px;padding-right:100px;\",LeftImage,\"{width:60%;left:-37%;top:60px;}}\",mq[1],\"{padding-right:100px;}\",mq[0],\"{padding-left:7%;padding-right:7%;\",LeftImage,\"{position:relative;width:120%;left:-66%;top:0;}\",Title,\"{margin-top:0;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTgwQmlDIiwiZmlsZSI6IkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IFwiLi9pMThuXCI7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IGFneEhlcm9CZyBmcm9tIFwiLi4vaW1nL2hlcm9CRy5qcGdcIjtcclxuaW1wb3J0IGJsb2NrY2hhaW5CRyBmcm9tIFwiLi4vaW1nL2Jsb2NrY2hhaW4tYmcuanBnXCI7XHJcbmltcG9ydCBhZ3hMZWZ0SW1hZ2UgZnJvbSBcIi4uL2ltZy9hZ3gtY29pbi1sZWZ0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgYXV4UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2F1eC1jb2luLXJpZ2h0LWltYWdlLmpwZ1wiO1xyXG5pbXBvcnQgaG9uZXN0UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2hvbmVzdFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCB3b3JsZExlZnRJbWFnZSBmcm9tIFwiLi4vaW1nL3dvcmxkTGVmdEltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgZ2xvYmFsUmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2dsb2JhbFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCBkb3dubG9hZEFwcFN0b3JlIGZyb20gXCIuLi9pbWcvZG93bmxvYWQtYXBwLXN0b3JlLnBuZ1wiO1xyXG5pbXBvcnQgZG93bmxvYWRHb29nbGVQbGF5IGZyb20gXCIuLi9pbWcvZG93bmxvYWQtZ29vZ2xlLXBsYXkucG5nXCI7XHJcbmltcG9ydCBhZmZpbGlhdGVCZyBmcm9tIFwiLi4vaW1nL2FmZmlsaWF0ZS1iZy1pbWFnZS5qcGdcIjtcclxuXHJcbi8qIEJyZWFrcG9pbnRzICovXHJcbmNvbnN0IGJyZWFrcG9pbnRzID0gWzU3NiwgNzY4LCAxMzIwLCAxNzIwXTtcclxuY29uc3QgbXEgPSBicmVha3BvaW50cy5tYXAoKGJwKSA9PiBgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnB9cHgpYCk7XHJcblxyXG5jb25zdCBQYWdlQUdYID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICByZXR1cm4gKFxyXG4gICAgPEFHWEFVWENvbnRpbmVyPlxyXG4gICAgICA8SGVyb0NvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICA8Yj5BR1ggJiBBVVg8L2I+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIE1vbmV5IE1hZGUgSG9uZXN0LlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPHA+XHJcbiAgICAgICAgICBCYWNrZWQgYnkgcHVyZSBTaWx2ZXIgJiBHb2xkLiA8YnIgLz5cclxuICAgICAgICAgIFBvd2VyZWQgYnkgYmxvY2tjaGFpbi5cclxuICAgICAgICA8L3A+XHJcbiAgICAgICAgPEI+XHJcbiAgICAgICAgICBUYWtlIGNvbnRyb2wgb2YgeW91ciBmaW5hbmNlcyB3aXRoIHNtYXJ0LCBzZWN1cmUsIGFuZCBzdGFibGUgbW9uZXkuXHJcbiAgICAgICAgPC9CPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkpvaW4gVG9kYXk8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgIDwvSGVyb0NvbnRhaW5lcj5cclxuICAgICAgPEJsb2NrY2hhaW5Db250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgQSA8Yj5CbG9ja2NoYWluLVBvd2VyZWQ8L2I+IE1vbmV0YXJ5IFN5c3RlbS5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxEaXNjbGFpbWVyPlxyXG4gICAgICAgICAgUmVpbnRyb2R1Y2luZyBhIHNhZmUtaGF2ZW4gZ29sZCAmIHNpbHZlciBhcyBtb25leSBhZ2Fpbi57XCIgXCJ9XHJcbiAgICAgICAgICA8Yj5Gb3IgZXZlcnlvbmUuPC9iPlxyXG4gICAgICAgIDwvRGlzY2xhaW1lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlN0YWJsZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBJbmZsYXRpb24tcmVzaXN0YW50IEFHWCAmIEFVWCBDb2lucyBhcmUgYmFja2VkIGJ5IGEgcmVzZXJ2ZSBvZlxyXG4gICAgICAgICAgICAgIHNlY3VyZWx5IHZhdWx0ZWQgZ29sZCBhbmQgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICAgIDxCbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgICA8Yj5JbnN0YW50PC9iPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIFdpdGhpbiBzZWNvbmRzLCBzZW5kICYgcmVjZWl2ZSBtb25leSBnbG9iYWxseSBhdCBsb3dlciBmZWVzIHRoYW5cclxuICAgICAgICAgICAgICB0cmFkaXRpb25hbCBiYW5rcy5cclxuICAgICAgICAgICAgPC9CbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlNlY3VyZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBUaGUgTE9ERVBheSBTeXN0ZW0gaXMgYnVpbHQgb24gc2VjdXJlIGJsb2NrY2hhaW4gcHJvdG9jb2xzIG1lYW50XHJcbiAgICAgICAgICAgICAgdG8gcHJlc2VydmUgeW91ciB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxCPlxyXG4gICAgICAgICAgICBEaWdpdGFsIEFzc2V0cyBSZXN0b3JpbmcgUmVhbCBWYWx1ZSB0byA8Yj5Zb3VyIFdlYWx0aC48L2I+XHJcbiAgICAgICAgICA8L0I+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQmxvY2tjaGFpbkNvbnRhaW5lcj5cclxuICAgICAgPEFHWENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e2FneExlZnRJbWFnZX0gLz5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgICBUaGUgPGI+QUdYPC9iPiBDb2luLlxyXG4gICAgICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgICBFYWNoIEFHWCBDb2luIHJlcHJlc2VudHMgYSBvbmUgKDEpIGdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPEJsdWVCdXR0b24+R2V0IEFHWCBOb3c8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgPC9BR1hDb250YWluZXI+XHJcbiAgICAgIDxBVVhDb250YWluZXI+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxUZXh0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgICAgVGhlIDxiPkFVWDwvYj4gQ29pbi5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBVVggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBtaWxsaWdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgZ29sZCBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxCbHVlQnV0dG9uPkdldCBBVVggTm93PC9CbHVlQnV0dG9uPlxyXG4gICAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17YXV4UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9BVVhDb250YWluZXI+XHJcbiAgICAgIDxMT0RFUGF5Q29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFN3aXRjaCB0byA8Yj5MT0RFUGF5PC9iPiBpbiA0IFNpbXBsZSBTdGVwcy5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8Q2FyZD5cclxuICAgICAgICAgICAgPENhcmROdW1iZXI+MTwvQ2FyZE51bWJlcj5cclxuICAgICAgICAgICAgPENhcmRIZWFkZXI+RG93bmxvYWQgdGhlIExPREVQYXkgV2FsbGV0PC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgQXZhaWxhYmxlIGZvciBmcmVlIG9uIGRlc2t0b3AsIGlPUywgJiBBbmRyb2lkLiBObyBwZXJzb25hbFxyXG4gICAgICAgICAgICAgIGluZm9ybWF0aW9uIG9yIHJlZ2lzdHJhdGlvbiByZXF1aXJlZC5cclxuICAgICAgICAgICAgPC9DYXJkRGVzYz5cclxuICAgICAgICAgICAgPFByaW1hcnlCdXR0b24+TGVhcm4gTW9yZTwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZE51bWJlcj4yPC9DYXJkTnVtYmVyPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5TZXQgdXAgWW91ciBMT0RFIEFjY291bnQ8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBHZXQgeW91ciBhY2NvdW50IHZlcmlmaWVkIGluIG1pbnV0ZXMgdG8gc3RhcnQgdXNpbmcgaG9uZXN0IG1vbmV5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjM8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPkdldCBIb25lc3QgTW9uZXk8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBCdXkgeW91ciBBR1ggJiBBVVggd2l0aCBhbnkgZGViaXQgb3IgY3JlZGl0IGNhcmQuIFRoZW4gc2VuZCwgc3BlbmRcclxuICAgICAgICAgICAgICAmIHN0b3JlIHRoZW0gb24gdGhlIExPREVQYXkgV2FsbGV0LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjQ8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPlNwcmVhZCBIb25lc3R5IGFuZCBnZXQgcGFpZCEgPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgU2hhcmUgeW91ciBhZmZpbGlhdGUgbGluayAmIHN0YXJ0IGVhcm5pbmcgYSBwYXNzaXZlIGluY29tZSBmb3JcclxuICAgICAgICAgICAgICBldmVyeSBwZXJzb24geW91IGludHJvZHVjZSB0byBMT0RFUGF5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgICA8UHJpbWFyeUJ1dHRvbj5MZWFybiBNb3JlPC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxCbHVlQnV0dG9uPlN3aXRjaCBUb2RheSE8L0JsdWVCdXR0b24+XHJcbiAgICAgIDwvTE9ERVBheUNvbnRhaW5lcj5cclxuICAgICAgPEhvbmVzdENvbnRhaW5lcj5cclxuICAgICAgICA8VGV4dENvbnRhaW5lcj5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgVGhlIEZ1dHVyZSBvZlxyXG4gICAgICAgICAgICA8YnIgLz4gQ29tbWVyY2UgaXMgPGI+SG9uZXN0LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5MT0RFUGF5IGhlbHBzIGJ1c2luZXNzZXMgZ3JvdyB3aXRoIEhvbmVzdCBNb25leS48L1A+XHJcbiAgICAgICAgICA8Qm9sZExpc3Q+XHJcbiAgICAgICAgICAgIDxsaT5Mb3cgY29zdCwgc2VjdXJlIHRyYW5zYWN0aW9uczwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5JbnN0YW50IHNldHRsZW1lbnRzPC9saT5cclxuICAgICAgICAgICAgPGxpPkEgZ2xvYmFsIG1hcmtldHBsYWNlIG9mIGVhZ2VyIGhvbmVzdC1tb25leSBzaG9wcGVycyE8L2xpPlxyXG4gICAgICAgICAgPC9Cb2xkTGlzdD5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICA8Yj5Eb24ndCBicmVhayBldmVuLCBCcmVhayBmcmVlLjwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkxPREVQYXkgQnVzaW5lc3M8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17aG9uZXN0UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9Ib25lc3RDb250YWluZXI+XHJcbiAgICAgIDxXb3JsZENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e3dvcmxkTGVmdEltYWdlfSAvPlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgICAgIE9uZSBXYWxsZXQgQnJpZGdpbmcgPGJyIC8+YSA8Yj5Xb3JsZDwvYj4gb2YgT3Bwb3J0dW5pdGllcy5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBR1ggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBncmFtIHdlaWdodCBvZiB2YXVsdGVkLFxyXG4gICAgICAgICAgICAgIGF1ZGl0ZWQsIGluc3VyZWQsIGFuZCB2ZXJpZmlhYmxlIHNpbHZlciBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICAgIDxiPlNpbXBsZS48L2I+IFNlbmQgJiBzcGVuZCBzdHJhaWdodCBmcm9tIHlvdXIgcGhvbmUgYXMgZmFzdCBhc1xyXG4gICAgICAgICAgICAgIHNlbmRpbmcgYW4gU01TLiA8Yj5TZWN1cmUuPC9iPiBTYWZlLCBsb3ctY29zdCB0cmFuc2FjdGlvbnNcclxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgb24gYmxvY2tjaGFpbi4gPGI+U3RhYmxlLjwvYj4gUmVhbCBhc3NldHMsIHJlYWwgdmFsdWUsXHJcbiAgICAgICAgICAgICAgcmVhbCBtb25leS5cclxuICAgICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgICA8R3JleT5HZXQgWW91ciBMT0RFUGF5IFdhbGxldCBUb2RheSE8L0dyZXk+XHJcbiAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgPERvd25sb2FkQnV0dG9uIHNyYz17ZG93bmxvYWRBcHBTdG9yZX0gLz5cclxuICAgICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEdvb2dsZVBsYXl9IC8+XHJcbiAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvV29ybGRDb250YWluZXI+XHJcbiAgICAgIDxHbG9iYWxDb250YWluZXI+XHJcbiAgICAgICAgPFRleHRDb250YWluZXI+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEhvbmVzdCBNb25leSBmb3IgYSA8Yj5HbG9iYWwgQ29tbXVuaXR5LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgPGI+V2VsY29tZSB0byB0aGUgTE9ERVBheSBDb21tdW5pdHkuPC9iPiA8YnIgLz5cclxuICAgICAgICAgICAgQSBncm91cCBvZiBsaWtlLW1pbmRlZCBpbmRpdmlkdWFscyBkcml2ZW4gYnkgdGhlIGJlbGllZiA8YnIgLz5cclxuICAgICAgICAgICAgdGhhdCBldmVyeW9uZSBkZXNlcnZlcyB0byBleHBlcmllbmNle1wiIFwifVxyXG4gICAgICAgICAgICA8Yj5cclxuICAgICAgICAgICAgICBmaW5hbmNpYWwgPGJyIC8+XHJcbiAgICAgICAgICAgICAgZnJlZWRvbSAmIHN0YWJsZSB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkpvaW4gVG9kYXkhPC9CbHVlQnV0dG9uPlxyXG4gICAgICAgIDwvVGV4dENvbnRhaW5lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2dsb2JhbFJpZ2h0SW1hZ2V9IC8+XHJcbiAgICAgIDwvR2xvYmFsQ29udGFpbmVyPlxyXG4gICAgICA8QWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEV4cGFuZCB0aGUgQ2hhaW4sIDxiciAvPlxyXG4gICAgICAgICAgICBCZWNvbWUgYW4gQWZmaWxpYXRlIFRvZGF5LlxyXG4gICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICBCZWNvbWUgYSBMT0RFUGF5IEFmZmlsaWF0ZSBhbmQgZW1wb3dlciB5b3VyIG5ldHdvcmsgd2l0aCBob25lc3RcclxuICAgICAgICAgICAgbW9uZXkuIDxiciAvPlxyXG4gICAgICAgICAgICA8Yj5FYXJuIGEgcGFzc2l2ZSBpbmNvbWUuIEhvbmVzdGx5LiA8L2I+XHJcbiAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICA8VHJhbnNwYXJlbnRCdXR0b24+TGVhcm4gTW9yZTwvVHJhbnNwYXJlbnRCdXR0b24+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgPC9BR1hBVVhDb250aW5lcj5cclxuICApO1xyXG59O1xyXG5cclxuLy8gQ29ubmVjdCB0aGUgSGVhZGVyIGNvbXBvbmVudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBgc3RhdGVgIGluIGl0J3MgYHByb3BzYFxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFBhZ2VBR1gpO1xyXG5cclxuLyogR2xvYmFsICovXHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiAyNDBweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkQnV0dG9uID0gc3R5bGVkLmltZ2BcclxuICB3aWR0aDogMTg4cHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICAke21xWzJdfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICB3aWR0aDogMTM3cHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBSaWdodEltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuLyogSGVybyAqL1xyXG5cclxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2YFxyXG4gIGZvbnQtc2l6ZTogNTBweDtcclxuICBtYXgtd2lkdGg6IDc1MHB4O1xyXG4gIG1hcmdpbi10b3A6IDIwMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAke21xWzNdfSB7XHJcbiAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEIgPSBzdHlsZWQuYmBcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDI1cHg7XHJcbmA7XHJcblxyXG5jb25zdCBUcmFuc3BhcmVudEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCAjMzE0NDUyO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDMwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmx1ZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgYmFja2dyb3VuZDogIzM2YWFmZjtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XHJcbiAgcGFkZGluZzogMThweCA0NHB4O1xyXG4gIG1heC13aWR0aDogMjQwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgYm94LXNoYWRvdzogMHB4IDEzcHggMjBweCAjNDg0ODQ4NjA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbmA7XHJcblxyXG5jb25zdCBBR1hBVVhDb250aW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgZm9udC1mYW1pbHk6IFwiUnViaWtcIjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEhlcm9Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7YWd4SGVyb0JnfSk7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICBtaW4taGVpZ2h0OiAxMjI4cHg7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLXRvcDogMzc1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgJHttcVsyXX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDA7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIG1pbi1oZWlnaHQ6IGluaXRpYWw7XHJcbiAgICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogNjVweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogI2YyZjBmMztcclxuICB9XHJcbiAgJiA+IHAge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgfVxyXG4gICR7Qn0ge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIG1heC13aWR0aDogNDI1cHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBCbG9ja2NoYWluIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgRGlzY2xhaW1lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcblxyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmxvY2tjaGFpblRpbGUgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogMzIwcHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgcGFkZGluZzogMzBweCAwO1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgJiA+IGIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gIH1cclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcwNzA3MDtcclxuYDtcclxuXHJcbmNvbnN0IEJsb2NrY2hhaW5Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQ6IHVybCgke2Jsb2NrY2hhaW5CR30pO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTU1MHB4IDI2MHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDE1MHB4O1xyXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogMTc2MHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1hcmdpbi10b3A6IDE3NXB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke0Rpc2NsYWltZXJ9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgfVxyXG4gICR7Um93fSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzMDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgJiA+ICR7Qn0ge1xyXG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICBtYXJnaW4tdG9wOiA3NXB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDAwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogMTMyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTQxMHB4IDI1MHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDIwMHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICBtaW4taGVpZ2h0OiAxMjAwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtSb3d9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTUwcHg7XHJcbiAgICAgICR7Qn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICR7Um93fSB7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICYgPiBwIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgICR7Qn0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Um93fSBkaXYgJHtCbG9ja2NoYWluVGlsZX0ge1xyXG4gICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNzBweDtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFHWCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFHWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAxMTUwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMjAwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBib3JkZXItcmFkaXVzOiAwIDMzMHB4IDAgMDtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LCAyMjQsIDIyNCk7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMTgwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSA4MCVcclxuICApO1xyXG4gICR7UH0ge1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzNXB4O1xyXG4gIH1cclxuICAke0xlZnRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtNDMwcHg7XHJcbiAgICBsZWZ0OiAtNDgwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcclxuICAgIHBhZGRpbmctbGVmdDogODAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNTBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICAgIHRvcDogLTIwMHB4O1xyXG4gICAgICBsZWZ0OiAtMjAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDozMzBweDtcclxuICAgIG1hcmdpbi1ib3R0b206MTIwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB0b3A6IC0xNjBweDtcclxuICAgICAgbWF4LXdpZHRoOiA1MTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMjIwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6MDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfXtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGxlZnQ6IC0xNCU7XHJcbiAgICAgIHRvcDogLTMzJTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy10b3A6IDIwMHB4O1xyXG4gICAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgIHRvcDogLTI5JTtcclxuICAgIGxlZnQ6IC0xOSU7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogQVVYIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgVGV4dENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcbmNvbnN0IEFVWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICBtYXgtd2lkdGg6IDUxMHB4O1xyXG4gIH1cclxuICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTEwMHB4O1xyXG4gICAgcmlnaHQ6IC0zMDBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgcmlnaHQ6IC0xMDBweDtcclxuICAgICAgdG9wOiAwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDo1MCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcmlnaHQ6IC01MHB4O1xyXG4gICAgdG9wOiA2MHB4O1xyXG4gICAgd2lkdGg6IDU1JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246Y29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OjA7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBvcmRlcjoxO1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6MTAwcHg7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogODAlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBvcmRlcjogMDtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgIHRvcDogNjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIHdpZHRoOjEwMCU7XHJcbiAgICAgICAgbWF4LXdpZHRoOjEwMCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBMT0RFUGF5IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQ2FyZE51bWJlciA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA1MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgYm9yZGVyLXJhZGl1czogODBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAganVzdGlmeS1zZWxmOiBmbGV4LXN0YXJ0O1xyXG4gIHdpZHRoOiA2MHB4O1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IENhcmQgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgcGFkZGluZzogMzVweDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBjb2xvcjogIzViNWQ3ZTtcclxuICBtYXgtd2lkdGg6IDI1NnB4O1xyXG4gIHdpZHRoOiAyNTZweDtcclxuICBtYXJnaW4tbGVmdDogMzBweDtcclxuICBtYXJnaW4tcmlnaHQ6IDMwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgYm94LXNoYWRvdzogMHB4IDI1cHggMzBweCAjNDg0ODQ4NDA7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkSGVhZGVyID0gc3R5bGVkLmRpdmBcclxuICBmb250LXNpemU6IDI2cHg7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMwMDNkNmE0MDtcclxuICBwYWRkaW5nLWJvdHRvbTogMzBweDtcclxuICBjb2xvcjogYmxhY2s7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkRGVzYyA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBmb250LXNpemU6IDIzcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBvcGFjaXR5OiAwLjc7XHJcbmA7XHJcblxyXG5jb25zdCBMT0RFUGF5Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgbWFyZ2luLXRvcDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMzYwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjgpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSAxMDAlXHJcbiAgKTtcclxuICBib3JkZXItcmFkaXVzOiAwIDAgMCAzMzBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXgtd2lkdGg6IDYwMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XHJcbiAgfVxyXG4gICR7Qmx1ZUJ1dHRvbn0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjI1cHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIG1hcmdpbi10b3A6IDE1MHB4O1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Q2FyZH0ge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gICAgfVxyXG4gICAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAgMCAwIDEzMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogSG9uZXN0IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQm9sZExpc3QgPSBzdHlsZWQudWxgYDtcclxuXHJcbmNvbnN0IEhvbmVzdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMTVweDtcclxuICBtYXJnaW4tdG9wOiAxMzVweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgei1pbmRleDogLTE7XHJcbiAgICByaWdodDogLTEwMHB4O1xyXG4gICAgdG9wOiAwO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgICYgPiBiIHtcclxuICAgICAgY29sb3I6ICNhNWE1YTU7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgbWF4LXdpZHRoOiA1MzBweDtcclxuICB9XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7Qm9sZExpc3R9IHtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICYgPiBsaSB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogNzVweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICByaWdodDogLTUwcHg7XHJcbiAgICAgIHRvcDogMTIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAmID4gJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDogNTB2dztcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjUlO1xyXG4gICAgICByaWdodDogLTcwcHg7XHJcbiAgICAgIHRvcDogMjIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWFyZ2luLXRvcDowO1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG9yZGVyOjE7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDcwcHg7XHJcbiAgICAgIG1heC13aWR0aDoxMDAlO1xyXG4gICAgfVxyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgb3JkZXI6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDUlO1xyXG4gICAgICByaWdodDogMyU7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICByaWdodDogLTclO1xyXG4gICAgICB0b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMTBweDtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBXb3JsZCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEdyZXkgPSBzdHlsZWQucGBcclxuICBjb2xvcjogZ3JleTtcclxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgV29ybGRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDExMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAyMDBweDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICBtaW4taGVpZ2h0OiA4NTBweDtcclxuXHJcbiAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IC03NTBweDtcclxuICAgIHRvcDogLTI4MHB4O1xyXG4gIH1cclxuXHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwMHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgICYgPiBiciB7XHJcbiAgICAgICAgZGlzcGxheTpub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNzAlO1xyXG4gICAgbGVmdDogLTI3JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA0MCU7XHJcbiAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICBsZWZ0OiAtMzclO1xyXG4gICAgICB0b3A6IDYwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTIwJTtcclxuICAgIGxlZnQ6IC02NiU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogR2xvYmFsIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgR2xvYmFsQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gIG1pbi1oZWlnaHQ6IDEwMDBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke1RleHRDb250YWluZXJ9IHtcclxuICAgIG1heC13aWR0aDogNTUwcHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IC0yMjBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6MTUwcHg7XHJcbiAgICBtaW4taGVpZ2h0OiA3MDBweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgcmlnaHQ6IC0xMDBweDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIHRvcDogaW5pdGlhbDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgICYgPiAke1RpdGxlfSB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgICAgfVxyXG4gICAgICAmID4gJHtQfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA1MHZ3O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICByaWdodDogMDtcclxuICAgICAgdG9wOiAyMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFmZmlsaWF0ZSBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFmZmlsaWF0ZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZDogdXJsKCR7YWZmaWxpYXRlQmd9KTtcclxuICBtaW4taGVpZ2h0OiAxMTAwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTcxcHggMDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG5cclxuICAke1Jvd30ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG4gICR7VGl0bGV9IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgJHtUcmFuc3BhcmVudEJ1dHRvbn0ge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgICBtaW4taGVpZ2h0OiA5MDBweDtcclxuICAgICYgPiAke1Jvd30ge1xyXG4gICAgICAmID4gJHtUaXRsZX0ge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG4iXX0= */\"));/* Global Container */var GlobalContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj27\",label:\"GlobalContainer\"})(\"padding-left:300px;position:relative;margin-top:80px;min-height:1000px;\",Title,\"{margin-bottom:40px;}\",P,\"{font-size:20px;line-height:30px;}\",TextContainer,\"{max-width:550px;}\",RightImage,\"{position:absolute;top:0;right:-220px;z-index:-1;}\",mq[3],\"{padding-left:150px;min-height:700px;\",RightImage,\"{width:60%;right:-100px;bottom:0;top:initial;}}\",mq[2],\"{padding-left:100px;\",TextContainer,\"{& > \",Title,\"{margin-top:80px;}& > \",P,\"{max-width:50vw;}}}\",mq[0],\"{padding-left:7%;padding-right:7%;\",RightImage,\"{position:relative;width:100%;right:0;top:20px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTg0QmtDIiwiZmlsZSI6IkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtYWd4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IFwiLi9pMThuXCI7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IGFneEhlcm9CZyBmcm9tIFwiLi4vaW1nL2hlcm9CRy5qcGdcIjtcclxuaW1wb3J0IGJsb2NrY2hhaW5CRyBmcm9tIFwiLi4vaW1nL2Jsb2NrY2hhaW4tYmcuanBnXCI7XHJcbmltcG9ydCBhZ3hMZWZ0SW1hZ2UgZnJvbSBcIi4uL2ltZy9hZ3gtY29pbi1sZWZ0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgYXV4UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2F1eC1jb2luLXJpZ2h0LWltYWdlLmpwZ1wiO1xyXG5pbXBvcnQgaG9uZXN0UmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2hvbmVzdFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCB3b3JsZExlZnRJbWFnZSBmcm9tIFwiLi4vaW1nL3dvcmxkTGVmdEltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgZ2xvYmFsUmlnaHRJbWFnZSBmcm9tIFwiLi4vaW1nL2dsb2JhbFJpZ2h0SW1hZ2UuanBnXCI7XHJcbmltcG9ydCBkb3dubG9hZEFwcFN0b3JlIGZyb20gXCIuLi9pbWcvZG93bmxvYWQtYXBwLXN0b3JlLnBuZ1wiO1xyXG5pbXBvcnQgZG93bmxvYWRHb29nbGVQbGF5IGZyb20gXCIuLi9pbWcvZG93bmxvYWQtZ29vZ2xlLXBsYXkucG5nXCI7XHJcbmltcG9ydCBhZmZpbGlhdGVCZyBmcm9tIFwiLi4vaW1nL2FmZmlsaWF0ZS1iZy1pbWFnZS5qcGdcIjtcclxuXHJcbi8qIEJyZWFrcG9pbnRzICovXHJcbmNvbnN0IGJyZWFrcG9pbnRzID0gWzU3NiwgNzY4LCAxMzIwLCAxNzIwXTtcclxuY29uc3QgbXEgPSBicmVha3BvaW50cy5tYXAoKGJwKSA9PiBgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnB9cHgpYCk7XHJcblxyXG5jb25zdCBQYWdlQUdYID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICByZXR1cm4gKFxyXG4gICAgPEFHWEFVWENvbnRpbmVyPlxyXG4gICAgICA8SGVyb0NvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICA8Yj5BR1ggJiBBVVg8L2I+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIE1vbmV5IE1hZGUgSG9uZXN0LlxyXG4gICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgPHA+XHJcbiAgICAgICAgICBCYWNrZWQgYnkgcHVyZSBTaWx2ZXIgJiBHb2xkLiA8YnIgLz5cclxuICAgICAgICAgIFBvd2VyZWQgYnkgYmxvY2tjaGFpbi5cclxuICAgICAgICA8L3A+XHJcbiAgICAgICAgPEI+XHJcbiAgICAgICAgICBUYWtlIGNvbnRyb2wgb2YgeW91ciBmaW5hbmNlcyB3aXRoIHNtYXJ0LCBzZWN1cmUsIGFuZCBzdGFibGUgbW9uZXkuXHJcbiAgICAgICAgPC9CPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkpvaW4gVG9kYXk8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgIDwvSGVyb0NvbnRhaW5lcj5cclxuICAgICAgPEJsb2NrY2hhaW5Db250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgQSA8Yj5CbG9ja2NoYWluLVBvd2VyZWQ8L2I+IE1vbmV0YXJ5IFN5c3RlbS5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxEaXNjbGFpbWVyPlxyXG4gICAgICAgICAgUmVpbnRyb2R1Y2luZyBhIHNhZmUtaGF2ZW4gZ29sZCAmIHNpbHZlciBhcyBtb25leSBhZ2Fpbi57XCIgXCJ9XHJcbiAgICAgICAgICA8Yj5Gb3IgZXZlcnlvbmUuPC9iPlxyXG4gICAgICAgIDwvRGlzY2xhaW1lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlN0YWJsZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBJbmZsYXRpb24tcmVzaXN0YW50IEFHWCAmIEFVWCBDb2lucyBhcmUgYmFja2VkIGJ5IGEgcmVzZXJ2ZSBvZlxyXG4gICAgICAgICAgICAgIHNlY3VyZWx5IHZhdWx0ZWQgZ29sZCBhbmQgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICAgIDxCbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgICA8Yj5JbnN0YW50PC9iPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgIFdpdGhpbiBzZWNvbmRzLCBzZW5kICYgcmVjZWl2ZSBtb25leSBnbG9iYWxseSBhdCBsb3dlciBmZWVzIHRoYW5cclxuICAgICAgICAgICAgICB0cmFkaXRpb25hbCBiYW5rcy5cclxuICAgICAgICAgICAgPC9CbG9ja2NoYWluVGlsZT5cclxuICAgICAgICAgICAgPEJsb2NrY2hhaW5UaWxlPlxyXG4gICAgICAgICAgICAgIDxiPlNlY3VyZTwvYj5cclxuICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICBUaGUgTE9ERVBheSBTeXN0ZW0gaXMgYnVpbHQgb24gc2VjdXJlIGJsb2NrY2hhaW4gcHJvdG9jb2xzIG1lYW50XHJcbiAgICAgICAgICAgICAgdG8gcHJlc2VydmUgeW91ciB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvQmxvY2tjaGFpblRpbGU+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxCPlxyXG4gICAgICAgICAgICBEaWdpdGFsIEFzc2V0cyBSZXN0b3JpbmcgUmVhbCBWYWx1ZSB0byA8Yj5Zb3VyIFdlYWx0aC48L2I+XHJcbiAgICAgICAgICA8L0I+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQmxvY2tjaGFpbkNvbnRhaW5lcj5cclxuICAgICAgPEFHWENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e2FneExlZnRJbWFnZX0gLz5cclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgICBUaGUgPGI+QUdYPC9iPiBDb2luLlxyXG4gICAgICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgICBFYWNoIEFHWCBDb2luIHJlcHJlc2VudHMgYSBvbmUgKDEpIGdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgc2lsdmVyIGJ1bGxpb24uXHJcbiAgICAgICAgICAgIDwvUD5cclxuICAgICAgICAgICAgPEJsdWVCdXR0b24+R2V0IEFHWCBOb3c8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgPC9BR1hDb250YWluZXI+XHJcbiAgICAgIDxBVVhDb250YWluZXI+XHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgIDxUZXh0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgICAgVGhlIDxiPkFVWDwvYj4gQ29pbi5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBVVggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBtaWxsaWdyYW0gd2VpZ2h0IG9mIHZhdWx0ZWQsXHJcbiAgICAgICAgICAgICAgYXVkaXRlZCwgaW5zdXJlZCwgYW5kIHZlcmlmaWFibGUgZ29sZCBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxCbHVlQnV0dG9uPkdldCBBVVggTm93PC9CbHVlQnV0dG9uPlxyXG4gICAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17YXV4UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9BVVhDb250YWluZXI+XHJcbiAgICAgIDxMT0RFUGF5Q29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFN3aXRjaCB0byA8Yj5MT0RFUGF5PC9iPiBpbiA0IFNpbXBsZSBTdGVwcy5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8Q2FyZD5cclxuICAgICAgICAgICAgPENhcmROdW1iZXI+MTwvQ2FyZE51bWJlcj5cclxuICAgICAgICAgICAgPENhcmRIZWFkZXI+RG93bmxvYWQgdGhlIExPREVQYXkgV2FsbGV0PC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgQXZhaWxhYmxlIGZvciBmcmVlIG9uIGRlc2t0b3AsIGlPUywgJiBBbmRyb2lkLiBObyBwZXJzb25hbFxyXG4gICAgICAgICAgICAgIGluZm9ybWF0aW9uIG9yIHJlZ2lzdHJhdGlvbiByZXF1aXJlZC5cclxuICAgICAgICAgICAgPC9DYXJkRGVzYz5cclxuICAgICAgICAgICAgPFByaW1hcnlCdXR0b24+TGVhcm4gTW9yZTwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgICA8Q2FyZE51bWJlcj4yPC9DYXJkTnVtYmVyPlxyXG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5TZXQgdXAgWW91ciBMT0RFIEFjY291bnQ8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBHZXQgeW91ciBhY2NvdW50IHZlcmlmaWVkIGluIG1pbnV0ZXMgdG8gc3RhcnQgdXNpbmcgaG9uZXN0IG1vbmV5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjM8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPkdldCBIb25lc3QgTW9uZXk8L0NhcmRIZWFkZXI+XHJcbiAgICAgICAgICAgIDxDYXJkRGVzYz5cclxuICAgICAgICAgICAgICBCdXkgeW91ciBBR1ggJiBBVVggd2l0aCBhbnkgZGViaXQgb3IgY3JlZGl0IGNhcmQuIFRoZW4gc2VuZCwgc3BlbmRcclxuICAgICAgICAgICAgICAmIHN0b3JlIHRoZW0gb24gdGhlIExPREVQYXkgV2FsbGV0LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgIDxDYXJkTnVtYmVyPjQ8L0NhcmROdW1iZXI+XHJcbiAgICAgICAgICAgIDxDYXJkSGVhZGVyPlNwcmVhZCBIb25lc3R5IGFuZCBnZXQgcGFpZCEgPC9DYXJkSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q2FyZERlc2M+XHJcbiAgICAgICAgICAgICAgU2hhcmUgeW91ciBhZmZpbGlhdGUgbGluayAmIHN0YXJ0IGVhcm5pbmcgYSBwYXNzaXZlIGluY29tZSBmb3JcclxuICAgICAgICAgICAgICBldmVyeSBwZXJzb24geW91IGludHJvZHVjZSB0byBMT0RFUGF5LlxyXG4gICAgICAgICAgICA8L0NhcmREZXNjPlxyXG4gICAgICAgICAgICA8UHJpbWFyeUJ1dHRvbj5MZWFybiBNb3JlPC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICAgICAgPC9DYXJkPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIDxCbHVlQnV0dG9uPlN3aXRjaCBUb2RheSE8L0JsdWVCdXR0b24+XHJcbiAgICAgIDwvTE9ERVBheUNvbnRhaW5lcj5cclxuICAgICAgPEhvbmVzdENvbnRhaW5lcj5cclxuICAgICAgICA8VGV4dENvbnRhaW5lcj5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgVGhlIEZ1dHVyZSBvZlxyXG4gICAgICAgICAgICA8YnIgLz4gQ29tbWVyY2UgaXMgPGI+SG9uZXN0LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5MT0RFUGF5IGhlbHBzIGJ1c2luZXNzZXMgZ3JvdyB3aXRoIEhvbmVzdCBNb25leS48L1A+XHJcbiAgICAgICAgICA8Qm9sZExpc3Q+XHJcbiAgICAgICAgICAgIDxsaT5Mb3cgY29zdCwgc2VjdXJlIHRyYW5zYWN0aW9uczwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5JbnN0YW50IHNldHRsZW1lbnRzPC9saT5cclxuICAgICAgICAgICAgPGxpPkEgZ2xvYmFsIG1hcmtldHBsYWNlIG9mIGVhZ2VyIGhvbmVzdC1tb25leSBzaG9wcGVycyE8L2xpPlxyXG4gICAgICAgICAgPC9Cb2xkTGlzdD5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICA8Yj5Eb24ndCBicmVhayBldmVuLCBCcmVhayBmcmVlLjwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkxPREVQYXkgQnVzaW5lc3M8L0JsdWVCdXR0b24+XHJcbiAgICAgICAgPC9UZXh0Q29udGFpbmVyPlxyXG4gICAgICAgIDxSaWdodEltYWdlIHNyYz17aG9uZXN0UmlnaHRJbWFnZX0gLz5cclxuICAgICAgPC9Ib25lc3RDb250YWluZXI+XHJcbiAgICAgIDxXb3JsZENvbnRhaW5lcj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPExlZnRJbWFnZSBzcmM9e3dvcmxkTGVmdEltYWdlfSAvPlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgICAgICAgIE9uZSBXYWxsZXQgQnJpZGdpbmcgPGJyIC8+YSA8Yj5Xb3JsZDwvYj4gb2YgT3Bwb3J0dW5pdGllcy5cclxuICAgICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgICAgRWFjaCBBR1ggQ29pbiByZXByZXNlbnRzIGEgb25lICgxKSBncmFtIHdlaWdodCBvZiB2YXVsdGVkLFxyXG4gICAgICAgICAgICAgIGF1ZGl0ZWQsIGluc3VyZWQsIGFuZCB2ZXJpZmlhYmxlIHNpbHZlciBidWxsaW9uLlxyXG4gICAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICAgIDxiPlNpbXBsZS48L2I+IFNlbmQgJiBzcGVuZCBzdHJhaWdodCBmcm9tIHlvdXIgcGhvbmUgYXMgZmFzdCBhc1xyXG4gICAgICAgICAgICAgIHNlbmRpbmcgYW4gU01TLiA8Yj5TZWN1cmUuPC9iPiBTYWZlLCBsb3ctY29zdCB0cmFuc2FjdGlvbnNcclxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgb24gYmxvY2tjaGFpbi4gPGI+U3RhYmxlLjwvYj4gUmVhbCBhc3NldHMsIHJlYWwgdmFsdWUsXHJcbiAgICAgICAgICAgICAgcmVhbCBtb25leS5cclxuICAgICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgICA8R3JleT5HZXQgWW91ciBMT0RFUGF5IFdhbGxldCBUb2RheSE8L0dyZXk+XHJcbiAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgPERvd25sb2FkQnV0dG9uIHNyYz17ZG93bmxvYWRBcHBTdG9yZX0gLz5cclxuICAgICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEdvb2dsZVBsYXl9IC8+XHJcbiAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvV29ybGRDb250YWluZXI+XHJcbiAgICAgIDxHbG9iYWxDb250YWluZXI+XHJcbiAgICAgICAgPFRleHRDb250YWluZXI+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEhvbmVzdCBNb25leSBmb3IgYSA8Yj5HbG9iYWwgQ29tbXVuaXR5LjwvYj5cclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgPGI+V2VsY29tZSB0byB0aGUgTE9ERVBheSBDb21tdW5pdHkuPC9iPiA8YnIgLz5cclxuICAgICAgICAgICAgQSBncm91cCBvZiBsaWtlLW1pbmRlZCBpbmRpdmlkdWFscyBkcml2ZW4gYnkgdGhlIGJlbGllZiA8YnIgLz5cclxuICAgICAgICAgICAgdGhhdCBldmVyeW9uZSBkZXNlcnZlcyB0byBleHBlcmllbmNle1wiIFwifVxyXG4gICAgICAgICAgICA8Yj5cclxuICAgICAgICAgICAgICBmaW5hbmNpYWwgPGJyIC8+XHJcbiAgICAgICAgICAgICAgZnJlZWRvbSAmIHN0YWJsZSB3ZWFsdGguXHJcbiAgICAgICAgICAgIDwvYj5cclxuICAgICAgICAgIDwvUD5cclxuICAgICAgICAgIDxCbHVlQnV0dG9uPkpvaW4gVG9kYXkhPC9CbHVlQnV0dG9uPlxyXG4gICAgICAgIDwvVGV4dENvbnRhaW5lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2dsb2JhbFJpZ2h0SW1hZ2V9IC8+XHJcbiAgICAgIDwvR2xvYmFsQ29udGFpbmVyPlxyXG4gICAgICA8QWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICAgIEV4cGFuZCB0aGUgQ2hhaW4sIDxiciAvPlxyXG4gICAgICAgICAgICBCZWNvbWUgYW4gQWZmaWxpYXRlIFRvZGF5LlxyXG4gICAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICAgIDxQPlxyXG4gICAgICAgICAgICBCZWNvbWUgYSBMT0RFUGF5IEFmZmlsaWF0ZSBhbmQgZW1wb3dlciB5b3VyIG5ldHdvcmsgd2l0aCBob25lc3RcclxuICAgICAgICAgICAgbW9uZXkuIDxiciAvPlxyXG4gICAgICAgICAgICA8Yj5FYXJuIGEgcGFzc2l2ZSBpbmNvbWUuIEhvbmVzdGx5LiA8L2I+XHJcbiAgICAgICAgICA8L1A+XHJcbiAgICAgICAgICA8VHJhbnNwYXJlbnRCdXR0b24+TGVhcm4gTW9yZTwvVHJhbnNwYXJlbnRCdXR0b24+XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICAgIDwvQWZmaWxpYXRlQ29udGFpbmVyPlxyXG4gICAgPC9BR1hBVVhDb250aW5lcj5cclxuICApO1xyXG59O1xyXG5cclxuLy8gQ29ubmVjdCB0aGUgSGVhZGVyIGNvbXBvbmVudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBgc3RhdGVgIGluIGl0J3MgYHByb3BzYFxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFBhZ2VBR1gpO1xyXG5cclxuLyogR2xvYmFsICovXHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiAyNDBweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkQnV0dG9uID0gc3R5bGVkLmltZ2BcclxuICB3aWR0aDogMTg4cHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICAke21xWzJdfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICB3aWR0aDogMTM3cHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgJHttcVsyXX0ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBSaWdodEltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuLyogSGVybyAqL1xyXG5cclxuY29uc3QgVGl0bGUgPSBzdHlsZWQuZGl2YFxyXG4gIGZvbnQtc2l6ZTogNTBweDtcclxuICBtYXgtd2lkdGg6IDc1MHB4O1xyXG4gIG1hcmdpbi10b3A6IDIwMHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAke21xWzNdfSB7XHJcbiAgICBmb250LXNpemU6IDUwcHg7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEIgPSBzdHlsZWQuYmBcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBmb250LXNpemU6IDI1cHg7XHJcbmA7XHJcblxyXG5jb25zdCBUcmFuc3BhcmVudEJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogbm9uZTtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcclxuICBwYWRkaW5nOiAxOHB4IDQ0cHg7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICBib3JkZXI6IDJweCBzb2xpZCAjMzE0NDUyO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIG1hcmdpbi1ib3R0b206IDMwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmx1ZUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXHJcbiAgYmFja2dyb3VuZDogIzM2YWFmZjtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XHJcbiAgcGFkZGluZzogMThweCA0NHB4O1xyXG4gIG1heC13aWR0aDogMjQwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgYm94LXNoYWRvdzogMHB4IDEzcHggMjBweCAjNDg0ODQ4NjA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbmA7XHJcblxyXG5jb25zdCBBR1hBVVhDb250aW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICMzMTQ0NTI7XHJcbiAgZm9udC1mYW1pbHk6IFwiUnViaWtcIjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEhlcm9Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7YWd4SGVyb0JnfSk7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICBtaW4taGVpZ2h0OiAxMjI4cHg7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLXRvcDogMzc1cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgJHttcVsyXX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDA7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIG1pbi1oZWlnaHQ6IGluaXRpYWw7XHJcbiAgICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogNjVweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogI2YyZjBmMztcclxuICB9XHJcbiAgJiA+IHAge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGZvbnQtc2l6ZTogMjVweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgfVxyXG4gICR7Qn0ge1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIG1heC13aWR0aDogNDI1cHg7XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDclO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBCbG9ja2NoYWluIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgRGlzY2xhaW1lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcblxyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQmxvY2tjaGFpblRpbGUgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogMzIwcHg7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBmb250LXNpemU6IDI1cHg7XHJcbiAgcGFkZGluZzogMzBweCAwO1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgJiA+IGIge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gIH1cclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcwNzA3MDtcclxuYDtcclxuXHJcbmNvbnN0IEJsb2NrY2hhaW5Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQ6IHVybCgke2Jsb2NrY2hhaW5CR30pO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTU1MHB4IDI2MHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDE1MHB4O1xyXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogMTc2MHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1hcmdpbi10b3A6IDE3NXB4O1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjJweDtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBmb250LXdlaWdodDogMzAwO1xyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke0Rpc2NsYWltZXJ9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgfVxyXG4gICR7Um93fSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzMDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgJiA+ICR7Qn0ge1xyXG4gICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtQcmltYXJ5QnV0dG9ufSB7XHJcbiAgICBtYXJnaW4tdG9wOiA3NXB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDAwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogMTMyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTQxMHB4IDI1MHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDIwMHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDA7XHJcbiAgICBtaW4taGVpZ2h0OiAxMjAwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtSb3d9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTUwcHg7XHJcbiAgICAgICR7Qn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogNDAwcHg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMDBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgICR7Um93fSB7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICYgPiBwIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA1MHB4O1xyXG4gICAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICAgICR7Qn0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Um93fSBkaXYgJHtCbG9ja2NoYWluVGlsZX0ge1xyXG4gICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNzBweDtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFHWCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFHWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAxMTUwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMzAwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMjAwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBib3JkZXItcmFkaXVzOiAwIDMzMHB4IDAgMDtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LCAyMjQsIDIyNCk7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMTgwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSA4MCVcclxuICApO1xyXG4gICR7UH0ge1xyXG4gICAgZm9udC1zaXplOiAyNXB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzNXB4O1xyXG4gIH1cclxuICAke0xlZnRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtNDMwcHg7XHJcbiAgICBsZWZ0OiAtNDgwcHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcclxuICAgIHBhZGRpbmctbGVmdDogODAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxNTBweDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA2MCU7XHJcbiAgICAgIHRvcDogLTIwMHB4O1xyXG4gICAgICBsZWZ0OiAtMjAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDozMzBweDtcclxuICAgIG1hcmdpbi1ib3R0b206MTIwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB0b3A6IC0xNjBweDtcclxuICAgICAgbWF4LXdpZHRoOiA1MTBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjcwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMjIwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6MDtcclxuICAgIH1cclxuICAgICR7TGVmdEltYWdlfXtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGxlZnQ6IC0xNCU7XHJcbiAgICAgIHRvcDogLTMzJTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy10b3A6IDIwMHB4O1xyXG4gICAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgIHRvcDogLTI5JTtcclxuICAgIGxlZnQ6IC0xOSU7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogQVVYIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgVGV4dENvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuXHJcbmNvbnN0IEFVWENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICBtYXgtd2lkdGg6IDUxMHB4O1xyXG4gIH1cclxuICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTEwMHB4O1xyXG4gICAgcmlnaHQ6IC0zMDBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHdpZHRoOiA1MCU7XHJcbiAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgcmlnaHQ6IC0xMDBweDtcclxuICAgICAgdG9wOiAwcHg7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDo1MCU7XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcmlnaHQ6IC01MHB4O1xyXG4gICAgdG9wOiA2MHB4O1xyXG4gICAgd2lkdGg6IDU1JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsxXX0ge1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246Y29sdW1uO1xyXG4gICAgcGFkZGluZy1sZWZ0OjA7XHJcbiAgICAke1Jvd30ge1xyXG4gICAgICBvcmRlcjoxO1xyXG4gICAgICBwYWRkaW5nLWxlZnQ6MTAwcHg7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIG1heC13aWR0aDogODAlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBvcmRlcjogMDtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgIHRvcDogNjBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiA3JTtcclxuICAgICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAgICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgICAgIHdpZHRoOjEwMCU7XHJcbiAgICAgICAgbWF4LXdpZHRoOjEwMCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBMT0RFUGF5IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQ2FyZE51bWJlciA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA1MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgYm9yZGVyLXJhZGl1czogODBweDtcclxuICBib3gtc2hhZG93OiAwcHggMTNweCAyMHB4ICM0ODQ4NDg2MDtcclxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAganVzdGlmeS1zZWxmOiBmbGV4LXN0YXJ0O1xyXG4gIHdpZHRoOiA2MHB4O1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IENhcmQgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XHJcbiAgcGFkZGluZzogMzVweDtcclxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICBjb2xvcjogIzViNWQ3ZTtcclxuICBtYXgtd2lkdGg6IDI1NnB4O1xyXG4gIHdpZHRoOiAyNTZweDtcclxuICBtYXJnaW4tbGVmdDogMzBweDtcclxuICBtYXJnaW4tcmlnaHQ6IDMwcHg7XHJcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgYm94LXNoYWRvdzogMHB4IDI1cHggMzBweCAjNDg0ODQ4NDA7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkSGVhZGVyID0gc3R5bGVkLmRpdmBcclxuICBmb250LXNpemU6IDI2cHg7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICMwMDNkNmE0MDtcclxuICBwYWRkaW5nLWJvdHRvbTogMzBweDtcclxuICBjb2xvcjogYmxhY2s7XHJcbmA7XHJcblxyXG5jb25zdCBDYXJkRGVzYyA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogMzBweDtcclxuICBmb250LXNpemU6IDIzcHg7XHJcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBvcGFjaXR5OiAwLjc7XHJcbmA7XHJcblxyXG5jb25zdCBMT0RFUGF5Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgbWFyZ2luLXRvcDogMzAwcHg7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMzYwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjgpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSAxMDAlXHJcbiAgKTtcclxuICBib3JkZXItcmFkaXVzOiAwIDAgMCAzMzBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXgtd2lkdGg6IDYwMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XHJcbiAgfVxyXG4gICR7Qmx1ZUJ1dHRvbn0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjI1cHg7XHJcbiAgfVxyXG4gICR7bXFbM119IHtcclxuICAgIG1hcmdpbi10b3A6IDE1MHB4O1xyXG4gICAgJHtSb3d9IHtcclxuICAgICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIH1cclxuICAgICR7Q2FyZH0ge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gICAgfVxyXG4gICAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDgwcHg7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke21xWzFdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAgMCAwIDEzMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogSG9uZXN0IENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgQm9sZExpc3QgPSBzdHlsZWQudWxgYDtcclxuXHJcbmNvbnN0IEhvbmVzdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMTVweDtcclxuICBtYXJnaW4tdG9wOiAxMzVweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgei1pbmRleDogLTE7XHJcbiAgICByaWdodDogLTEwMHB4O1xyXG4gICAgdG9wOiAwO1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgICYgPiBiIHtcclxuICAgICAgY29sb3I6ICNhNWE1YTU7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7VGV4dENvbnRhaW5lcn0ge1xyXG4gICAgbWF4LXdpZHRoOiA1MzBweDtcclxuICB9XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7Qm9sZExpc3R9IHtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgICYgPiBsaSB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcclxuICAgIH1cclxuICB9XHJcbiAgJHtCbHVlQnV0dG9ufSB7XHJcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1MHB4O1xyXG4gICAgbWFyZ2luLXRvcDogNzVweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICByaWdodDogLTUwcHg7XHJcbiAgICAgIHRvcDogMTIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAmID4gJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG1heC13aWR0aDogNTB2dztcclxuICAgIH1cclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjUlO1xyXG4gICAgICByaWdodDogLTcwcHg7XHJcbiAgICAgIHRvcDogMjIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgbWFyZ2luLXRvcDowO1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgIG9yZGVyOjE7XHJcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDcwcHg7XHJcbiAgICAgIG1heC13aWR0aDoxMDAlO1xyXG4gICAgfVxyXG4gICAgJHtSaWdodEltYWdlfSB7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgb3JkZXI6IDA7XHJcbiAgICAgIHdpZHRoOiAxMDUlO1xyXG4gICAgICByaWdodDogMyU7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICByaWdodDogLTclO1xyXG4gICAgICB0b3A6IDEwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMTBweDtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG4vKiBXb3JsZCBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEdyZXkgPSBzdHlsZWQucGBcclxuICBjb2xvcjogZ3JleTtcclxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgV29ybGRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDExMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAyMDBweDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICBtaW4taGVpZ2h0OiA4NTBweDtcclxuXHJcbiAgJHtMZWZ0SW1hZ2V9IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IC03NTBweDtcclxuICAgIHRvcDogLTI4MHB4O1xyXG4gIH1cclxuXHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDcwMHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTUwcHg7XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgICYgPiBiciB7XHJcbiAgICAgICAgZGlzcGxheTpub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNzAlO1xyXG4gICAgbGVmdDogLTI3JTtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA0MCU7XHJcbiAgICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogMTAwcHg7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgICBsZWZ0OiAtMzclO1xyXG4gICAgICB0b3A6IDYwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDEwMHB4O1xyXG4gIH1cclxuICAke21xWzBdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDclO1xyXG4gICAgcGFkZGluZy1yaWdodDogNyU7XHJcbiAgICAke0xlZnRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTIwJTtcclxuICAgIGxlZnQ6IC02NiU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB9XHJcbiAgICAke1RpdGxlfSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuLyogR2xvYmFsIENvbnRhaW5lciAqL1xyXG5cclxuY29uc3QgR2xvYmFsQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBtYXJnaW4tdG9wOiA4MHB4O1xyXG4gIG1pbi1oZWlnaHQ6IDEwMDBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke1B9IHtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAke1RleHRDb250YWluZXJ9IHtcclxuICAgIG1heC13aWR0aDogNTUwcHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgcmlnaHQ6IC0yMjBweDtcclxuICAgIHotaW5kZXg6IC0xO1xyXG4gIH1cclxuICAke21xWzNdfSB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6MTUwcHg7XHJcbiAgICBtaW4taGVpZ2h0OiA3MDBweDtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICB3aWR0aDogNjAlO1xyXG4gICAgcmlnaHQ6IC0xMDBweDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIHRvcDogaW5pdGlhbDtcclxuICAgIH1cclxuICB9XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OjEwMHB4O1xyXG4gICAgJHtUZXh0Q29udGFpbmVyfSB7XHJcbiAgICAgICYgPiAke1RpdGxlfSB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogODBweDtcclxuICAgICAgfVxyXG4gICAgICAmID4gJHtQfSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA1MHZ3O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICR7bXFbMF19IHtcclxuICAgIHBhZGRpbmctbGVmdDogNyU7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA3JTtcclxuICAgICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICByaWdodDogMDtcclxuICAgICAgdG9wOiAyMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbi8qIEFmZmlsaWF0ZSBDb250YWluZXIgKi9cclxuXHJcbmNvbnN0IEFmZmlsaWF0ZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZDogdXJsKCR7YWZmaWxpYXRlQmd9KTtcclxuICBtaW4taGVpZ2h0OiAxMTAwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTcxcHggMDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG5cclxuICAke1Jvd30ge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG4gICR7VGl0bGV9IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgJHtUcmFuc3BhcmVudEJ1dHRvbn0ge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgfVxyXG4gICR7bXFbMl19IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMDBweDtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgICBtaW4taGVpZ2h0OiA5MDBweDtcclxuICAgICYgPiAke1Jvd30ge1xyXG4gICAgICAmID4gJHtUaXRsZX0ge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG4iXX0= */\"));/* Affiliate Container */var AffiliateContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"ed1j7qj28\",label:\"AffiliateContainer\"})(\"background:url(\",_img_affiliate_bg_image_jpg__WEBPACK_IMPORTED_MODULE_14___default.a,\");min-height:1100px;text-align:center;color:white;background-position:-171px 0;background-repeat:no-repeat;\",Row,\"{flex-direction:column;align-items:center;}\",Title,\"{text-align:center;}\",TransparentButton,\"{border:1px solid white;color:white;}\",mq[2],\"{padding-left:100px;padding-right:100px;background-position:center;background-size:cover;min-height:900px;& > \",Row,\"{& > \",Title,\"{margin-top:100px;}}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/page-agx.js\n");

/***/ })

})