webpackHotUpdate("lode-corp",{

/***/ "./packages/mars-theme/src/components/page-vc.js":
/*!*******************************************************!*\
  !*** ./packages/mars-theme/src/components/page-vc.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _react_hook_media_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-hook/media-query */ \"./node_modules/@react-hook/media-query/dist/module/index.js\");\n/* harmony import */ var _component_accordion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component-accordion */ \"./packages/mars-theme/src/components/component-accordion.js\");\n/* harmony import */ var _download_buttons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./download-buttons */ \"./packages/mars-theme/src/components/download-buttons.js\");\n/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./i18n */ \"./packages/mars-theme/src/components/i18n.js\");\n/* harmony import */ var _img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../img/vc-hero.jpg */ \"./packages/mars-theme/src/img/vc-hero.jpg\");\n/* harmony import */ var _img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../img/icon-bars.png */ \"./packages/mars-theme/src/img/icon-bars.png\");\n/* harmony import */ var _img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _img_icon_card_png__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../img/icon-card.png */ \"./packages/mars-theme/src/img/icon-card.png\");\n/* harmony import */ var _img_icon_card_png__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_img_icon_card_png__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _img_icon_global_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../img/icon-global.png */ \"./packages/mars-theme/src/img/icon-global.png\");\n/* harmony import */ var _img_icon_global_png__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_img_icon_global_png__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../img/icon-withdraw.png */ \"./packages/mars-theme/src/img/icon-withdraw.png\");\n/* harmony import */ var _img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../img/Lodepay-tiles.jpg */ \"./packages/mars-theme/src/img/Lodepay-tiles.jpg\");\n/* harmony import */ var _img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../img/checkout-image.png */ \"./packages/mars-theme/src/img/checkout-image.png\");\n/* harmony import */ var _img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../img/market-tiles.png */ \"./packages/mars-theme/src/img/market-tiles.png\");\n/* harmony import */ var _img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../img/trio-background-circle.jpg */ \"./packages/mars-theme/src/img/trio-background-circle.jpg\");\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../img/background-future.jpg */ \"./packages/mars-theme/src/img/background-future.jpg\");\n/* harmony import */ var _img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _img_download_app_store_png__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../img/download-app-store.png */ \"./packages/mars-theme/src/img/download-app-store.png\");\n/* harmony import */ var _img_download_app_store_png__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_img_download_app_store_png__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _img_download_google_play_png__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../img/download-google-play.png */ \"./packages/mars-theme/src/img/download-google-play.png\");\n/* harmony import */ var _img_download_google_play_png__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_img_download_google_play_png__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/* Images *//* Breakpoints */var breakpoints=[576,768,1320,1720];var mq=breakpoints.map(bp=>\"@media (max-width: \".concat(bp,\"px)\"));var PageVC=(_ref)=>{var{state}=_ref;var{t,i18n}=Object(react_i18next__WEBPACK_IMPORTED_MODULE_3__[\"useTranslation\"])();var[setActive,setActiveState]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[setHeight,setHeightState]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"0px\");var content=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useRef\"])(null);function toggleAccordion(){setActiveState(setActive===\"\"?\"active\":\"\");setHeightState(setActive===\"active\"?\"0px\":\"\".concat(content.current.scrollHeight,\"px\"));}return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(VCContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(HeroContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Title,null,\"Spend digital gold & silver anywhere with the \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"b\",null,\"LODEpay\"),\" Virtual Card\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(HeroList,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"li\",null,\"Download the LODEpay Wallet\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"li\",null,\"Access Virtual Cards\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"li\",null,\"Spend AUX and AGX on Amazon, Apple, Nike & More!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(DownloadText,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(DownloadTextWrapper,null,\"It\\u2019s that simple.\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(LightGrey,null,\"Get Your Card Now.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(DownloadButton,{src:_img_download_app_store_png__WEBPACK_IMPORTED_MODULE_18___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(DownloadButton,{src:_img_download_google_play_png__WEBPACK_IMPORTED_MODULE_19___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconRow,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconIconLol,{src:_img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconText,null,\"Spend Gold \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"br\",null),\"& Silver\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconIconLol,{src:_img_icon_card_png__WEBPACK_IMPORTED_MODULE_10___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconText,null,\"Withdraw \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"br\",null),\"Cash\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconIconLol,{src:_img_icon_global_png__WEBPACK_IMPORTED_MODULE_11___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconText,null,\"MasterCard Privileges\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconIconLol,{src:_img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(IconText,null,\"Send & Spend Globally\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(LoadContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Title,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"b\",null,\"Load-up\"),\" in just a few steps\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(P,null,\"Spend your AGX and AUX Coins online or in-store on all your favorite brands.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(PrimaryButton,null,\"Create Account\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(CheckoutsContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Title,null,\"Making your checkouts a whole lot shinier\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(P,null,\"Load virtual cards* with AGX & AUX straight from your LODEPay Wallet.\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(CheckoutsList,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"li\",null,\"Top-up fee: 3% \"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"li\",null,\"Daily limit: US$500\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"li\",null,\"Holding limit: US$2,500\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"b\",null,\"It\\u2019s time to get more out of your money.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(PrimaryButton,null,\"Settle with Metal\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(CheckoutDisclaimer,null,\"*The Virtual Card Program is only available in the U.S. right now, with plans to expand to new markets soon.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(RightImage,{src:_img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(SpendingContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(LeftImage,{src:_img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Title,null,\"Start Spending Gold & Silver Instantly\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(P,null,\"Use LODEPay Virtual Cards on any online store that already accepts debit and credit cards.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(PrimaryButton,null,\"Spend Honest Money Now\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(LargeBgImage,{src:_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(FAQContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Title,null,\"Questions? \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"br\",null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"b\",null,\"We have answers!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"Where can I use LODEPay Virtual Cards? \",content:\"You can use the LODE Virtual Card for any online purchasing experience where cards are accepted\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"How can I get my virtual card set up?\",content:\"Download the mobile wallet on IOS or Google and apply (The virtual program is only available to US citizens at this time\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"Are there any loading limits on the virtual cards?\",content:\"The maximum load per day is $500 USD and a total card balance of $2000 at a given time.\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"Is there a maximum amount I can hold on my virtual card?\",content:\"there are no spending limits beyond what the hold balance allows\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(PrimaryButton,null,\"Get Your Card\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(FutureContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Title,null,\"The future of money starts here\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(P,null,\"Access your virtual cards and track purchases from one secure location: \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"br\",null),\"the LODEPay Wallet.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(P,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"b\",null,\"Start building wealth with\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"br\",null),\"honest money today!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Row,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(DownloadButton,{src:_img_download_app_store_png__WEBPACK_IMPORTED_MODULE_18___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(DownloadButton,{src:_img_download_google_play_png__WEBPACK_IMPORTED_MODULE_19___default.a}))));};// Connect the Header component to get access to the `state` in it's `props`\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(PageVC));/* Global */var DownloadButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u0\",label:\"DownloadButton\"})(\"width:188px;margin-right:15px;cursor:pointer;\",mq[2],\"{margin-bottom:10px;}\",mq[0],\"{width:137px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var Row=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u1\",label:\"Row\"})(\"display:flex;\",mq[2],\"{flex-direction:column;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var VCContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u2\",label:\"VCContainer\"})( false?undefined:{name:\"10kz0e2\",styles:\"color:#314452;font-family:\\\"Rubik\\\";\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Hero */var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u3\",label:\"Title\"})(\"font-size:60px;max-width:750px;margin-top:200px;font-weight:300;\",mq[1],\"{font-size:40px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var HeroContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u4\",label:\"HeroContainer\"})(\"display:flex;flex-direction:column;padding-left:300px;overflow:hidden;background-image:url(\",_img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8___default.a,\");background-repeat:no-repeat;\",mq[3],\"{padding-left:150px;background-position:-200px 0;}\",mq[2],\"{}\",mq[1],\"{}\",mq[0],\"{}\",Title,\"{margin-top:375px;\",mq[2],\"{}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var HeroList=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\",{target:\"e11ent4u5\",label:\"HeroList\"})( false?undefined:{name:\"c4iwmf\",styles:\"margin-top:40px;font-size:20px;font-weight:300;& > li{margin-top:10px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DownloadText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u6\",label:\"DownloadText\"})( false?undefined:{name:\"t36rws\",styles:\"margin-top:75px;font-size:22px;display:flex;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DownloadTextWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u7\",label:\"DownloadTextWrapper\"})( false?undefined:{name:\"8mg22s\",styles:\"margin-right:20px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LightGrey=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u8\",label:\"LightGrey\"})( false?undefined:{name:\"11uhjjr\",styles:\"color:#a5a5a5;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconRow=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u9\",label:\"IconRow\"})( false?undefined:{name:\"1sdfl9m\",styles:\"display:flex;max-width:750px;justify-content:space-between;margin-top:100px;margin-bottom:220px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u10\",label:\"IconContainer\"})( false?undefined:{name:\"hk64jw\",styles:\"display:flex;width:100%;flex-direction:column;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconIconLol=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u11\",label:\"IconIconLol\"})( false?undefined:{name:\"p6qudx\",styles:\"max-width:82px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u12\",label:\"IconText\"})( false?undefined:{name:\"15hdu9h\",styles:\"max-width:120px;font-size:16px;color:#9d9d9d;line-height:22px;margin-top:35px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Load-up */var LoadContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u13\",label:\"LoadContainer\"})(\"background-image:url(\",_img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13___default.a,\");padding-left:1000px;padding-bottom:750px;background-position:-200px 190px;padding-top:100px;background-repeat:no-repeat;\",Title,\"{margin-top:250px;max-width:360px;font-size:50px;}\",mq[3],\"{padding-left:700px;background-size:1320px;background-position:-50px -50px;padding-bottom:400px;padding-top:0;\",Title,\"{margin-top:100px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtdmMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNlJnQyIsImZpbGUiOiJDOlxcVXNlcnNcXEpvZWxzXFxEb2N1bWVudHNcXEF0b21pYzQ3XFxMT0RFXFxMT0RFIEhvbWVwYWdlXFxmcm9udGl0eVxcbG9kZS1jb3JwXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxwYWdlLXZjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSwgdXNlTWVkaWFRdWVyaWVzIH0gZnJvbSBcIkByZWFjdC1ob29rL21lZGlhLXF1ZXJ5XCI7XHJcbmltcG9ydCBBY2NvcmRpb24gZnJvbSBcIi4vY29tcG9uZW50LWFjY29yZGlvblwiO1xyXG5pbXBvcnQgRG93bmxvYWRCdXR0b25zIGZyb20gXCIuL2Rvd25sb2FkLWJ1dHRvbnNcIjtcclxuaW1wb3J0IFwiLi9pMThuXCI7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IHZjSGVyb0JnIGZyb20gXCIuLi9pbWcvdmMtaGVyby5qcGdcIjtcclxuaW1wb3J0IGJhcnNJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1iYXJzLnBuZ1wiO1xyXG5pbXBvcnQgY2FyZEljb24gZnJvbSBcIi4uL2ltZy9pY29uLWNhcmQucG5nXCI7XHJcbmltcG9ydCBnbG9iYWxJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1nbG9iYWwucG5nXCI7XHJcbmltcG9ydCB3aXRoZHJhd0ljb24gZnJvbSBcIi4uL2ltZy9pY29uLXdpdGhkcmF3LnBuZ1wiO1xyXG5pbXBvcnQgbG9kZXBheVRpbGVzQmcgZnJvbSBcIi4uL2ltZy9Mb2RlcGF5LXRpbGVzLmpwZ1wiO1xyXG5pbXBvcnQgY2hlY2tvdXRJbWFnZSBmcm9tIFwiLi4vaW1nL2NoZWNrb3V0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgbWFya2V0VGlsZXMgZnJvbSBcIi4uL2ltZy9tYXJrZXQtdGlsZXMucG5nXCI7XHJcbmltcG9ydCBsYXJnZUNpcmNsZUJnIGZyb20gXCIuLi9pbWcvdHJpby1iYWNrZ3JvdW5kLWNpcmNsZS5qcGdcIjtcclxuaW1wb3J0IGZ1dHVyZUJnIGZyb20gXCIuLi9pbWcvYmFja2dyb3VuZC1mdXR1cmUuanBnXCI7XHJcbmltcG9ydCBkb3dubG9hZEFwcFN0b3JlIGZyb20gXCIuLi9pbWcvZG93bmxvYWQtYXBwLXN0b3JlLnBuZ1wiXHJcbmltcG9ydCBkb3dubG9hZEdvb2dsZVBsYXkgZnJvbSBcIi4uL2ltZy9kb3dubG9hZC1nb29nbGUtcGxheS5wbmdcIlxyXG5cclxuLyogQnJlYWtwb2ludHMgKi9cclxuY29uc3QgYnJlYWtwb2ludHMgPSBbNTc2LCA3NjgsIDEzMjAsIDE3MjBdO1xyXG5jb25zdCBtcSA9IGJyZWFrcG9pbnRzLm1hcCgoYnApID0+IGBAbWVkaWEgKG1heC13aWR0aDogJHticH1weClgKTtcclxuXHJcbmNvbnN0IFBhZ2VWQyA9ICh7IHN0YXRlIH0pID0+IHtcclxuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XHJcbiAgY29uc3QgW3NldEFjdGl2ZSwgc2V0QWN0aXZlU3RhdGVdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgY29uc3QgW3NldEhlaWdodCwgc2V0SGVpZ2h0U3RhdGVdID0gdXNlU3RhdGUoXCIwcHhcIik7XHJcblxyXG4gIGNvbnN0IGNvbnRlbnQgPSB1c2VSZWYobnVsbCk7XHJcblxyXG4gIGZ1bmN0aW9uIHRvZ2dsZUFjY29yZGlvbigpIHtcclxuICAgIHNldEFjdGl2ZVN0YXRlKHNldEFjdGl2ZSA9PT0gXCJcIiA/IFwiYWN0aXZlXCIgOiBcIlwiKTtcclxuICAgIHNldEhlaWdodFN0YXRlKFxyXG4gICAgICBzZXRBY3RpdmUgPT09IFwiYWN0aXZlXCIgPyBcIjBweFwiIDogYCR7Y29udGVudC5jdXJyZW50LnNjcm9sbEhlaWdodH1weGBcclxuICAgICk7XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8VkNDb250YWluZXI+XHJcbiAgICAgIDxIZXJvQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFNwZW5kIGRpZ2l0YWwgZ29sZCAmIHNpbHZlciBhbnl3aGVyZSB3aXRoIHRoZSA8Yj5MT0RFcGF5PC9iPiBWaXJ0dWFsXHJcbiAgICAgICAgICBDYXJkXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8SGVyb0xpc3Q+XHJcbiAgICAgICAgICA8bGk+RG93bmxvYWQgdGhlIExPREVwYXkgV2FsbGV0PC9saT5cclxuICAgICAgICAgIDxsaT5BY2Nlc3MgVmlydHVhbCBDYXJkczwvbGk+XHJcbiAgICAgICAgICA8bGk+U3BlbmQgQVVYIGFuZCBBR1ggb24gQW1hem9uLCBBcHBsZSwgTmlrZSAmIE1vcmUhPC9saT5cclxuICAgICAgICA8L0hlcm9MaXN0PlxyXG4gICAgICAgIDxEb3dubG9hZFRleHQ+XHJcbiAgICAgICAgICA8RG93bmxvYWRUZXh0V3JhcHBlcj5cclxuICAgICAgICAgICAgSXTigJlzIHRoYXQgc2ltcGxlLlxyXG4gICAgICAgICAgICA8TGlnaHRHcmV5PkdldCBZb3VyIENhcmQgTm93LjwvTGlnaHRHcmV5PlxyXG4gICAgICAgICAgPC9Eb3dubG9hZFRleHRXcmFwcGVyPlxyXG4gICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEFwcFN0b3JlfSAvPjxEb3dubG9hZEJ1dHRvbiBzcmM9e2Rvd25sb2FkR29vZ2xlUGxheX0gLz5cclxuICAgICAgICA8L0Rvd25sb2FkVGV4dD5cclxuICAgICAgICA8SWNvblJvdz5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtiYXJzSWNvbn0gLz5cclxuICAgICAgICAgICAgPEljb25UZXh0PlxyXG4gICAgICAgICAgICAgIFNwZW5kIEdvbGQgPGJyIC8+JiBTaWx2ZXJcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtjYXJkSWNvbn0gLz5cclxuICAgICAgICAgICAgPEljb25UZXh0PlxyXG4gICAgICAgICAgICAgIFdpdGhkcmF3IDxiciAvPlxyXG4gICAgICAgICAgICAgIENhc2hcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtnbG9iYWxJY29ufSAvPlxyXG4gICAgICAgICAgICA8SWNvblRleHQ+TWFzdGVyQ2FyZCBQcml2aWxlZ2VzPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXt3aXRoZHJhd0ljb259IC8+XHJcbiAgICAgICAgICAgIDxJY29uVGV4dD5TZW5kICYgU3BlbmQgR2xvYmFsbHk8L0ljb25UZXh0PlxyXG4gICAgICAgICAgPC9JY29uQ29udGFpbmVyPlxyXG4gICAgICAgIDwvSWNvblJvdz5cclxuICAgICAgPC9IZXJvQ29udGFpbmVyPlxyXG4gICAgICA8TG9hZENvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICA8Yj5Mb2FkLXVwPC9iPiBpbiBqdXN0IGEgZmV3IHN0ZXBzXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8UD5cclxuICAgICAgICAgIFNwZW5kIHlvdXIgQUdYIGFuZCBBVVggQ29pbnMgb25saW5lIG9yIGluLXN0b3JlIG9uIGFsbCB5b3VyIGZhdm9yaXRlXHJcbiAgICAgICAgICBicmFuZHMuXHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkNyZWF0ZSBBY2NvdW50PC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICA8L0xvYWRDb250YWluZXI+XHJcbiAgICAgIDxDaGVja291dHNDb250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPk1ha2luZyB5b3VyIGNoZWNrb3V0cyBhIHdob2xlIGxvdCBzaGluaWVyPC9UaXRsZT5cclxuICAgICAgICA8UD5cclxuICAgICAgICAgIExvYWQgdmlydHVhbCBjYXJkcyogd2l0aCBBR1ggJiBBVVggc3RyYWlnaHQgZnJvbSB5b3VyIExPREVQYXkgV2FsbGV0LlxyXG4gICAgICAgICAgPENoZWNrb3V0c0xpc3Q+XHJcbiAgICAgICAgICAgIDxsaT5Ub3AtdXAgZmVlOiAzJSA8L2xpPlxyXG4gICAgICAgICAgICA8bGk+RGFpbHkgbGltaXQ6IFVTJDUwMDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5Ib2xkaW5nIGxpbWl0OiBVUyQyLDUwMDwvbGk+XHJcbiAgICAgICAgICA8L0NoZWNrb3V0c0xpc3Q+XHJcbiAgICAgICAgICA8Yj5JdOKAmXMgdGltZSB0byBnZXQgbW9yZSBvdXQgb2YgeW91ciBtb25leS48L2I+XHJcbiAgICAgICAgICA8UHJpbWFyeUJ1dHRvbj5TZXR0bGUgd2l0aCBNZXRhbDwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICA8L1A+XHJcbiAgICAgICAgPENoZWNrb3V0RGlzY2xhaW1lcj5cclxuICAgICAgICAgICpUaGUgVmlydHVhbCBDYXJkIFByb2dyYW0gaXMgb25seSBhdmFpbGFibGUgaW4gdGhlIFUuUy4gcmlnaHQgbm93LFxyXG4gICAgICAgICAgd2l0aCBwbGFucyB0byBleHBhbmQgdG8gbmV3IG1hcmtldHMgc29vbi5cclxuICAgICAgICA8L0NoZWNrb3V0RGlzY2xhaW1lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2NoZWNrb3V0SW1hZ2V9IC8+XHJcbiAgICAgIDwvQ2hlY2tvdXRzQ29udGFpbmVyPlxyXG4gICAgICA8U3BlbmRpbmdDb250YWluZXI+XHJcbiAgICAgICAgPExlZnRJbWFnZSBzcmM9e21hcmtldFRpbGVzfSAvPlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8VGl0bGU+U3RhcnQgU3BlbmRpbmcgR29sZCAmIFNpbHZlciBJbnN0YW50bHk8L1RpdGxlPlxyXG4gICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgIFVzZSBMT0RFUGF5IFZpcnR1YWwgQ2FyZHMgb24gYW55IG9ubGluZSBzdG9yZSB0aGF0IGFscmVhZHkgYWNjZXB0c1xyXG4gICAgICAgICAgICBkZWJpdCBhbmQgY3JlZGl0IGNhcmRzLlxyXG4gICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgPFByaW1hcnlCdXR0b24+U3BlbmQgSG9uZXN0IE1vbmV5IE5vdzwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8TGFyZ2VCZ0ltYWdlIHNyYz17bGFyZ2VDaXJjbGVCZ30gLz5cclxuICAgICAgPC9TcGVuZGluZ0NvbnRhaW5lcj5cclxuICAgICAgPEZBUUNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICBRdWVzdGlvbnM/IDxiciAvPlxyXG4gICAgICAgICAgPGI+V2UgaGF2ZSBhbnN3ZXJzITwvYj5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxBY2NvcmRpb25cclxuICAgICAgICAgIHRpdGxlPVwiV2hlcmUgY2FuIEkgdXNlIExPREVQYXkgVmlydHVhbCBDYXJkcz8gXCJcclxuICAgICAgICAgIGNvbnRlbnQ9XCJZb3UgY2FuIHVzZSB0aGUgTE9ERSBWaXJ0dWFsIENhcmQgZm9yIGFueSBvbmxpbmUgcHVyY2hhc2luZyBleHBlcmllbmNlIHdoZXJlIGNhcmRzIGFyZSBhY2NlcHRlZFwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QWNjb3JkaW9uXHJcbiAgICAgICAgICB0aXRsZT1cIkhvdyBjYW4gSSBnZXQgbXkgdmlydHVhbCBjYXJkIHNldCB1cD9cIlxyXG4gICAgICAgICAgY29udGVudD1cIkRvd25sb2FkIHRoZSBtb2JpbGUgd2FsbGV0IG9uIElPUyBvciBHb29nbGUgYW5kIGFwcGx5IChUaGUgdmlydHVhbCBwcm9ncmFtIGlzIG9ubHkgYXZhaWxhYmxlIHRvIFVTIGNpdGl6ZW5zIGF0IHRoaXMgdGltZVwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QWNjb3JkaW9uXHJcbiAgICAgICAgICB0aXRsZT1cIkFyZSB0aGVyZSBhbnkgbG9hZGluZyBsaW1pdHMgb24gdGhlIHZpcnR1YWwgY2FyZHM/XCJcclxuICAgICAgICAgIGNvbnRlbnQ9XCJUaGUgbWF4aW11bSBsb2FkIHBlciBkYXkgaXMgJDUwMCBVU0QgYW5kIGEgdG90YWwgY2FyZCBiYWxhbmNlIG9mICQyMDAwIGF0IGEgZ2l2ZW4gdGltZS5cIlxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEFjY29yZGlvblxyXG4gICAgICAgICAgdGl0bGU9XCJJcyB0aGVyZSBhIG1heGltdW0gYW1vdW50IEkgY2FuIGhvbGQgb24gbXkgdmlydHVhbCBjYXJkP1wiXHJcbiAgICAgICAgICBjb250ZW50PVwidGhlcmUgYXJlIG5vIHNwZW5kaW5nIGxpbWl0cyBiZXlvbmQgd2hhdCB0aGUgaG9sZCBiYWxhbmNlIGFsbG93c1wiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8UHJpbWFyeUJ1dHRvbj5HZXQgWW91ciBDYXJkPC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICA8L0ZBUUNvbnRhaW5lcj5cclxuICAgICAgPEZ1dHVyZUNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+VGhlIGZ1dHVyZSBvZiBtb25leSBzdGFydHMgaGVyZTwvVGl0bGU+XHJcbiAgICAgICAgPFA+XHJcbiAgICAgICAgICBBY2Nlc3MgeW91ciB2aXJ0dWFsIGNhcmRzIGFuZCB0cmFjayBwdXJjaGFzZXMgZnJvbSBvbmUgc2VjdXJlXHJcbiAgICAgICAgICBsb2NhdGlvbjogPGJyIC8+XHJcbiAgICAgICAgICB0aGUgTE9ERVBheSBXYWxsZXQuXHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgICAgPGI+XHJcbiAgICAgICAgICAgIFN0YXJ0IGJ1aWxkaW5nIHdlYWx0aCB3aXRoXHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICBob25lc3QgbW9uZXkgdG9kYXkhXHJcbiAgICAgICAgICA8L2I+XHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEFwcFN0b3JlfSAvPlxyXG4gICAgICAgICAgPERvd25sb2FkQnV0dG9uIHNyYz17ZG93bmxvYWRHb29nbGVQbGF5fSAvPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICA8L0Z1dHVyZUNvbnRhaW5lcj5cclxuICAgIDwvVkNDb250YWluZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIENvbm5lY3QgdGhlIEhlYWRlciBjb21wb25lbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgYHN0YXRlYCBpbiBpdCdzIGBwcm9wc2BcclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChQYWdlVkMpO1xyXG5cclxuLyogR2xvYmFsICovXHJcblxyXG5jb25zdCBEb3dubG9hZEJ1dHRvbiA9IHN0eWxlZC5pbWdgXHJcbiAgd2lkdGg6IDE4OHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMTVweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgd2lkdGg6IDEzN3B4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgIFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcblxyXG4gICR7bXFbMl19IHtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgVkNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiAjMzE0NDUyO1xyXG4gIGZvbnQtZmFtaWx5OiBcIlJ1YmlrXCI7XHJcbmA7XHJcblxyXG4vKiBIZXJvICovXHJcblxyXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA2MHB4O1xyXG4gIG1heC13aWR0aDogNzUwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAke21xWzFdfSB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgSGVyb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHt2Y0hlcm9CZ30pO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgJHttcVszXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxNTBweDtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0yMDBweCAwO1xyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzNzVweDtcclxuICAgICR7bXFbMl19IHtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBIZXJvTGlzdCA9IHN0eWxlZC51bGBcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gICYgPiBsaSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkVGV4dCA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogNzVweDtcclxuICBmb250LXNpemU6IDIycHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkVGV4dFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1hcmdpbi1yaWdodDogMjBweDtcclxuYDtcclxuXHJcbmNvbnN0IExpZ2h0R3JleSA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICNhNWE1YTU7XHJcbmA7XHJcblxyXG5jb25zdCBJY29uUm93ID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIG1heC13aWR0aDogNzUwcHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDIyMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgSWNvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICB3aWR0aDogMTAwJTtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG5gO1xyXG5cclxuY29uc3QgSWNvbkljb25Mb2wgPSBzdHlsZWQuaW1nYFxyXG4gIG1heC13aWR0aDogODJweDtcclxuYDtcclxuXHJcbmNvbnN0IEljb25UZXh0ID0gc3R5bGVkLmRpdmBcclxuICBtYXgtd2lkdGg6IDEyMHB4O1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBjb2xvcjogIzlkOWQ5ZDtcclxuICBsaW5lLWhlaWdodDogMjJweDtcclxuICBtYXJnaW4tdG9wOiAzNXB4O1xyXG5gO1xyXG5cclxuLyogTG9hZC11cCAqL1xyXG5cclxuY29uc3QgTG9hZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7bG9kZXBheVRpbGVzQmd9KTtcclxuICBwYWRkaW5nLWxlZnQ6IDEwMDBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogNzUwcHg7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDE5MHB4O1xyXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1hcmdpbi10b3A6IDI1MHB4O1xyXG4gICAgbWF4LXdpZHRoOiAzNjBweDtcclxuICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3MDBweDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogMTMyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTUwcHggLTUwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNDAwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gIGZvbnQtc2l6ZTogMjJweDtcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IFByaW1hcnlCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxyXG4gIGNvbG9yOiAjMzE0NDUyO1xyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xyXG4gIHBhZGRpbmc6IDE4cHggNDRweDtcclxuICBtYXgtd2lkdGg6IDI0MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG5gO1xyXG5cclxuLyogQ2hlY2tvdXRzICovXHJcblxyXG5jb25zdCBSaWdodEltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuY29uc3QgQ2hlY2tvdXRzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDAgMzMwcHggMCAwO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogc3BhY2UtYmV0d2VlbjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LCAyMjQsIDIyNCk7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMTgwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSA4MCVcclxuICApO1xyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDUwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjc1cHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDMwcHg7XHJcbiAgICB0b3A6IDE4MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IENoZWNrb3V0c0xpc3QgPSBzdHlsZWQudWxgXHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICAmID4gbGkge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBDaGVja291dERpc2NsYWltZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogNDAwcHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xyXG5gO1xyXG5cclxuLyogU3BlbmRpbmcgKi9cclxuXHJcbmNvbnN0IFNwZW5kaW5nQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBtYXJnaW4tdG9wOiAzNTBweDtcclxuICBtYXJnaW4tYm90dG9tOiAyMDBweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAmID4gZGl2IHtcclxuICAgICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgICBmb250LXNpemU6IDQ1cHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgTGFyZ2VCZ0ltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgei1pbmRleDogLTE7XHJcbiAgd2lkdGg6IDIwNzNweDtcclxuICB0b3A6IC04MDBweDtcclxuICBsZWZ0OiAtODEwcHg7XHJcbmA7XHJcblxyXG4vKiBGQVEgKi9cclxuXHJcbmNvbnN0IEZBUUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAzMDBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcwNzA3MDtcclxuICAgIG1heC13aWR0aDogaW5pdGlhbDtcclxuICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1hcmdpbi10b3A6IDYwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMDBweDtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBUaGUgRnV0dXJlICovXHJcblxyXG5jb25zdCBGdXR1cmVDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2Z1dHVyZUJnfSk7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIHBhZGRpbmctdG9wOiAyODBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMjgwcHg7XHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIGZvbnQtc2l6ZTogNDZweDtcclxuICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgfVxyXG4gICR7UH0ge1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgfVxyXG4gICYgJHtSb3d9ID4gJHtEb3dubG9hZEJ1dHRvbn0ge1xyXG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDIpO1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbmA7XHJcbiJdfQ== */\"));var P=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e11ent4u14\",label:\"P\"})( false?undefined:{name:\"tksp8l\",styles:\"font-size:22px;max-width:450px;font-weight:300;margin-top:40px;line-height:30px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var PrimaryButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e11ent4u15\",label:\"PrimaryButton\"})( false?undefined:{name:\"nzc48v\",styles:\"color:#314452;background:white;border:none;border-radius:30px;padding:18px 44px;max-width:240px;font-weight:600;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:40px;cursor:pointer;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Checkouts */var RightImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u16\",label:\"RightImage\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var CheckoutsContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u17\",label:\"CheckoutsContainer\"})(\"padding-left:300px;border-radius:0 330px 0 0;display:flex;flex-direction:column;align-items:space-between;position:relative;overflow:hidden;background:rgb(224,224,224);background:linear-gradient( 180deg,rgba(224,224,224,0.9) 0%,rgba(243,243,252,0) 80% );\",mq[3],\"{padding-left:100px;\",RightImage,\"{width:500px;}}\",PrimaryButton,\"{max-width:500px;margin-bottom:50px;}\",Title,\"{font-size:48px;max-width:500px;margin-top:275px;}\",RightImage,\"{position:absolute;right:30px;top:180px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var CheckoutsList=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\",{target:\"e11ent4u18\",label:\"CheckoutsList\"})( false?undefined:{name:\"isifv6\",styles:\"margin-bottom:40px;& > li{margin-top:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CheckoutDisclaimer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u19\",label:\"CheckoutDisclaimer\"})( false?undefined:{name:\"9dj73s\",styles:\"max-width:400px;padding-bottom:100px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtdmMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMFhxQyIsImZpbGUiOiJDOlxcVXNlcnNcXEpvZWxzXFxEb2N1bWVudHNcXEF0b21pYzQ3XFxMT0RFXFxMT0RFIEhvbWVwYWdlXFxmcm9udGl0eVxcbG9kZS1jb3JwXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxwYWdlLXZjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSBcInJlYWN0LWkxOG5leHRcIjtcclxuaW1wb3J0IHsgdXNlTWVkaWFRdWVyeSwgdXNlTWVkaWFRdWVyaWVzIH0gZnJvbSBcIkByZWFjdC1ob29rL21lZGlhLXF1ZXJ5XCI7XHJcbmltcG9ydCBBY2NvcmRpb24gZnJvbSBcIi4vY29tcG9uZW50LWFjY29yZGlvblwiO1xyXG5pbXBvcnQgRG93bmxvYWRCdXR0b25zIGZyb20gXCIuL2Rvd25sb2FkLWJ1dHRvbnNcIjtcclxuaW1wb3J0IFwiLi9pMThuXCI7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IHZjSGVyb0JnIGZyb20gXCIuLi9pbWcvdmMtaGVyby5qcGdcIjtcclxuaW1wb3J0IGJhcnNJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1iYXJzLnBuZ1wiO1xyXG5pbXBvcnQgY2FyZEljb24gZnJvbSBcIi4uL2ltZy9pY29uLWNhcmQucG5nXCI7XHJcbmltcG9ydCBnbG9iYWxJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1nbG9iYWwucG5nXCI7XHJcbmltcG9ydCB3aXRoZHJhd0ljb24gZnJvbSBcIi4uL2ltZy9pY29uLXdpdGhkcmF3LnBuZ1wiO1xyXG5pbXBvcnQgbG9kZXBheVRpbGVzQmcgZnJvbSBcIi4uL2ltZy9Mb2RlcGF5LXRpbGVzLmpwZ1wiO1xyXG5pbXBvcnQgY2hlY2tvdXRJbWFnZSBmcm9tIFwiLi4vaW1nL2NoZWNrb3V0LWltYWdlLnBuZ1wiO1xyXG5pbXBvcnQgbWFya2V0VGlsZXMgZnJvbSBcIi4uL2ltZy9tYXJrZXQtdGlsZXMucG5nXCI7XHJcbmltcG9ydCBsYXJnZUNpcmNsZUJnIGZyb20gXCIuLi9pbWcvdHJpby1iYWNrZ3JvdW5kLWNpcmNsZS5qcGdcIjtcclxuaW1wb3J0IGZ1dHVyZUJnIGZyb20gXCIuLi9pbWcvYmFja2dyb3VuZC1mdXR1cmUuanBnXCI7XHJcbmltcG9ydCBkb3dubG9hZEFwcFN0b3JlIGZyb20gXCIuLi9pbWcvZG93bmxvYWQtYXBwLXN0b3JlLnBuZ1wiXHJcbmltcG9ydCBkb3dubG9hZEdvb2dsZVBsYXkgZnJvbSBcIi4uL2ltZy9kb3dubG9hZC1nb29nbGUtcGxheS5wbmdcIlxyXG5cclxuLyogQnJlYWtwb2ludHMgKi9cclxuY29uc3QgYnJlYWtwb2ludHMgPSBbNTc2LCA3NjgsIDEzMjAsIDE3MjBdO1xyXG5jb25zdCBtcSA9IGJyZWFrcG9pbnRzLm1hcCgoYnApID0+IGBAbWVkaWEgKG1heC13aWR0aDogJHticH1weClgKTtcclxuXHJcbmNvbnN0IFBhZ2VWQyA9ICh7IHN0YXRlIH0pID0+IHtcclxuICBjb25zdCB7IHQsIGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKCk7XHJcbiAgY29uc3QgW3NldEFjdGl2ZSwgc2V0QWN0aXZlU3RhdGVdID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgY29uc3QgW3NldEhlaWdodCwgc2V0SGVpZ2h0U3RhdGVdID0gdXNlU3RhdGUoXCIwcHhcIik7XHJcblxyXG4gIGNvbnN0IGNvbnRlbnQgPSB1c2VSZWYobnVsbCk7XHJcblxyXG4gIGZ1bmN0aW9uIHRvZ2dsZUFjY29yZGlvbigpIHtcclxuICAgIHNldEFjdGl2ZVN0YXRlKHNldEFjdGl2ZSA9PT0gXCJcIiA/IFwiYWN0aXZlXCIgOiBcIlwiKTtcclxuICAgIHNldEhlaWdodFN0YXRlKFxyXG4gICAgICBzZXRBY3RpdmUgPT09IFwiYWN0aXZlXCIgPyBcIjBweFwiIDogYCR7Y29udGVudC5jdXJyZW50LnNjcm9sbEhlaWdodH1weGBcclxuICAgICk7XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8VkNDb250YWluZXI+XHJcbiAgICAgIDxIZXJvQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFNwZW5kIGRpZ2l0YWwgZ29sZCAmIHNpbHZlciBhbnl3aGVyZSB3aXRoIHRoZSA8Yj5MT0RFcGF5PC9iPiBWaXJ0dWFsXHJcbiAgICAgICAgICBDYXJkXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8SGVyb0xpc3Q+XHJcbiAgICAgICAgICA8bGk+RG93bmxvYWQgdGhlIExPREVwYXkgV2FsbGV0PC9saT5cclxuICAgICAgICAgIDxsaT5BY2Nlc3MgVmlydHVhbCBDYXJkczwvbGk+XHJcbiAgICAgICAgICA8bGk+U3BlbmQgQVVYIGFuZCBBR1ggb24gQW1hem9uLCBBcHBsZSwgTmlrZSAmIE1vcmUhPC9saT5cclxuICAgICAgICA8L0hlcm9MaXN0PlxyXG4gICAgICAgIDxEb3dubG9hZFRleHQ+XHJcbiAgICAgICAgICA8RG93bmxvYWRUZXh0V3JhcHBlcj5cclxuICAgICAgICAgICAgSXTigJlzIHRoYXQgc2ltcGxlLlxyXG4gICAgICAgICAgICA8TGlnaHRHcmV5PkdldCBZb3VyIENhcmQgTm93LjwvTGlnaHRHcmV5PlxyXG4gICAgICAgICAgPC9Eb3dubG9hZFRleHRXcmFwcGVyPlxyXG4gICAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEFwcFN0b3JlfSAvPjxEb3dubG9hZEJ1dHRvbiBzcmM9e2Rvd25sb2FkR29vZ2xlUGxheX0gLz5cclxuICAgICAgICA8L0Rvd25sb2FkVGV4dD5cclxuICAgICAgICA8SWNvblJvdz5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtiYXJzSWNvbn0gLz5cclxuICAgICAgICAgICAgPEljb25UZXh0PlxyXG4gICAgICAgICAgICAgIFNwZW5kIEdvbGQgPGJyIC8+JiBTaWx2ZXJcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtjYXJkSWNvbn0gLz5cclxuICAgICAgICAgICAgPEljb25UZXh0PlxyXG4gICAgICAgICAgICAgIFdpdGhkcmF3IDxiciAvPlxyXG4gICAgICAgICAgICAgIENhc2hcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtnbG9iYWxJY29ufSAvPlxyXG4gICAgICAgICAgICA8SWNvblRleHQ+TWFzdGVyQ2FyZCBQcml2aWxlZ2VzPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXt3aXRoZHJhd0ljb259IC8+XHJcbiAgICAgICAgICAgIDxJY29uVGV4dD5TZW5kICYgU3BlbmQgR2xvYmFsbHk8L0ljb25UZXh0PlxyXG4gICAgICAgICAgPC9JY29uQ29udGFpbmVyPlxyXG4gICAgICAgIDwvSWNvblJvdz5cclxuICAgICAgPC9IZXJvQ29udGFpbmVyPlxyXG4gICAgICA8TG9hZENvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICA8Yj5Mb2FkLXVwPC9iPiBpbiBqdXN0IGEgZmV3IHN0ZXBzXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8UD5cclxuICAgICAgICAgIFNwZW5kIHlvdXIgQUdYIGFuZCBBVVggQ29pbnMgb25saW5lIG9yIGluLXN0b3JlIG9uIGFsbCB5b3VyIGZhdm9yaXRlXHJcbiAgICAgICAgICBicmFuZHMuXHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkNyZWF0ZSBBY2NvdW50PC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICA8L0xvYWRDb250YWluZXI+XHJcbiAgICAgIDxDaGVja291dHNDb250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPk1ha2luZyB5b3VyIGNoZWNrb3V0cyBhIHdob2xlIGxvdCBzaGluaWVyPC9UaXRsZT5cclxuICAgICAgICA8UD5cclxuICAgICAgICAgIExvYWQgdmlydHVhbCBjYXJkcyogd2l0aCBBR1ggJiBBVVggc3RyYWlnaHQgZnJvbSB5b3VyIExPREVQYXkgV2FsbGV0LlxyXG4gICAgICAgICAgPENoZWNrb3V0c0xpc3Q+XHJcbiAgICAgICAgICAgIDxsaT5Ub3AtdXAgZmVlOiAzJSA8L2xpPlxyXG4gICAgICAgICAgICA8bGk+RGFpbHkgbGltaXQ6IFVTJDUwMDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5Ib2xkaW5nIGxpbWl0OiBVUyQyLDUwMDwvbGk+XHJcbiAgICAgICAgICA8L0NoZWNrb3V0c0xpc3Q+XHJcbiAgICAgICAgICA8Yj5JdOKAmXMgdGltZSB0byBnZXQgbW9yZSBvdXQgb2YgeW91ciBtb25leS48L2I+XHJcbiAgICAgICAgICA8UHJpbWFyeUJ1dHRvbj5TZXR0bGUgd2l0aCBNZXRhbDwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICA8L1A+XHJcbiAgICAgICAgPENoZWNrb3V0RGlzY2xhaW1lcj5cclxuICAgICAgICAgICpUaGUgVmlydHVhbCBDYXJkIFByb2dyYW0gaXMgb25seSBhdmFpbGFibGUgaW4gdGhlIFUuUy4gcmlnaHQgbm93LFxyXG4gICAgICAgICAgd2l0aCBwbGFucyB0byBleHBhbmQgdG8gbmV3IG1hcmtldHMgc29vbi5cclxuICAgICAgICA8L0NoZWNrb3V0RGlzY2xhaW1lcj5cclxuICAgICAgICA8UmlnaHRJbWFnZSBzcmM9e2NoZWNrb3V0SW1hZ2V9IC8+XHJcbiAgICAgIDwvQ2hlY2tvdXRzQ29udGFpbmVyPlxyXG4gICAgICA8U3BlbmRpbmdDb250YWluZXI+XHJcbiAgICAgICAgPExlZnRJbWFnZSBzcmM9e21hcmtldFRpbGVzfSAvPlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8VGl0bGU+U3RhcnQgU3BlbmRpbmcgR29sZCAmIFNpbHZlciBJbnN0YW50bHk8L1RpdGxlPlxyXG4gICAgICAgICAgPFA+XHJcbiAgICAgICAgICAgIFVzZSBMT0RFUGF5IFZpcnR1YWwgQ2FyZHMgb24gYW55IG9ubGluZSBzdG9yZSB0aGF0IGFscmVhZHkgYWNjZXB0c1xyXG4gICAgICAgICAgICBkZWJpdCBhbmQgY3JlZGl0IGNhcmRzLlxyXG4gICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgPFByaW1hcnlCdXR0b24+U3BlbmQgSG9uZXN0IE1vbmV5IE5vdzwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8TGFyZ2VCZ0ltYWdlIHNyYz17bGFyZ2VDaXJjbGVCZ30gLz5cclxuICAgICAgPC9TcGVuZGluZ0NvbnRhaW5lcj5cclxuICAgICAgPEZBUUNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+XHJcbiAgICAgICAgICBRdWVzdGlvbnM/IDxiciAvPlxyXG4gICAgICAgICAgPGI+V2UgaGF2ZSBhbnN3ZXJzITwvYj5cclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxBY2NvcmRpb25cclxuICAgICAgICAgIHRpdGxlPVwiV2hlcmUgY2FuIEkgdXNlIExPREVQYXkgVmlydHVhbCBDYXJkcz8gXCJcclxuICAgICAgICAgIGNvbnRlbnQ9XCJZb3UgY2FuIHVzZSB0aGUgTE9ERSBWaXJ0dWFsIENhcmQgZm9yIGFueSBvbmxpbmUgcHVyY2hhc2luZyBleHBlcmllbmNlIHdoZXJlIGNhcmRzIGFyZSBhY2NlcHRlZFwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QWNjb3JkaW9uXHJcbiAgICAgICAgICB0aXRsZT1cIkhvdyBjYW4gSSBnZXQgbXkgdmlydHVhbCBjYXJkIHNldCB1cD9cIlxyXG4gICAgICAgICAgY29udGVudD1cIkRvd25sb2FkIHRoZSBtb2JpbGUgd2FsbGV0IG9uIElPUyBvciBHb29nbGUgYW5kIGFwcGx5IChUaGUgdmlydHVhbCBwcm9ncmFtIGlzIG9ubHkgYXZhaWxhYmxlIHRvIFVTIGNpdGl6ZW5zIGF0IHRoaXMgdGltZVwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QWNjb3JkaW9uXHJcbiAgICAgICAgICB0aXRsZT1cIkFyZSB0aGVyZSBhbnkgbG9hZGluZyBsaW1pdHMgb24gdGhlIHZpcnR1YWwgY2FyZHM/XCJcclxuICAgICAgICAgIGNvbnRlbnQ9XCJUaGUgbWF4aW11bSBsb2FkIHBlciBkYXkgaXMgJDUwMCBVU0QgYW5kIGEgdG90YWwgY2FyZCBiYWxhbmNlIG9mICQyMDAwIGF0IGEgZ2l2ZW4gdGltZS5cIlxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEFjY29yZGlvblxyXG4gICAgICAgICAgdGl0bGU9XCJJcyB0aGVyZSBhIG1heGltdW0gYW1vdW50IEkgY2FuIGhvbGQgb24gbXkgdmlydHVhbCBjYXJkP1wiXHJcbiAgICAgICAgICBjb250ZW50PVwidGhlcmUgYXJlIG5vIHNwZW5kaW5nIGxpbWl0cyBiZXlvbmQgd2hhdCB0aGUgaG9sZCBiYWxhbmNlIGFsbG93c1wiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8UHJpbWFyeUJ1dHRvbj5HZXQgWW91ciBDYXJkPC9QcmltYXJ5QnV0dG9uPlxyXG4gICAgICA8L0ZBUUNvbnRhaW5lcj5cclxuICAgICAgPEZ1dHVyZUNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+VGhlIGZ1dHVyZSBvZiBtb25leSBzdGFydHMgaGVyZTwvVGl0bGU+XHJcbiAgICAgICAgPFA+XHJcbiAgICAgICAgICBBY2Nlc3MgeW91ciB2aXJ0dWFsIGNhcmRzIGFuZCB0cmFjayBwdXJjaGFzZXMgZnJvbSBvbmUgc2VjdXJlXHJcbiAgICAgICAgICBsb2NhdGlvbjogPGJyIC8+XHJcbiAgICAgICAgICB0aGUgTE9ERVBheSBXYWxsZXQuXHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgICAgPGI+XHJcbiAgICAgICAgICAgIFN0YXJ0IGJ1aWxkaW5nIHdlYWx0aCB3aXRoXHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICBob25lc3QgbW9uZXkgdG9kYXkhXHJcbiAgICAgICAgICA8L2I+XHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxSb3c+XHJcbiAgICAgICAgICA8RG93bmxvYWRCdXR0b24gc3JjPXtkb3dubG9hZEFwcFN0b3JlfSAvPlxyXG4gICAgICAgICAgPERvd25sb2FkQnV0dG9uIHNyYz17ZG93bmxvYWRHb29nbGVQbGF5fSAvPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICA8L0Z1dHVyZUNvbnRhaW5lcj5cclxuICAgIDwvVkNDb250YWluZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIENvbm5lY3QgdGhlIEhlYWRlciBjb21wb25lbnQgdG8gZ2V0IGFjY2VzcyB0byB0aGUgYHN0YXRlYCBpbiBpdCdzIGBwcm9wc2BcclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChQYWdlVkMpO1xyXG5cclxuLyogR2xvYmFsICovXHJcblxyXG5jb25zdCBEb3dubG9hZEJ1dHRvbiA9IHN0eWxlZC5pbWdgXHJcbiAgd2lkdGg6IDE4OHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMTVweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgJHttcVsyXX0ge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gICAgd2lkdGg6IDEzN3B4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFJvdyA9IHN0eWxlZC5kaXZgIFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcblxyXG4gICR7bXFbMl19IHtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgVkNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiAjMzE0NDUyO1xyXG4gIGZvbnQtZmFtaWx5OiBcIlJ1YmlrXCI7XHJcbmA7XHJcblxyXG4vKiBIZXJvICovXHJcblxyXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5kaXZgXHJcbiAgZm9udC1zaXplOiA2MHB4O1xyXG4gIG1heC13aWR0aDogNzUwcHg7XHJcbiAgbWFyZ2luLXRvcDogMjAwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICAke21xWzFdfSB7XHJcbiAgICBmb250LXNpemU6IDQwcHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgSGVyb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHt2Y0hlcm9CZ30pO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgJHttcVszXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxNTBweDtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0yMDBweCAwO1xyXG4gIH1cclxuICAke21xWzJdfSB7XHJcbiAgfVxyXG4gICR7bXFbMV19IHtcclxuICB9XHJcbiAgJHttcVswXX0ge1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBtYXJnaW4tdG9wOiAzNzVweDtcclxuICAgICR7bXFbMl19IHtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBIZXJvTGlzdCA9IHN0eWxlZC51bGBcclxuICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gICYgPiBsaSB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkVGV4dCA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luLXRvcDogNzVweDtcclxuICBmb250LXNpemU6IDIycHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuYDtcclxuXHJcbmNvbnN0IERvd25sb2FkVGV4dFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1hcmdpbi1yaWdodDogMjBweDtcclxuYDtcclxuXHJcbmNvbnN0IExpZ2h0R3JleSA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICNhNWE1YTU7XHJcbmA7XHJcblxyXG5jb25zdCBJY29uUm93ID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIG1heC13aWR0aDogNzUwcHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIG1hcmdpbi10b3A6IDEwMHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDIyMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgSWNvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICB3aWR0aDogMTAwJTtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG5gO1xyXG5cclxuY29uc3QgSWNvbkljb25Mb2wgPSBzdHlsZWQuaW1nYFxyXG4gIG1heC13aWR0aDogODJweDtcclxuYDtcclxuXHJcbmNvbnN0IEljb25UZXh0ID0gc3R5bGVkLmRpdmBcclxuICBtYXgtd2lkdGg6IDEyMHB4O1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBjb2xvcjogIzlkOWQ5ZDtcclxuICBsaW5lLWhlaWdodDogMjJweDtcclxuICBtYXJnaW4tdG9wOiAzNXB4O1xyXG5gO1xyXG5cclxuLyogTG9hZC11cCAqL1xyXG5cclxuY29uc3QgTG9hZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7bG9kZXBheVRpbGVzQmd9KTtcclxuICBwYWRkaW5nLWxlZnQ6IDEwMDBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogNzUwcHg7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDE5MHB4O1xyXG4gIHBhZGRpbmctdG9wOiAxMDBweDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIG1hcmdpbi10b3A6IDI1MHB4O1xyXG4gICAgbWF4LXdpZHRoOiAzNjBweDtcclxuICAgIGZvbnQtc2l6ZTogNTBweDtcclxuICB9XHJcbiAgJHttcVszXX0ge1xyXG4gICAgcGFkZGluZy1sZWZ0OiA3MDBweDtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogMTMyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTUwcHggLTUwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNDAwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMDtcclxuICAgICR7VGl0bGV9IHtcclxuICAgICAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gIGZvbnQtc2l6ZTogMjJweDtcclxuICBtYXgtd2lkdGg6IDQ1MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBsaW5lLWhlaWdodDogMzBweDtcclxuYDtcclxuXHJcbmNvbnN0IFByaW1hcnlCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxyXG4gIGNvbG9yOiAjMzE0NDUyO1xyXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xyXG4gIHBhZGRpbmc6IDE4cHggNDRweDtcclxuICBtYXgtd2lkdGg6IDI0MHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGJveC1zaGFkb3c6IDBweCAxM3B4IDIwcHggIzQ4NDg0ODYwO1xyXG4gIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG5gO1xyXG5cclxuLyogQ2hlY2tvdXRzICovXHJcblxyXG5jb25zdCBSaWdodEltYWdlID0gc3R5bGVkLmltZ2BgO1xyXG5cclxuY29uc3QgQ2hlY2tvdXRzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDAgMzMwcHggMCAwO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogc3BhY2UtYmV0d2VlbjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LCAyMjQsIDIyNCk7XHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgMTgwZGVnLFxyXG4gICAgcmdiYSgyMjQsIDIyNCwgMjI0LCAwLjkpIDAlLFxyXG4gICAgcmdiYSgyNDMsIDI0MywgMjUyLCAwKSA4MCVcclxuICApO1xyXG4gICR7bXFbM119IHtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbiAgICAke1JpZ2h0SW1hZ2V9IHtcclxuICAgICAgd2lkdGg6IDUwMHB4O1xyXG4gICAgfVxyXG4gIH1cclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjc1cHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDMwcHg7XHJcbiAgICB0b3A6IDE4MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IENoZWNrb3V0c0xpc3QgPSBzdHlsZWQudWxgXHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICAmID4gbGkge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBDaGVja291dERpc2NsYWltZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogNDAwcHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xyXG5gO1xyXG5cclxuLyogU3BlbmRpbmcgKi9cclxuXHJcbmNvbnN0IFNwZW5kaW5nQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBtYXJnaW4tdG9wOiAzNTBweDtcclxuICBtYXJnaW4tYm90dG9tOiAyMDBweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAmID4gZGl2IHtcclxuICAgICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgICBmb250LXNpemU6IDQ1cHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwYWRkaW5nLWxlZnQ6IDEwMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgTGFyZ2VCZ0ltYWdlID0gc3R5bGVkLmltZ2BcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgei1pbmRleDogLTE7XHJcbiAgd2lkdGg6IDIwNzNweDtcclxuICB0b3A6IC04MDBweDtcclxuICBsZWZ0OiAtODEwcHg7XHJcbmA7XHJcblxyXG4vKiBGQVEgKi9cclxuXHJcbmNvbnN0IEZBUUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAzMDBweDtcclxuICAke1RpdGxlfSB7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzcwNzA3MDtcclxuICAgIG1heC13aWR0aDogaW5pdGlhbDtcclxuICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1hcmdpbi10b3A6IDYwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMDBweDtcclxuICB9XHJcbmA7XHJcblxyXG4vKiBUaGUgRnV0dXJlICovXHJcblxyXG5jb25zdCBGdXR1cmVDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2Z1dHVyZUJnfSk7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG4gIHBhZGRpbmctdG9wOiAyODBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMjgwcHg7XHJcbiAgcGFkZGluZy1sZWZ0OiAzMDBweDtcclxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIGZvbnQtc2l6ZTogNDZweDtcclxuICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgfVxyXG4gICR7UH0ge1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgfVxyXG4gICYgJHtSb3d9ID4gJHtEb3dubG9hZEJ1dHRvbn0ge1xyXG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDIpO1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbmA7XHJcbiJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Spending */var SpendingContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u20\",label:\"SpendingContainer\"})(\"margin-top:350px;margin-bottom:200px;display:flex;position:relative;& > div{\",PrimaryButton,\"{max-width:400px;}\",Title,\"{max-width:400px;font-size:45px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var LeftImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u21\",label:\"LeftImage\"})( false?undefined:{name:\"nv5a7q\",styles:\"padding-left:100px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LargeBgImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u22\",label:\"LargeBgImage\"})( false?undefined:{name:\"1svtc3c\",styles:\"position:absolute;z-index:-1;width:2073px;top:-800px;left:-810px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* FAQ */var FAQContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u23\",label:\"FAQContainer\"})(\"padding-left:300px;padding-right:300px;\",Title,\"{border-bottom:1px solid #707070;max-width:initial;padding-bottom:40px;}\",PrimaryButton,\"{margin-top:60px;margin-bottom:100px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* The Future */var FutureContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u24\",label:\"FutureContainer\"})(\"background-image:url(\",_img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17___default.a,\");color:white;padding-top:280px;padding-bottom:280px;padding-left:300px;background-repeat:no-repeat;background-size:cover;\",Title,\"{max-width:400px;font-size:46px;margin-top:0;}\",P,\"{line-height:30px;}& \",Row,\" > \",DownloadButton,\"{filter:brightness(2);margin-top:20px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/page-vc.js\n");

/***/ })

})