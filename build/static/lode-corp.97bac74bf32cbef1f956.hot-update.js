webpackHotUpdate("lode-corp",{

/***/ "./packages/mars-theme/src/components/page-vc.js":
/*!*******************************************************!*\
  !*** ./packages/mars-theme/src/components/page-vc.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _react_hook_media_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-hook/media-query */ \"./node_modules/@react-hook/media-query/dist/module/index.js\");\n/* harmony import */ var _component_accordion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component-accordion */ \"./packages/mars-theme/src/components/component-accordion.js\");\n/* harmony import */ var _download_buttons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./download-buttons */ \"./packages/mars-theme/src/components/download-buttons.js\");\n/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./i18n */ \"./packages/mars-theme/src/components/i18n.js\");\n/* harmony import */ var _img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../img/vc-hero.jpg */ \"./packages/mars-theme/src/img/vc-hero.jpg\");\n/* harmony import */ var _img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../img/icon-bars.png */ \"./packages/mars-theme/src/img/icon-bars.png\");\n/* harmony import */ var _img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _img_icon_card_png__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../img/icon-card.png */ \"./packages/mars-theme/src/img/icon-card.png\");\n/* harmony import */ var _img_icon_card_png__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_img_icon_card_png__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _img_icon_global_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../img/icon-global.png */ \"./packages/mars-theme/src/img/icon-global.png\");\n/* harmony import */ var _img_icon_global_png__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_img_icon_global_png__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../img/icon-withdraw.png */ \"./packages/mars-theme/src/img/icon-withdraw.png\");\n/* harmony import */ var _img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../img/Lodepay-tiles.jpg */ \"./packages/mars-theme/src/img/Lodepay-tiles.jpg\");\n/* harmony import */ var _img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../img/checkout-image.png */ \"./packages/mars-theme/src/img/checkout-image.png\");\n/* harmony import */ var _img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../img/market-tiles.png */ \"./packages/mars-theme/src/img/market-tiles.png\");\n/* harmony import */ var _img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../img/trio-background-circle.jpg */ \"./packages/mars-theme/src/img/trio-background-circle.jpg\");\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../img/background-future.jpg */ \"./packages/mars-theme/src/img/background-future.jpg\");\n/* harmony import */ var _img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/* Images *//* Breakpoints */var breakpoints=[576,768,1320,1720];var mq=breakpoints.map(bp=>\"@media (max-width: \".concat(bp,\"px)\"));var PageVC=(_ref)=>{var{state}=_ref;var{t,i18n}=Object(react_i18next__WEBPACK_IMPORTED_MODULE_3__[\"useTranslation\"])();var[setActive,setActiveState]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[setHeight,setHeightState]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"0px\");var content=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useRef\"])(null);function toggleAccordion(){setActiveState(setActive===\"\"?\"active\":\"\");setHeightState(setActive===\"active\"?\"0px\":\"\".concat(content.current.scrollHeight,\"px\"));}return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(VCContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(HeroContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(Title,null,\"Spend digital gold & silver anywhere with the \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"b\",null,\"LODEpay\"),\" Virtual Card\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(HeroList,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"li\",null,\"Download the LODEpay Wallet\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"li\",null,\"Access Virtual Cards\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"li\",null,\"Spend AUX and AGX on Amazon, Apple, Nike & More!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(DownloadText,null,\"It\\u2019s that simple.\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(LightGrey,null,\"Get Your Card Now.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_download_buttons__WEBPACK_IMPORTED_MODULE_6__[\"default\"],null)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconRow,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconIconLol,{src:_img_icon_bars_png__WEBPACK_IMPORTED_MODULE_9___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconText,null,\"Spend Gold \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"br\",null),\"& Silver\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconIconLol,{src:_img_icon_card_png__WEBPACK_IMPORTED_MODULE_10___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconText,null,\"Withdraw \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"br\",null),\"Cash\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconIconLol,{src:_img_icon_global_png__WEBPACK_IMPORTED_MODULE_11___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconText,null,\"MasterCard Privileges\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconIconLol,{src:_img_icon_withdraw_png__WEBPACK_IMPORTED_MODULE_12___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(IconText,null,\"Send & Spend Globally\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(LoadContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(Title,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"b\",null,\"Load-up\"),\" in just a few steps\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(P,null,\"Spend your AGX and AUX Coins online or in-store on all your favorite brands.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(PrimaryButton,null,\"Create Account\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(CheckoutsContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(Title,null,\"Making your checkouts a whole lot shinier\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(P,null,\"Load virtual cards* with AGX & AUX straight from your LODEPay Wallet.\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(CheckoutsList,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"li\",null,\"Top-up fee: 3% \"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"li\",null,\"Daily limit: US$500\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"li\",null,\"Holding limit: US$2,500\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"b\",null,\"It\\u2019s time to get more out of your money.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(PrimaryButton,null,\"Settle with Metal\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(CheckoutDisclaimer,null,\"*The Virtual Card Program is only available in the U.S. right now, with plans to expand to new markets soon.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(RightImage,{src:_img_checkout_image_png__WEBPACK_IMPORTED_MODULE_14___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(SpendingContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(LeftImage,{src:_img_market_tiles_png__WEBPACK_IMPORTED_MODULE_15___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"div\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(Title,null,\"Start Spending Gold & Silver Instantly\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(P,null,\"Use LODEPay Virtual Cards on any online store that already accepts debit and credit cards.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(PrimaryButton,null,\"Spend Honest Money Now\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(LargeBgImage,{src:_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_16___default.a})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(FAQContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(Title,null,\"Questions? \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"br\",null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"b\",null,\"We have answers!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"Where can I use LODEPay Virtual Cards? \",content:\"You can use the LODE Virtual Card for any online purchasing experience where cards are accepted\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"How can I get my virtual card set up?\",content:\"Download the mobile wallet on IOS or Google and apply (The virtual program is only available to US citizens at this time\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"Are there any loading limits on the virtual cards?\",content:\"The maximum load per day is $500 USD and a total card balance of $2000 at a given time.\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_component_accordion__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{title:\"Is there a maximum amount I can hold on my virtual card?\",content:\"there are no spending limits beyond what the hold balance allows\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(PrimaryButton,null,\"Get Your Card\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(FutureContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(Title,null,\"The future of money starts here\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(P,null,\"Access your virtual cards and track purchases from one secure location: \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"br\",null),\"the LODEPay Wallet.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(P,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"b\",null,\"Start building wealth with\",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(\"br\",null),\"honest money today!\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_18__[\"jsx\"])(_download_buttons__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{layout:\"row\",label:false})));};// Connect the Header component to get access to the `state` in it's `props`\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(PageVC));var VCContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u0\",label:\"VCContainer\"})( false?undefined:{name:\"736obj\",styles:\"color:#314452;font-family:'Rubik';\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Hero */var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u1\",label:\"Title\"})(\"font-size:60px;max-width:750px;margin-top:200px;font-weight:300;\",mq[1],\"{font-size:40px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtdmMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0x3QiIsImZpbGUiOiJDOlxcVXNlcnNcXEpvZWxzXFxEb2N1bWVudHNcXEF0b21pYzQ3XFxMT0RFXFxMT0RFIEhvbWVwYWdlXFxmcm9udGl0eVxcbG9kZS1jb3JwXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxwYWdlLXZjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZVJlZn0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xyXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xyXG5pbXBvcnQge3VzZU1lZGlhUXVlcnksIHVzZU1lZGlhUXVlcmllc30gZnJvbSAnQHJlYWN0LWhvb2svbWVkaWEtcXVlcnknO1xyXG5pbXBvcnQgQWNjb3JkaW9uIGZyb20gXCIuL2NvbXBvbmVudC1hY2NvcmRpb25cIlxyXG5pbXBvcnQgRG93bmxvYWRCdXR0b25zIGZyb20gXCIuL2Rvd25sb2FkLWJ1dHRvbnNcIlxyXG5pbXBvcnQgJy4vaTE4bic7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IHZjSGVyb0JnIGZyb20gXCIuLi9pbWcvdmMtaGVyby5qcGdcIlxyXG5pbXBvcnQgYmFyc0ljb24gZnJvbSBcIi4uL2ltZy9pY29uLWJhcnMucG5nXCJcclxuaW1wb3J0IGNhcmRJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1jYXJkLnBuZ1wiXHJcbmltcG9ydCBnbG9iYWxJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1nbG9iYWwucG5nXCJcclxuaW1wb3J0IHdpdGhkcmF3SWNvbiBmcm9tIFwiLi4vaW1nL2ljb24td2l0aGRyYXcucG5nXCJcclxuaW1wb3J0IGxvZGVwYXlUaWxlc0JnIGZyb20gXCIuLi9pbWcvTG9kZXBheS10aWxlcy5qcGdcIlxyXG5pbXBvcnQgY2hlY2tvdXRJbWFnZSBmcm9tIFwiLi4vaW1nL2NoZWNrb3V0LWltYWdlLnBuZ1wiXHJcbmltcG9ydCBtYXJrZXRUaWxlcyBmcm9tIFwiLi4vaW1nL21hcmtldC10aWxlcy5wbmdcIlxyXG5pbXBvcnQgbGFyZ2VDaXJjbGVCZyBmcm9tIFwiLi4vaW1nL3RyaW8tYmFja2dyb3VuZC1jaXJjbGUuanBnXCJcclxuaW1wb3J0IGZ1dHVyZUJnIGZyb20gXCIuLi9pbWcvYmFja2dyb3VuZC1mdXR1cmUuanBnXCJcclxuXHJcbi8qIEJyZWFrcG9pbnRzICovXHJcbmNvbnN0IGJyZWFrcG9pbnRzID0gWzU3NiwgNzY4LCAxMzIwLCAxNzIwXTtcclxuY29uc3QgbXEgPSBicmVha3BvaW50cy5tYXAoXHJcbiAgYnAgPT4gYEBtZWRpYSAobWF4LXdpZHRoOiAke2JwfXB4KWBcclxuKVxyXG5cclxuY29uc3QgUGFnZVZDID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICBjb25zdCBbc2V0QWN0aXZlLCBzZXRBY3RpdmVTdGF0ZV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICBjb25zdCBbc2V0SGVpZ2h0LCBzZXRIZWlnaHRTdGF0ZV0gPSB1c2VTdGF0ZShcIjBweFwiKTtcclxuXHJcbiAgY29uc3QgY29udGVudCA9IHVzZVJlZihudWxsKTtcclxuXHJcbiAgZnVuY3Rpb24gdG9nZ2xlQWNjb3JkaW9uKCkge1xyXG4gICAgc2V0QWN0aXZlU3RhdGUoc2V0QWN0aXZlID09PSBcIlwiID8gXCJhY3RpdmVcIiA6IFwiXCIpO1xyXG4gICAgc2V0SGVpZ2h0U3RhdGUoXHJcbiAgICAgIHNldEFjdGl2ZSA9PT0gXCJhY3RpdmVcIiA/IFwiMHB4XCIgOiBgJHtjb250ZW50LmN1cnJlbnQuc2Nyb2xsSGVpZ2h0fXB4YFxyXG4gICAgKTtcclxuICB9XHJcbiAgcmV0dXJuICggXHJcbiAgICA8VkNDb250YWluZXI+XHJcbiAgICAgIDxIZXJvQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFNwZW5kIGRpZ2l0YWwgZ29sZCAmIHNpbHZlciBhbnl3aGVyZSB3aXRoIHRoZSA8Yj5MT0RFcGF5PC9iPiBWaXJ0dWFsIENhcmRcclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxIZXJvTGlzdD5cclxuICAgICAgICAgIDxsaT5Eb3dubG9hZCB0aGUgTE9ERXBheSBXYWxsZXQ8L2xpPlxyXG4gICAgICAgICAgPGxpPkFjY2VzcyBWaXJ0dWFsIENhcmRzPC9saT5cclxuICAgICAgICAgIDxsaT5TcGVuZCBBVVggYW5kIEFHWCBvbiBBbWF6b24sIEFwcGxlLCBOaWtlICYgTW9yZSE8L2xpPlxyXG4gICAgICAgIDwvSGVyb0xpc3Q+XHJcbiAgICAgICAgPERvd25sb2FkVGV4dD5cclxuICAgICAgICAgIEl04oCZcyB0aGF0IHNpbXBsZS5cclxuICAgICAgICAgIDxMaWdodEdyZXk+R2V0IFlvdXIgQ2FyZCBOb3cuPC9MaWdodEdyZXk+XHJcbiAgICAgICAgICA8RG93bmxvYWRCdXR0b25zIC8+XHJcbiAgICAgICAgPC9Eb3dubG9hZFRleHQ+XHJcbiAgICAgICAgPEljb25Sb3c+XHJcbiAgICAgICAgICA8SWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgICAgPEljb25JY29uTG9sIHNyYz17YmFyc0ljb259IC8+XHJcbiAgICAgICAgICAgIDxJY29uVGV4dD5cclxuICAgICAgICAgICAgU3BlbmQgR29sZCA8YnIgLz4mIFNpbHZlclxyXG4gICAgICAgICAgICA8L0ljb25UZXh0PlxyXG4gICAgICAgICAgPC9JY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgPEljb25Db250YWluZXI+XHJcbiAgICAgICAgICAgIDxJY29uSWNvbkxvbCBzcmM9e2NhcmRJY29ufSAvPlxyXG4gICAgICAgICAgICA8SWNvblRleHQ+XHJcbiAgICAgICAgICAgIFdpdGhkcmF3IDxiciAvPkNhc2hcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtnbG9iYWxJY29ufSAvPlxyXG4gICAgICAgICAgICA8SWNvblRleHQ+XHJcbiAgICAgICAgICAgIE1hc3RlckNhcmQgUHJpdmlsZWdlc1xyXG4gICAgICAgICAgICA8L0ljb25UZXh0PlxyXG4gICAgICAgICAgPC9JY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgPEljb25Db250YWluZXI+XHJcbiAgICAgICAgICAgIDxJY29uSWNvbkxvbCBzcmM9e3dpdGhkcmF3SWNvbn0gLz5cclxuICAgICAgICAgICAgPEljb25UZXh0PlxyXG4gICAgICAgICAgICBTZW5kICYgU3BlbmQgR2xvYmFsbHlcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICA8L0ljb25Sb3c+XHJcbiAgICAgIDwvSGVyb0NvbnRhaW5lcj5cclxuICAgICAgPExvYWRDb250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgIDxiPkxvYWQtdXA8L2I+IGluIGp1c3QgYSBmZXcgc3RlcHNcclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgIFNwZW5kIHlvdXIgQUdYIGFuZCBBVVggQ29pbnMgb25saW5lIG9yIGluLXN0b3JlIG9uIGFsbCB5b3VyIGZhdm9yaXRlIGJyYW5kcy5cclxuICAgICAgICA8L1A+XHJcbiAgICAgICAgPFByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgICBDcmVhdGUgQWNjb3VudFxyXG4gICAgICAgIDwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgPC9Mb2FkQ29udGFpbmVyPlxyXG4gICAgICA8Q2hlY2tvdXRzQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIE1ha2luZyB5b3VyIGNoZWNrb3V0cyBhIHdob2xlIGxvdCBzaGluaWVyXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8UD5cclxuICAgICAgICAgIExvYWQgdmlydHVhbCBjYXJkcyogd2l0aCBBR1ggJiBBVVggc3RyYWlnaHQgZnJvbSB5b3VyIExPREVQYXkgV2FsbGV0LiBcclxuICAgICAgICAgIDxDaGVja291dHNMaXN0PlxyXG4gICAgICAgICAgICA8bGk+VG9wLXVwIGZlZTogMyUgPC9saT5cclxuICAgICAgICAgICAgPGxpPkRhaWx5IGxpbWl0OiBVUyQ1MDA8L2xpPlxyXG4gICAgICAgICAgICA8bGk+SG9sZGluZyBsaW1pdDogVVMkMiw1MDA8L2xpPlxyXG4gICAgICAgICAgPC9DaGVja291dHNMaXN0PlxyXG4gICAgICAgICAgPGI+SXTigJlzIHRpbWUgdG8gZ2V0IG1vcmUgb3V0IG9mIHlvdXIgbW9uZXkuPC9iPlxyXG4gICAgICAgICAgPFByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgICAgIFNldHRsZSB3aXRoIE1ldGFsXHJcbiAgICAgICAgICA8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxDaGVja291dERpc2NsYWltZXI+XHJcbiAgICAgICAgICAqVGhlIFZpcnR1YWwgQ2FyZCBQcm9ncmFtIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBVLlMuIHJpZ2h0IG5vdywgd2l0aCBwbGFucyB0byBleHBhbmQgdG8gbmV3IG1hcmtldHMgc29vbi4gXHJcbiAgICAgICAgPC9DaGVja291dERpc2NsYWltZXI+XHJcbiAgICAgICAgPFJpZ2h0SW1hZ2Ugc3JjPXtjaGVja291dEltYWdlfS8+XHJcblxyXG4gICAgICA8L0NoZWNrb3V0c0NvbnRhaW5lcj5cclxuICAgICAgPFNwZW5kaW5nQ29udGFpbmVyPlxyXG4gICAgICA8TGVmdEltYWdlIHNyYz17bWFya2V0VGlsZXN9IC8+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgU3RhcnQgU3BlbmRpbmcgR29sZCAmIFNpbHZlciBJbnN0YW50bHlcclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgVXNlIExPREVQYXkgVmlydHVhbCBDYXJkcyBvbiBhbnkgb25saW5lIHN0b3JlIHRoYXQgYWxyZWFkeSBhY2NlcHRzIGRlYml0IGFuZCBjcmVkaXQgY2FyZHMuIFxyXG4gICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgPFByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgICAgIFNwZW5kIEhvbmVzdCBNb25leSBOb3dcclxuICAgICAgICAgIDwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8TGFyZ2VCZ0ltYWdlIHNyYz17bGFyZ2VDaXJjbGVCZ30gLz5cclxuICAgICAgPC9TcGVuZGluZ0NvbnRhaW5lcj5cclxuICAgICAgPEZBUUNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+UXVlc3Rpb25zPyA8YnIgLz5cclxuICAgICAgICA8Yj5XZSBoYXZlIGFuc3dlcnMhPC9iPjwvVGl0bGU+XHJcbiAgICAgICAgPEFjY29yZGlvblxyXG4gICAgICAgICAgdGl0bGU9XCJXaGVyZSBjYW4gSSB1c2UgTE9ERVBheSBWaXJ0dWFsIENhcmRzPyBcIlxyXG4gICAgICAgICAgY29udGVudD1cIllvdSBjYW4gdXNlIHRoZSBMT0RFIFZpcnR1YWwgQ2FyZCBmb3IgYW55IG9ubGluZSBwdXJjaGFzaW5nIGV4cGVyaWVuY2Ugd2hlcmUgY2FyZHMgYXJlIGFjY2VwdGVkXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxBY2NvcmRpb25cclxuICAgICAgICAgIHRpdGxlPVwiSG93IGNhbiBJIGdldCBteSB2aXJ0dWFsIGNhcmQgc2V0IHVwP1wiXHJcbiAgICAgICAgICBjb250ZW50PVwiRG93bmxvYWQgdGhlIG1vYmlsZSB3YWxsZXQgb24gSU9TIG9yIEdvb2dsZSBhbmQgYXBwbHkgKFRoZSB2aXJ0dWFsIHByb2dyYW0gaXMgb25seSBhdmFpbGFibGUgdG8gVVMgY2l0aXplbnMgYXQgdGhpcyB0aW1lXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxBY2NvcmRpb25cclxuICAgICAgICAgIHRpdGxlPVwiQXJlIHRoZXJlIGFueSBsb2FkaW5nIGxpbWl0cyBvbiB0aGUgdmlydHVhbCBjYXJkcz9cIlxyXG4gICAgICAgICAgY29udGVudD1cIlRoZSBtYXhpbXVtIGxvYWQgcGVyIGRheSBpcyAkNTAwIFVTRCBhbmQgYSB0b3RhbCBjYXJkIGJhbGFuY2Ugb2YgJDIwMDAgYXQgYSBnaXZlbiB0aW1lLlwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QWNjb3JkaW9uXHJcbiAgICAgICAgICB0aXRsZT1cIklzIHRoZXJlIGEgbWF4aW11bSBhbW91bnQgSSBjYW4gaG9sZCBvbiBteSB2aXJ0dWFsIGNhcmQ/XCJcclxuICAgICAgICAgIGNvbnRlbnQ9XCJ0aGVyZSBhcmUgbm8gc3BlbmRpbmcgbGltaXRzIGJleW9uZCB3aGF0IHRoZSBob2xkIGJhbGFuY2UgYWxsb3dzXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkdldCBZb3VyIENhcmQ8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgIDwvRkFRQ29udGFpbmVyPlxyXG4gICAgICA8RnV0dXJlQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFRoZSBmdXR1cmUgb2YgbW9uZXkgc3RhcnRzIGhlcmVcclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgICAgQWNjZXNzIHlvdXIgdmlydHVhbCBjYXJkcyBhbmQgdHJhY2sgcHVyY2hhc2VzIGZyb20gb25lIHNlY3VyZSBsb2NhdGlvbjogPGJyLz50aGUgTE9ERVBheSBXYWxsZXQuXHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgICAgPGI+U3RhcnQgYnVpbGRpbmcgd2VhbHRoIHdpdGg8YnIvPlxyXG4gICAgICAgICAgaG9uZXN0IG1vbmV5IHRvZGF5ITwvYj5cclxuICAgICAgICA8L1A+XHJcbiAgICAgICAgPERvd25sb2FkQnV0dG9ucyBsYXlvdXQ9e1wicm93XCJ9IGxhYmVsPXtmYWxzZX0gLz5cclxuICAgICAgPC9GdXR1cmVDb250YWluZXI+XHJcbiAgICA8L1ZDQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyBDb25uZWN0IHRoZSBIZWFkZXIgY29tcG9uZW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGBzdGF0ZWAgaW4gaXQncyBgcHJvcHNgXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUGFnZVZDKTtcclxuXHJcbmNvbnN0IFZDQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBmb250LWZhbWlseTogJ1J1YmlrJztcclxuYDtcclxuXHJcbi8qIEhlcm8gKi9cclxuXHJcbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdmBcclxuICAgIGZvbnQtc2l6ZTogNjBweDtcclxuICAgIG1heC13aWR0aDogNzUwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICAke21xWzFdfSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IEhlcm9Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTp1cmwoJHt2Y0hlcm9CZ30pO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1xyXG4gICAgJHttcVszXX0ge1xyXG4gICAgfVxyXG4gICAgJHttcVsyXX0ge1xyXG4gICAgfVxyXG4gICAgJHttcVsxXX0ge1xyXG4gICAgfVxyXG4gICAgJHttcVswXX0ge1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAzNzVweDtcclxuICAgICAgJHttcVsyXX0ge1xyXG4gICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5cclxuXHJcbmNvbnN0IEhlcm9MaXN0ID0gc3R5bGVkLnVsYFxyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICAmID4gbGkge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgRG93bmxvYWRUZXh0ID0gc3R5bGVkLmRpdmBcclxuICAgIG1hcmdpbi10b3A6IDc1cHg7XHJcbiAgICBmb250LXNpemU6IDIycHg7XHJcbmA7XHJcblxyXG5jb25zdCBMaWdodEdyZXkgPSBzdHlsZWQuZGl2YFxyXG4gICAgY29sb3I6ICNBNUE1QTU7XHJcbmA7XHJcblxyXG5jb25zdCBJY29uUm93ID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBtYXgtd2lkdGg6IDc1MHB4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMjBweDtcclxuYDtcclxuXHJcbmNvbnN0IEljb25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuYDtcclxuXHJcbmNvbnN0IEljb25JY29uTG9sID0gc3R5bGVkLmltZ2BcclxuICAgIG1heC13aWR0aDogODJweDtcclxuYDtcclxuXHJcbmNvbnN0IEljb25UZXh0ID0gc3R5bGVkLmRpdmBcclxuICAgIG1heC13aWR0aDogMTIwcHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBjb2xvcjogIzlEOUQ5RDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG4gICAgbWFyZ2luLXRvcDogMzVweDtcclxuYDtcclxuXHJcbi8qIExvYWQtdXAgKi9cclxuXHJcbmNvbnN0IExvYWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7bG9kZXBheVRpbGVzQmd9KTtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwMHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDc1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDE5MHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1xyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICAgICAgbWF4LXdpZHRoOiAzNjBweDtcclxuICAgICAgZm9udC1zaXplOiA1MHB4O1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgbWF4LXdpZHRoOiA0NTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XHJcbiAgcGFkZGluZzogMThweCA0NHB4O1xyXG4gIG1heC13aWR0aDogMjQwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgYm94LXNoYWRvdzogMHB4IDEzcHggMjBweCAjNDg0ODQ4NjA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbmA7XHJcblxyXG4vKiBDaGVja291dHMgKi9cclxuXHJcbmNvbnN0IFJpZ2h0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG5gO1xyXG5cclxuY29uc3QgQ2hlY2tvdXRzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDAgMzMwcHggMCAwO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogc3BhY2UtYmV0d2VlbjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LDIyNCwyMjQpO1xyXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcscmdiYSgyMjQsMjI0LDIyNCwwLjkpIDAlLHJnYmEoMjQzLDI0MywyNTIsMCkgODAlKTtcclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjc1cHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDMwcHg7XHJcbiAgICB0b3A6IDE4MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IENoZWNrb3V0c0xpc3QgPSBzdHlsZWQudWxgXHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICAgICYgPiBsaSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBDaGVja291dERpc2NsYWltZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogNDAwcHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xyXG5gO1xyXG5cclxuXHJcblxyXG4vKiBTcGVuZGluZyAqL1xyXG5cclxuY29uc3QgU3BlbmRpbmdDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1hcmdpbi10b3A6IDM1MHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDIwMHB4O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICYgPiBkaXYgeyBcclxuICAgICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgICBmb250LXNpemU6IDQ1cHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBMYXJnZUJnSW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB6LWluZGV4OiAtMTtcclxuICB3aWR0aDogMjA3M3B4O1xyXG4gIHRvcDogLTgwMHB4O1xyXG4gIGxlZnQ6IC04MTBweDtcclxuYDtcclxuXHJcbi8qIEZBUSAqL1xyXG5cclxuY29uc3QgRkFRQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDMwMHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNzA3MDcwO1xyXG4gICAgbWF4LXdpZHRoOiBpbml0aWFsO1xyXG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgbWFyZ2luLXRvcDogNjBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIFRoZSBGdXR1cmUgKi9cclxuXHJcbmNvbnN0IEZ1dHVyZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7ZnV0dXJlQmd9KTtcclxuICBjb2xvcjp3aGl0ZTtcclxuICBwYWRkaW5nLXRvcDoyODBweDtcclxuICBwYWRkaW5nLWJvdHRvbToyODBweDtcclxuICBwYWRkaW5nLWxlZnQ6MzAwcHg7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIGZvbnQtc2l6ZTo0NnB4O1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICB9XHJcbmA7XHJcblxyXG5cclxuIl19 */\"));var HeroContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u2\",label:\"HeroContainer\"})(\"display:flex;flex-direction:column;padding-left:300px;overflow:hidden;background-image:url(\",_img_vc_hero_jpg__WEBPACK_IMPORTED_MODULE_8___default.a,\");background-repeat:no-repeat;\",mq[3],\"{}\",mq[2],\"{}\",mq[1],\"{}\",mq[0],\"{}\",Title,\"{margin-top:375px;\",mq[2],\"{}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var HeroList=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\",{target:\"e11ent4u3\",label:\"HeroList\"})( false?undefined:{name:\"c4iwmf\",styles:\"margin-top:40px;font-size:20px;font-weight:300;& > li{margin-top:10px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var DownloadText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u4\",label:\"DownloadText\"})( false?undefined:{name:\"2wzdc5\",styles:\"margin-top:75px;font-size:22px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LightGrey=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u5\",label:\"LightGrey\"})( false?undefined:{name:\"phtpqg\",styles:\"color:#A5A5A5;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconRow=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u6\",label:\"IconRow\"})( false?undefined:{name:\"1sdfl9m\",styles:\"display:flex;max-width:750px;justify-content:space-between;margin-top:100px;margin-bottom:220px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u7\",label:\"IconContainer\"})( false?undefined:{name:\"hk64jw\",styles:\"display:flex;width:100%;flex-direction:column;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconIconLol=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u8\",label:\"IconIconLol\"})( false?undefined:{name:\"p6qudx\",styles:\"max-width:82px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSm9lbHNcXERvY3VtZW50c1xcQXRvbWljNDdcXExPREVcXExPREUgSG9tZXBhZ2VcXGZyb250aXR5XFxsb2RlLWNvcnBcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXHBhZ2UtdmMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb1A4QiIsImZpbGUiOiJDOlxcVXNlcnNcXEpvZWxzXFxEb2N1bWVudHNcXEF0b21pYzQ3XFxMT0RFXFxMT0RFIEhvbWVwYWdlXFxmcm9udGl0eVxcbG9kZS1jb3JwXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxwYWdlLXZjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZVJlZn0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xyXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xyXG5pbXBvcnQge3VzZU1lZGlhUXVlcnksIHVzZU1lZGlhUXVlcmllc30gZnJvbSAnQHJlYWN0LWhvb2svbWVkaWEtcXVlcnknO1xyXG5pbXBvcnQgQWNjb3JkaW9uIGZyb20gXCIuL2NvbXBvbmVudC1hY2NvcmRpb25cIlxyXG5pbXBvcnQgRG93bmxvYWRCdXR0b25zIGZyb20gXCIuL2Rvd25sb2FkLWJ1dHRvbnNcIlxyXG5pbXBvcnQgJy4vaTE4bic7XHJcblxyXG4vKiBJbWFnZXMgKi9cclxuaW1wb3J0IHZjSGVyb0JnIGZyb20gXCIuLi9pbWcvdmMtaGVyby5qcGdcIlxyXG5pbXBvcnQgYmFyc0ljb24gZnJvbSBcIi4uL2ltZy9pY29uLWJhcnMucG5nXCJcclxuaW1wb3J0IGNhcmRJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1jYXJkLnBuZ1wiXHJcbmltcG9ydCBnbG9iYWxJY29uIGZyb20gXCIuLi9pbWcvaWNvbi1nbG9iYWwucG5nXCJcclxuaW1wb3J0IHdpdGhkcmF3SWNvbiBmcm9tIFwiLi4vaW1nL2ljb24td2l0aGRyYXcucG5nXCJcclxuaW1wb3J0IGxvZGVwYXlUaWxlc0JnIGZyb20gXCIuLi9pbWcvTG9kZXBheS10aWxlcy5qcGdcIlxyXG5pbXBvcnQgY2hlY2tvdXRJbWFnZSBmcm9tIFwiLi4vaW1nL2NoZWNrb3V0LWltYWdlLnBuZ1wiXHJcbmltcG9ydCBtYXJrZXRUaWxlcyBmcm9tIFwiLi4vaW1nL21hcmtldC10aWxlcy5wbmdcIlxyXG5pbXBvcnQgbGFyZ2VDaXJjbGVCZyBmcm9tIFwiLi4vaW1nL3RyaW8tYmFja2dyb3VuZC1jaXJjbGUuanBnXCJcclxuaW1wb3J0IGZ1dHVyZUJnIGZyb20gXCIuLi9pbWcvYmFja2dyb3VuZC1mdXR1cmUuanBnXCJcclxuXHJcbi8qIEJyZWFrcG9pbnRzICovXHJcbmNvbnN0IGJyZWFrcG9pbnRzID0gWzU3NiwgNzY4LCAxMzIwLCAxNzIwXTtcclxuY29uc3QgbXEgPSBicmVha3BvaW50cy5tYXAoXHJcbiAgYnAgPT4gYEBtZWRpYSAobWF4LXdpZHRoOiAke2JwfXB4KWBcclxuKVxyXG5cclxuY29uc3QgUGFnZVZDID0gKHsgc3RhdGUgfSkgPT4ge1xyXG4gIGNvbnN0IHsgdCwgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKTtcclxuICBjb25zdCBbc2V0QWN0aXZlLCBzZXRBY3RpdmVTdGF0ZV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICBjb25zdCBbc2V0SGVpZ2h0LCBzZXRIZWlnaHRTdGF0ZV0gPSB1c2VTdGF0ZShcIjBweFwiKTtcclxuXHJcbiAgY29uc3QgY29udGVudCA9IHVzZVJlZihudWxsKTtcclxuXHJcbiAgZnVuY3Rpb24gdG9nZ2xlQWNjb3JkaW9uKCkge1xyXG4gICAgc2V0QWN0aXZlU3RhdGUoc2V0QWN0aXZlID09PSBcIlwiID8gXCJhY3RpdmVcIiA6IFwiXCIpO1xyXG4gICAgc2V0SGVpZ2h0U3RhdGUoXHJcbiAgICAgIHNldEFjdGl2ZSA9PT0gXCJhY3RpdmVcIiA/IFwiMHB4XCIgOiBgJHtjb250ZW50LmN1cnJlbnQuc2Nyb2xsSGVpZ2h0fXB4YFxyXG4gICAgKTtcclxuICB9XHJcbiAgcmV0dXJuICggXHJcbiAgICA8VkNDb250YWluZXI+XHJcbiAgICAgIDxIZXJvQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFNwZW5kIGRpZ2l0YWwgZ29sZCAmIHNpbHZlciBhbnl3aGVyZSB3aXRoIHRoZSA8Yj5MT0RFcGF5PC9iPiBWaXJ0dWFsIENhcmRcclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxIZXJvTGlzdD5cclxuICAgICAgICAgIDxsaT5Eb3dubG9hZCB0aGUgTE9ERXBheSBXYWxsZXQ8L2xpPlxyXG4gICAgICAgICAgPGxpPkFjY2VzcyBWaXJ0dWFsIENhcmRzPC9saT5cclxuICAgICAgICAgIDxsaT5TcGVuZCBBVVggYW5kIEFHWCBvbiBBbWF6b24sIEFwcGxlLCBOaWtlICYgTW9yZSE8L2xpPlxyXG4gICAgICAgIDwvSGVyb0xpc3Q+XHJcbiAgICAgICAgPERvd25sb2FkVGV4dD5cclxuICAgICAgICAgIEl04oCZcyB0aGF0IHNpbXBsZS5cclxuICAgICAgICAgIDxMaWdodEdyZXk+R2V0IFlvdXIgQ2FyZCBOb3cuPC9MaWdodEdyZXk+XHJcbiAgICAgICAgICA8RG93bmxvYWRCdXR0b25zIC8+XHJcbiAgICAgICAgPC9Eb3dubG9hZFRleHQ+XHJcbiAgICAgICAgPEljb25Sb3c+XHJcbiAgICAgICAgICA8SWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgICAgPEljb25JY29uTG9sIHNyYz17YmFyc0ljb259IC8+XHJcbiAgICAgICAgICAgIDxJY29uVGV4dD5cclxuICAgICAgICAgICAgU3BlbmQgR29sZCA8YnIgLz4mIFNpbHZlclxyXG4gICAgICAgICAgICA8L0ljb25UZXh0PlxyXG4gICAgICAgICAgPC9JY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgPEljb25Db250YWluZXI+XHJcbiAgICAgICAgICAgIDxJY29uSWNvbkxvbCBzcmM9e2NhcmRJY29ufSAvPlxyXG4gICAgICAgICAgICA8SWNvblRleHQ+XHJcbiAgICAgICAgICAgIFdpdGhkcmF3IDxiciAvPkNhc2hcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICAgIDxJY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8SWNvbkljb25Mb2wgc3JjPXtnbG9iYWxJY29ufSAvPlxyXG4gICAgICAgICAgICA8SWNvblRleHQ+XHJcbiAgICAgICAgICAgIE1hc3RlckNhcmQgUHJpdmlsZWdlc1xyXG4gICAgICAgICAgICA8L0ljb25UZXh0PlxyXG4gICAgICAgICAgPC9JY29uQ29udGFpbmVyPlxyXG4gICAgICAgICAgPEljb25Db250YWluZXI+XHJcbiAgICAgICAgICAgIDxJY29uSWNvbkxvbCBzcmM9e3dpdGhkcmF3SWNvbn0gLz5cclxuICAgICAgICAgICAgPEljb25UZXh0PlxyXG4gICAgICAgICAgICBTZW5kICYgU3BlbmQgR2xvYmFsbHlcclxuICAgICAgICAgICAgPC9JY29uVGV4dD5cclxuICAgICAgICAgIDwvSWNvbkNvbnRhaW5lcj5cclxuICAgICAgICA8L0ljb25Sb3c+XHJcbiAgICAgIDwvSGVyb0NvbnRhaW5lcj5cclxuICAgICAgPExvYWRDb250YWluZXI+XHJcbiAgICAgICAgPFRpdGxlPlxyXG4gICAgICAgIDxiPkxvYWQtdXA8L2I+IGluIGp1c3QgYSBmZXcgc3RlcHNcclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgIFNwZW5kIHlvdXIgQUdYIGFuZCBBVVggQ29pbnMgb25saW5lIG9yIGluLXN0b3JlIG9uIGFsbCB5b3VyIGZhdm9yaXRlIGJyYW5kcy5cclxuICAgICAgICA8L1A+XHJcbiAgICAgICAgPFByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgICBDcmVhdGUgQWNjb3VudFxyXG4gICAgICAgIDwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgPC9Mb2FkQ29udGFpbmVyPlxyXG4gICAgICA8Q2hlY2tvdXRzQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIE1ha2luZyB5b3VyIGNoZWNrb3V0cyBhIHdob2xlIGxvdCBzaGluaWVyXHJcbiAgICAgICAgPC9UaXRsZT5cclxuICAgICAgICA8UD5cclxuICAgICAgICAgIExvYWQgdmlydHVhbCBjYXJkcyogd2l0aCBBR1ggJiBBVVggc3RyYWlnaHQgZnJvbSB5b3VyIExPREVQYXkgV2FsbGV0LiBcclxuICAgICAgICAgIDxDaGVja291dHNMaXN0PlxyXG4gICAgICAgICAgICA8bGk+VG9wLXVwIGZlZTogMyUgPC9saT5cclxuICAgICAgICAgICAgPGxpPkRhaWx5IGxpbWl0OiBVUyQ1MDA8L2xpPlxyXG4gICAgICAgICAgICA8bGk+SG9sZGluZyBsaW1pdDogVVMkMiw1MDA8L2xpPlxyXG4gICAgICAgICAgPC9DaGVja291dHNMaXN0PlxyXG4gICAgICAgICAgPGI+SXTigJlzIHRpbWUgdG8gZ2V0IG1vcmUgb3V0IG9mIHlvdXIgbW9uZXkuPC9iPlxyXG4gICAgICAgICAgPFByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgICAgIFNldHRsZSB3aXRoIE1ldGFsXHJcbiAgICAgICAgICA8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxDaGVja291dERpc2NsYWltZXI+XHJcbiAgICAgICAgICAqVGhlIFZpcnR1YWwgQ2FyZCBQcm9ncmFtIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBVLlMuIHJpZ2h0IG5vdywgd2l0aCBwbGFucyB0byBleHBhbmQgdG8gbmV3IG1hcmtldHMgc29vbi4gXHJcbiAgICAgICAgPC9DaGVja291dERpc2NsYWltZXI+XHJcbiAgICAgICAgPFJpZ2h0SW1hZ2Ugc3JjPXtjaGVja291dEltYWdlfS8+XHJcblxyXG4gICAgICA8L0NoZWNrb3V0c0NvbnRhaW5lcj5cclxuICAgICAgPFNwZW5kaW5nQ29udGFpbmVyPlxyXG4gICAgICA8TGVmdEltYWdlIHNyYz17bWFya2V0VGlsZXN9IC8+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgICAgU3RhcnQgU3BlbmRpbmcgR29sZCAmIFNpbHZlciBJbnN0YW50bHlcclxuICAgICAgICAgIDwvVGl0bGU+XHJcbiAgICAgICAgICA8UD5cclxuICAgICAgICAgICAgVXNlIExPREVQYXkgVmlydHVhbCBDYXJkcyBvbiBhbnkgb25saW5lIHN0b3JlIHRoYXQgYWxyZWFkeSBhY2NlcHRzIGRlYml0IGFuZCBjcmVkaXQgY2FyZHMuIFxyXG4gICAgICAgICAgPC9QPlxyXG4gICAgICAgICAgPFByaW1hcnlCdXR0b24+XHJcbiAgICAgICAgICAgIFNwZW5kIEhvbmVzdCBNb25leSBOb3dcclxuICAgICAgICAgIDwvUHJpbWFyeUJ1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8TGFyZ2VCZ0ltYWdlIHNyYz17bGFyZ2VDaXJjbGVCZ30gLz5cclxuICAgICAgPC9TcGVuZGluZ0NvbnRhaW5lcj5cclxuICAgICAgPEZBUUNvbnRhaW5lcj5cclxuICAgICAgICA8VGl0bGU+UXVlc3Rpb25zPyA8YnIgLz5cclxuICAgICAgICA8Yj5XZSBoYXZlIGFuc3dlcnMhPC9iPjwvVGl0bGU+XHJcbiAgICAgICAgPEFjY29yZGlvblxyXG4gICAgICAgICAgdGl0bGU9XCJXaGVyZSBjYW4gSSB1c2UgTE9ERVBheSBWaXJ0dWFsIENhcmRzPyBcIlxyXG4gICAgICAgICAgY29udGVudD1cIllvdSBjYW4gdXNlIHRoZSBMT0RFIFZpcnR1YWwgQ2FyZCBmb3IgYW55IG9ubGluZSBwdXJjaGFzaW5nIGV4cGVyaWVuY2Ugd2hlcmUgY2FyZHMgYXJlIGFjY2VwdGVkXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxBY2NvcmRpb25cclxuICAgICAgICAgIHRpdGxlPVwiSG93IGNhbiBJIGdldCBteSB2aXJ0dWFsIGNhcmQgc2V0IHVwP1wiXHJcbiAgICAgICAgICBjb250ZW50PVwiRG93bmxvYWQgdGhlIG1vYmlsZSB3YWxsZXQgb24gSU9TIG9yIEdvb2dsZSBhbmQgYXBwbHkgKFRoZSB2aXJ0dWFsIHByb2dyYW0gaXMgb25seSBhdmFpbGFibGUgdG8gVVMgY2l0aXplbnMgYXQgdGhpcyB0aW1lXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxBY2NvcmRpb25cclxuICAgICAgICAgIHRpdGxlPVwiQXJlIHRoZXJlIGFueSBsb2FkaW5nIGxpbWl0cyBvbiB0aGUgdmlydHVhbCBjYXJkcz9cIlxyXG4gICAgICAgICAgY29udGVudD1cIlRoZSBtYXhpbXVtIGxvYWQgcGVyIGRheSBpcyAkNTAwIFVTRCBhbmQgYSB0b3RhbCBjYXJkIGJhbGFuY2Ugb2YgJDIwMDAgYXQgYSBnaXZlbiB0aW1lLlwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QWNjb3JkaW9uXHJcbiAgICAgICAgICB0aXRsZT1cIklzIHRoZXJlIGEgbWF4aW11bSBhbW91bnQgSSBjYW4gaG9sZCBvbiBteSB2aXJ0dWFsIGNhcmQ/XCJcclxuICAgICAgICAgIGNvbnRlbnQ9XCJ0aGVyZSBhcmUgbm8gc3BlbmRpbmcgbGltaXRzIGJleW9uZCB3aGF0IHRoZSBob2xkIGJhbGFuY2UgYWxsb3dzXCJcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxQcmltYXJ5QnV0dG9uPkdldCBZb3VyIENhcmQ8L1ByaW1hcnlCdXR0b24+XHJcbiAgICAgIDwvRkFRQ29udGFpbmVyPlxyXG4gICAgICA8RnV0dXJlQ29udGFpbmVyPlxyXG4gICAgICAgIDxUaXRsZT5cclxuICAgICAgICAgIFRoZSBmdXR1cmUgb2YgbW9uZXkgc3RhcnRzIGhlcmVcclxuICAgICAgICA8L1RpdGxlPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgICAgQWNjZXNzIHlvdXIgdmlydHVhbCBjYXJkcyBhbmQgdHJhY2sgcHVyY2hhc2VzIGZyb20gb25lIHNlY3VyZSBsb2NhdGlvbjogPGJyLz50aGUgTE9ERVBheSBXYWxsZXQuXHJcbiAgICAgICAgPC9QPlxyXG4gICAgICAgIDxQPlxyXG4gICAgICAgICAgPGI+U3RhcnQgYnVpbGRpbmcgd2VhbHRoIHdpdGg8YnIvPlxyXG4gICAgICAgICAgaG9uZXN0IG1vbmV5IHRvZGF5ITwvYj5cclxuICAgICAgICA8L1A+XHJcbiAgICAgICAgPERvd25sb2FkQnV0dG9ucyBsYXlvdXQ9e1wicm93XCJ9IGxhYmVsPXtmYWxzZX0gLz5cclxuICAgICAgPC9GdXR1cmVDb250YWluZXI+XHJcbiAgICA8L1ZDQ29udGFpbmVyPlxyXG4gICk7XHJcbn07XHJcblxyXG4vLyBDb25uZWN0IHRoZSBIZWFkZXIgY29tcG9uZW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGBzdGF0ZWAgaW4gaXQncyBgcHJvcHNgXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUGFnZVZDKTtcclxuXHJcbmNvbnN0IFZDQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogIzMxNDQ1MjtcclxuICBmb250LWZhbWlseTogJ1J1YmlrJztcclxuYDtcclxuXHJcbi8qIEhlcm8gKi9cclxuXHJcbmNvbnN0IFRpdGxlID0gc3R5bGVkLmRpdmBcclxuICAgIGZvbnQtc2l6ZTogNjBweDtcclxuICAgIG1heC13aWR0aDogNzUwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAyMDBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICAke21xWzFdfSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogNDBweDtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IEhlcm9Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIHBhZGRpbmctbGVmdDogMzAwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTp1cmwoJHt2Y0hlcm9CZ30pO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1xyXG4gICAgJHttcVszXX0ge1xyXG4gICAgfVxyXG4gICAgJHttcVsyXX0ge1xyXG4gICAgfVxyXG4gICAgJHttcVsxXX0ge1xyXG4gICAgfVxyXG4gICAgJHttcVswXX0ge1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAzNzVweDtcclxuICAgICAgJHttcVsyXX0ge1xyXG4gICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5cclxuXHJcbmNvbnN0IEhlcm9MaXN0ID0gc3R5bGVkLnVsYFxyXG4gICAgbWFyZ2luLXRvcDogNDBweDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICAmID4gbGkge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgRG93bmxvYWRUZXh0ID0gc3R5bGVkLmRpdmBcclxuICAgIG1hcmdpbi10b3A6IDc1cHg7XHJcbiAgICBmb250LXNpemU6IDIycHg7XHJcbmA7XHJcblxyXG5jb25zdCBMaWdodEdyZXkgPSBzdHlsZWQuZGl2YFxyXG4gICAgY29sb3I6ICNBNUE1QTU7XHJcbmA7XHJcblxyXG5jb25zdCBJY29uUm93ID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBtYXgtd2lkdGg6IDc1MHB4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgbWFyZ2luLXRvcDogMTAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMjBweDtcclxuYDtcclxuXHJcbmNvbnN0IEljb25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuYDtcclxuXHJcbmNvbnN0IEljb25JY29uTG9sID0gc3R5bGVkLmltZ2BcclxuICAgIG1heC13aWR0aDogODJweDtcclxuYDtcclxuXHJcbmNvbnN0IEljb25UZXh0ID0gc3R5bGVkLmRpdmBcclxuICAgIG1heC13aWR0aDogMTIwcHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBjb2xvcjogIzlEOUQ5RDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG4gICAgbWFyZ2luLXRvcDogMzVweDtcclxuYDtcclxuXHJcbi8qIExvYWQtdXAgKi9cclxuXHJcbmNvbnN0IExvYWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7bG9kZXBheVRpbGVzQmd9KTtcclxuICAgIHBhZGRpbmctbGVmdDogMTAwMHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDc1MHB4O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IDE5MHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDEwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1xyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXJnaW4tdG9wOiAyNTBweDtcclxuICAgICAgbWF4LXdpZHRoOiAzNjBweDtcclxuICAgICAgZm9udC1zaXplOiA1MHB4O1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgUCA9IHN0eWxlZC5wYFxyXG4gICAgZm9udC1zaXplOiAyMnB4O1xyXG4gICAgbWF4LXdpZHRoOiA0NTBweDtcclxuICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBQcmltYXJ5QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcclxuY29sb3I6ICMzMTQ0NTI7XHJcbiAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XHJcbiAgcGFkZGluZzogMThweCA0NHB4O1xyXG4gIG1heC13aWR0aDogMjQwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBmb250LXNpemU6IDIwcHg7XHJcbiAgYm94LXNoYWRvdzogMHB4IDEzcHggMjBweCAjNDg0ODQ4NjA7XHJcbiAgbWFyZ2luLXRvcDogNDBweDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbmA7XHJcblxyXG4vKiBDaGVja291dHMgKi9cclxuXHJcbmNvbnN0IFJpZ2h0SW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG5gO1xyXG5cclxuY29uc3QgQ2hlY2tvdXRzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDAgMzMwcHggMCAwO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogc3BhY2UtYmV0d2VlbjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBiYWNrZ3JvdW5kOiByZ2IoMjI0LDIyNCwyMjQpO1xyXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcscmdiYSgyMjQsMjI0LDIyNCwwLjkpIDAlLHJnYmEoMjQzLDI0MywyNTIsMCkgODAlKTtcclxuICAke1ByaW1hcnlCdXR0b259IHtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA1MHB4O1xyXG4gIH1cclxuICAke1RpdGxlfSB7XHJcbiAgICBmb250LXNpemU6IDQ4cHg7XHJcbiAgICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjc1cHg7XHJcbiAgfVxyXG4gICR7UmlnaHRJbWFnZX0ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgcmlnaHQ6IDMwcHg7XHJcbiAgICB0b3A6IDE4MHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IENoZWNrb3V0c0xpc3QgPSBzdHlsZWQudWxgXHJcbiAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICAgICYgPiBsaSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBDaGVja291dERpc2NsYWltZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogNDAwcHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDEwMHB4O1xyXG5gO1xyXG5cclxuXHJcblxyXG4vKiBTcGVuZGluZyAqL1xyXG5cclxuY29uc3QgU3BlbmRpbmdDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1hcmdpbi10b3A6IDM1MHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDIwMHB4O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICYgPiBkaXYgeyBcclxuICAgICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgfVxyXG4gICAgJHtUaXRsZX0ge1xyXG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgICBmb250LXNpemU6IDQ1cHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgTGVmdEltYWdlID0gc3R5bGVkLmltZ2BcclxuICAgIHBhZGRpbmctbGVmdDogMTAwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBMYXJnZUJnSW1hZ2UgPSBzdHlsZWQuaW1nYFxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB6LWluZGV4OiAtMTtcclxuICB3aWR0aDogMjA3M3B4O1xyXG4gIHRvcDogLTgwMHB4O1xyXG4gIGxlZnQ6IC04MTBweDtcclxuYDtcclxuXHJcbi8qIEZBUSAqL1xyXG5cclxuY29uc3QgRkFRQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBwYWRkaW5nLWxlZnQ6IDMwMHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDMwMHB4O1xyXG4gICR7VGl0bGV9IHtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNzA3MDcwO1xyXG4gICAgbWF4LXdpZHRoOiBpbml0aWFsO1xyXG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XHJcbiAgfVxyXG4gICR7UHJpbWFyeUJ1dHRvbn0ge1xyXG4gICAgbWFyZ2luLXRvcDogNjBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xyXG4gIH1cclxuYDtcclxuXHJcbi8qIFRoZSBGdXR1cmUgKi9cclxuXHJcbmNvbnN0IEZ1dHVyZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7ZnV0dXJlQmd9KTtcclxuICBjb2xvcjp3aGl0ZTtcclxuICBwYWRkaW5nLXRvcDoyODBweDtcclxuICBwYWRkaW5nLWJvdHRvbToyODBweDtcclxuICBwYWRkaW5nLWxlZnQ6MzAwcHg7XHJcbiAgYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1xyXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbiAgJHtUaXRsZX0ge1xyXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgIGZvbnQtc2l6ZTo0NnB4O1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICB9XHJcbiAgJHtQfSB7XHJcbiAgICBsaW5lLWhlaWdodDogMzBweDtcclxuICB9XHJcbmA7XHJcblxyXG5cclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var IconText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u9\",label:\"IconText\"})( false?undefined:{name:\"zl1h05\",styles:\"max-width:120px;font-size:16px;color:#9D9D9D;line-height:22px;margin-top:35px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Load-up */var LoadContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u10\",label:\"LoadContainer\"})(\"background-image:url(\",_img_Lodepay_tiles_jpg__WEBPACK_IMPORTED_MODULE_13___default.a,\");padding-left:1000px;padding-bottom:750px;background-position:-200px 190px;padding-top:100px;background-repeat:no-repeat;\",Title,\"{margin-top:250px;max-width:360px;font-size:50px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var P=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e11ent4u11\",label:\"P\"})( false?undefined:{name:\"tksp8l\",styles:\"font-size:22px;max-width:450px;font-weight:300;margin-top:40px;line-height:30px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var PrimaryButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e11ent4u12\",label:\"PrimaryButton\"})( false?undefined:{name:\"nzc48v\",styles:\"color:#314452;background:white;border:none;border-radius:30px;padding:18px 44px;max-width:240px;font-weight:600;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:40px;cursor:pointer;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Checkouts */var RightImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u13\",label:\"RightImage\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var CheckoutsContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u14\",label:\"CheckoutsContainer\"})(\"padding-left:300px;border-radius:0 330px 0 0;display:flex;flex-direction:column;align-items:space-between;position:relative;overflow:hidden;background:rgb(224,224,224);background:linear-gradient(180deg,rgba(224,224,224,0.9) 0%,rgba(243,243,252,0) 80%);\",PrimaryButton,\"{max-width:500px;margin-bottom:50px;}\",Title,\"{font-size:48px;max-width:500px;margin-top:275px;}\",RightImage,\"{position:absolute;right:30px;top:180px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var CheckoutsList=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"ul\",{target:\"e11ent4u15\",label:\"CheckoutsList\"})( false?undefined:{name:\"isifv6\",styles:\"margin-bottom:40px;& > li{margin-top:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CheckoutDisclaimer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u16\",label:\"CheckoutDisclaimer\"})( false?undefined:{name:\"9dj73s\",styles:\"max-width:400px;padding-bottom:100px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* Spending */var SpendingContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u17\",label:\"SpendingContainer\"})(\"margin-top:350px;margin-bottom:200px;display:flex;position:relative;& > div{\",PrimaryButton,\"{max-width:400px;}\",Title,\"{max-width:400px;font-size:45px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var LeftImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u18\",label:\"LeftImage\"})( false?undefined:{name:\"nv5a7q\",styles:\"padding-left:100px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LargeBgImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e11ent4u19\",label:\"LargeBgImage\"})( false?undefined:{name:\"1svtc3c\",styles:\"position:absolute;z-index:-1;width:2073px;top:-800px;left:-810px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* FAQ */var FAQContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u20\",label:\"FAQContainer\"})(\"padding-left:300px;padding-right:300px;\",Title,\"{border-bottom:1px solid #707070;max-width:initial;padding-bottom:40px;}\",PrimaryButton,\"{margin-top:60px;margin-bottom:100px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));/* The Future */var FutureContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e11ent4u21\",label:\"FutureContainer\"})(\"background-image:url(\",_img_background_future_jpg__WEBPACK_IMPORTED_MODULE_17___default.a,\");color:white;padding-top:280px;padding-bottom:280px;padding-left:300px;background-repeat:no-repeat;background-size:cover;\",Title,\"{max-width:400px;font-size:46px;margin-top:0;}\",P,\"{line-height:30px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/page-vc.js\n");

/***/ })

})