webpackHotUpdate("lode-corp",{

/***/ "./packages/mars-theme/src/components/module-token-trio.js":
/*!*****************************************************************!*\
  !*** ./packages/mars-theme/src/components/module-token-trio.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _download_buttons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./download-buttons */ \"./packages/mars-theme/src/components/download-buttons.js\");\n/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-i18next */ \"./node_modules/react-i18next/dist/es/index.js\");\n/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./i18n */ \"./packages/mars-theme/src/components/i18n.js\");\n/* harmony import */ var _img_lode_token_img_png__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../img/lode-token-img.png */ \"./packages/mars-theme/src/img/lode-token-img.png\");\n/* harmony import */ var _img_lode_token_img_png__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_img_lode_token_img_png__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _img_agx_coin_img_png__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../img/agx-coin-img.png */ \"./packages/mars-theme/src/img/agx-coin-img.png\");\n/* harmony import */ var _img_agx_coin_img_png__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_img_agx_coin_img_png__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _img_aux_coin_img_png__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../img/aux-coin-img.png */ \"./packages/mars-theme/src/img/aux-coin-img.png\");\n/* harmony import */ var _img_aux_coin_img_png__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_img_aux_coin_img_png__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../img/trio-background-circle.jpg */ \"./packages/mars-theme/src/img/trio-background-circle.jpg\");\n/* harmony import */ var _img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _img_l_pay_phone_image_png__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../img/l-pay-phone-image.png */ \"./packages/mars-theme/src/img/l-pay-phone-image.png\");\n/* harmony import */ var _img_l_pay_phone_image_png__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_img_l_pay_phone_image_png__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _img_lpay_logo_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../img/lpay-logo.png */ \"./packages/mars-theme/src/img/lpay-logo.png\");\n/* harmony import */ var _img_lpay_logo_png__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_img_lpay_logo_png__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/* Images *//* Breakpoints */var breakpoints=[576,768,1320,1720];var mq=breakpoints.map(bp=>\"@media (max-width: \".concat(bp,\"px)\"));var TokenTrio=(_ref)=>{var{state}=_ref;var{t,i18n}=Object(react_i18next__WEBPACK_IMPORTED_MODULE_4__[\"useTranslation\"])();return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(TrioContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(TrioRow,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardImg,{src:_img_lode_token_img_png__WEBPACK_IMPORTED_MODULE_6___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardTitle,null,t(\"home.3.lode\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardDesc,null,t(\"home.3.lode1\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(TokenCardBtn,null,t(\"home.3.lode2\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardImg,{src:_img_agx_coin_img_png__WEBPACK_IMPORTED_MODULE_7___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardTitle,null,t(\"home.3.agx\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardDesc,null,t(\"home.3.agx1\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(TokenCardBtn,null,t(\"home.3.agx2\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(Card,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardImg,{src:_img_aux_coin_img_png__WEBPACK_IMPORTED_MODULE_8___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardTitle,null,t(\"home.3.aux\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(CardDesc,null,t(\"home.3.aux1\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(TokenCardBtn,null,t(\"home.3.aux2\")))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(BgImg,{src:_img_trio_background_circle_jpg__WEBPACK_IMPORTED_MODULE_9___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(TwoColContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(LeftImage,{src:_img_l_pay_phone_image_png__WEBPACK_IMPORTED_MODULE_10___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(WidthMax,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(SectionMarginTop,null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(SectionLogo,{src:_img_lpay_logo_png__WEBPACK_IMPORTED_MODULE_11___default.a}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(Title,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(\"b\",null,\"Reinventing\"),\" money as you know it.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(P,null,\"Send, spend and store your AGX & AUX with the secure, user-friendly LODEpay Wallet. \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(\"b\",null,\"One wallet unlocking all your honest money.\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_12__[\"jsx\"])(_download_buttons__WEBPACK_IMPORTED_MODULE_3__[\"default\"],null)))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(TokenTrio));var LeftImage=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"epn1jxa0\",label:\"LeftImage\"})(\"position:relative;left:-150px;margin-right:-100px;bottom:-3px;\",mq[3],\"{max-width:800px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var BgImg=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"epn1jxa1\",label:\"BgImg\"})(\"position:absolute;z-index:-1;top:-230px;left:-630px;\",mq[3],\"{display:none;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var Card=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa2\",label:\"Card\"})( false?undefined:{name:\"1wk4uzn\",styles:\"max-width:375px;text-align:center;margin:30px;display:flex;flex-direction:column;justify-content:center;align-items:center;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardImg=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"epn1jxa3\",label:\"CardImg\"})(mq[3],\"{max-width:300px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var CardTitle=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa4\",label:\"CardTitle\"})( false?undefined:{name:\"9bt0lj\",styles:\"font-size:30px;font-weight:500;color:#314452;margin-top:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CardDesc=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa5\",label:\"CardDesc\"})( false?undefined:{name:\"1ez0f5\",styles:\"margin-top:20px;font-size:20px;color:#777777;max-width:380px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TokenCardBtn=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa6\",label:\"TokenCardBtn\"})( false?undefined:{name:\"1jlfbxo\",styles:\"color:#314452;background:white;border:none;border-radius:30px;padding:18px 44px;max-width:240px;font-weight:500;font-size:20px;box-shadow:0px 13px 20px #48484860;margin-top:45px;cursor:pointer;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa7\",label:\"Container\"})( false?undefined:{name:\"1f7412t\",styles:\"display:flex;flex-direction:column;align-items:space-between;position:relative;overflow:hidden;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TwoColContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa8\",label:\"TwoColContainer\"})(\"display:flex;margin-top:100px;overflow:hidden;\",mq[3],\"{flex-direction:column;}\",LeftImage,\"{\",mq[3],\"{left:0;margin-right:0;align-self:flex-start;flex-grow:0;align-self:flex-start;justify-self:flex-start;order:1;}}\",Container,\"{\",mq[3],\"{order:0;padding-left:50px;}}\",Container,\"{\",mq[3],\"{padding-left:10vw;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var TrioRow=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa9\",label:\"TrioRow\"})(\"display:flex;margin:auto;margin-top:140px;\",mq[2],\"{flex-wrap:wrap;justify-content:center;}\",BgImg,\"{display:none;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var TrioContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa10\",label:\"TrioContainer\"})(\"position:relative;padding-left:250px;\",TwoColContainer,\"{\",mq[2],\"{flex-direction:column;}}\",TrioRow,\"{\",mq[3],\"{margin-top:50px;}}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var SectionLogo=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"epn1jxa11\",label:\"SectionLogo\"})( false?undefined:{name:\"juwc4r\",styles:\"max-width:110px;position:relative;margin-bottom:20px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var P=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"epn1jxa12\",label:\"P\"})( false?undefined:{name:\"ujizdj\",styles:\"max-width:540px;font-size:20px;line-height:35px;color:#314452;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa13\",label:\"Title\"})( false?undefined:{name:\"vieo9e\",styles:\"font-size:50px;max-width:600px;line-height:60px;margin-bottom:25px;color:#314452;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SectionMarginTop=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa14\",label:\"SectionMarginTop\"})(\"margin-top:200px;\",mq[2],\"{margin-top:50px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));var WidthMax=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"epn1jxa15\",label:\"WidthMax\"})( false?undefined:{name:\"1dkrbw7\",styles:\"max-width:460px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/module-token-trio.js\n");

/***/ })

})